/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/page"],{

/***/ "?840f":
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

/* (ignored) */

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fparkergraham%2FDocuments%2FProgramming%2Fcpsc559-youchat%2Fsrc%2Fapp%2Fpage.tsx&server=false!":
/*!**********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fparkergraham%2FDocuments%2FProgramming%2Fcpsc559-youchat%2Fsrc%2Fapp%2Fpage.tsx&server=false! ***!
  \**********************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/page.tsx */ \"(app-pages-browser)/./src/app/page.tsx\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lMkZVc2VycyUyRnBhcmtlcmdyYWhhbSUyRkRvY3VtZW50cyUyRlByb2dyYW1taW5nJTJGY3BzYzU1OS15b3VjaGF0JTJGc3JjJTJGYXBwJTJGcGFnZS50c3gmc2VydmVyPWZhbHNlISIsIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvP2JmODIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvVXNlcnMvcGFya2VyZ3JhaGFtL0RvY3VtZW50cy9Qcm9ncmFtbWluZy9jcHNjNTU5LXlvdWNoYXQvc3JjL2FwcC9wYWdlLnRzeFwiKSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fparkergraham%2FDocuments%2FProgramming%2Fcpsc559-youchat%2Fsrc%2Fapp%2Fpage.tsx&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        var React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n        // ATTENTION\n        // When adding new symbols to this file,\n        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n        // The Symbol used to tag the ReactElement-like types.\n        var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n        var REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\n        var REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\n        var REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\n        var REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n        var REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\n        var REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\n        var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n        var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n        var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n        var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n        var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n        var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n        var REACT_CACHE_TYPE = Symbol.for(\"react.cache\");\n        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n        function getIteratorFn(maybeIterable) {\n            if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n                return null;\n            }\n            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n            if (typeof maybeIterator === \"function\") {\n                return maybeIterator;\n            }\n            return null;\n        }\n        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        function error(format) {\n            {\n                {\n                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                        args[_key2 - 1] = arguments[_key2];\n                    }\n                    printWarning(\"error\", format, args);\n                }\n            }\n        }\n        function printWarning(level, format, args) {\n            // When changing this logic, you might want to also\n            // update consoleWithStackDev.www.js as well.\n            {\n                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n                var stack = ReactDebugCurrentFrame.getStackAddendum();\n                if (stack !== \"\") {\n                    format += \"%s\";\n                    args = args.concat([\n                        stack\n                    ]);\n                } // eslint-disable-next-line react-internal/safe-string-coercion\n                var argsWithFormat = args.map(function(item) {\n                    return String(item);\n                }); // Careful: RN currently depends on this prefix\n                argsWithFormat.unshift(\"Warning: \" + format); // We intentionally don't use spread (or .apply) directly because it\n                // breaks IE9: https://github.com/facebook/react/issues/13610\n                // eslint-disable-next-line react-internal/no-production-logging\n                Function.prototype.apply.call(console[level], console, argsWithFormat);\n            }\n        }\n        // -----------------------------------------------------------------------------\n        var enableScopeAPI = false; // Experimental Create Event Handle API.\n        var enableCacheElement = false;\n        var enableTransitionTracing = false; // No known bugs, but needs performance testing\n        var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n        // stuff. Intended to enable React core members to more easily debug scheduling\n        // issues in DEV builds.\n        var enableDebugTracing = false;\n        var REACT_CLIENT_REFERENCE$2 = Symbol.for(\"react.client.reference\");\n        function isValidElementType(type) {\n            if (typeof type === \"string\" || typeof type === \"function\") {\n                return true;\n            } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {\n                return true;\n            }\n            if (typeof type === \"object\" && type !== null) {\n                if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n                // types supported by any Flight configuration anywhere since\n                // we don't know which Flight build this will end up being used\n                // with.\n                type.$$typeof === REACT_CLIENT_REFERENCE$2 || type.getModuleId !== undefined) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        function getWrappedName(outerType, innerType, wrapperName) {\n            var displayName = outerType.displayName;\n            if (displayName) {\n                return displayName;\n            }\n            var functionName = innerType.displayName || innerType.name || \"\";\n            return functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n        } // Keep in sync with react-reconciler/getComponentNameFromFiber\n        function getContextName(type) {\n            return type.displayName || \"Context\";\n        }\n        var REACT_CLIENT_REFERENCE$1 = Symbol.for(\"react.client.reference\"); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n        function getComponentNameFromType(type) {\n            if (type == null) {\n                // Host root, text node or just invalid type.\n                return null;\n            }\n            if (typeof type === \"function\") {\n                if (type.$$typeof === REACT_CLIENT_REFERENCE$1) {\n                    // TODO: Create a convention for naming client references with debug info.\n                    return null;\n                }\n                return type.displayName || type.name || null;\n            }\n            if (typeof type === \"string\") {\n                return type;\n            }\n            switch(type){\n                case REACT_FRAGMENT_TYPE:\n                    return \"Fragment\";\n                case REACT_PORTAL_TYPE:\n                    return \"Portal\";\n                case REACT_PROFILER_TYPE:\n                    return \"Profiler\";\n                case REACT_STRICT_MODE_TYPE:\n                    return \"StrictMode\";\n                case REACT_SUSPENSE_TYPE:\n                    return \"Suspense\";\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return \"SuspenseList\";\n                case REACT_CACHE_TYPE:\n                    {\n                        return \"Cache\";\n                    }\n            }\n            if (typeof type === \"object\") {\n                {\n                    if (typeof type.tag === \"number\") {\n                        error(\"Received an unexpected object in getComponentNameFromType(). \" + \"This is likely a bug in React. Please file an issue.\");\n                    }\n                }\n                switch(type.$$typeof){\n                    case REACT_CONTEXT_TYPE:\n                        var context = type;\n                        return getContextName(context) + \".Consumer\";\n                    case REACT_PROVIDER_TYPE:\n                        var provider = type;\n                        return getContextName(provider._context) + \".Provider\";\n                    case REACT_FORWARD_REF_TYPE:\n                        return getWrappedName(type, type.render, \"ForwardRef\");\n                    case REACT_MEMO_TYPE:\n                        var outerName = type.displayName || null;\n                        if (outerName !== null) {\n                            return outerName;\n                        }\n                        return getComponentNameFromType(type.type) || \"Memo\";\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                return getComponentNameFromType(init(payload));\n                            } catch (x) {\n                                return null;\n                            }\n                        }\n                }\n            }\n            return null;\n        }\n        var assign = Object.assign;\n        // Helpers to patch console.logs to avoid logging during side-effect free\n        // replaying on render function. This currently only patches the object\n        // lazily which won't cover if the log function was extracted eagerly.\n        // We could also eagerly patch the method.\n        var disabledDepth = 0;\n        var prevLog;\n        var prevInfo;\n        var prevWarn;\n        var prevError;\n        var prevGroup;\n        var prevGroupCollapsed;\n        var prevGroupEnd;\n        function disabledLog() {}\n        disabledLog.__reactDisabledLog = true;\n        function disableLogs() {\n            {\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;\n                    prevInfo = console.info;\n                    prevWarn = console.warn;\n                    prevError = console.error;\n                    prevGroup = console.group;\n                    prevGroupCollapsed = console.groupCollapsed;\n                    prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n                    var props = {\n                        configurable: true,\n                        enumerable: true,\n                        value: disabledLog,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        info: props,\n                        log: props,\n                        warn: props,\n                        error: props,\n                        group: props,\n                        groupCollapsed: props,\n                        groupEnd: props\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                disabledDepth++;\n            }\n        }\n        function reenableLogs() {\n            {\n                disabledDepth--;\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ var props = {\n                        configurable: true,\n                        enumerable: true,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        log: assign({}, props, {\n                            value: prevLog\n                        }),\n                        info: assign({}, props, {\n                            value: prevInfo\n                        }),\n                        warn: assign({}, props, {\n                            value: prevWarn\n                        }),\n                        error: assign({}, props, {\n                            value: prevError\n                        }),\n                        group: assign({}, props, {\n                            value: prevGroup\n                        }),\n                        groupCollapsed: assign({}, props, {\n                            value: prevGroupCollapsed\n                        }),\n                        groupEnd: assign({}, props, {\n                            value: prevGroupEnd\n                        })\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                if (disabledDepth < 0) {\n                    error(\"disabledDepth fell below zero. \" + \"This is a bug in React. Please file an issue.\");\n                }\n            }\n        }\n        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n        var prefix;\n        function describeBuiltInComponentFrame(name, source, ownerFn) {\n            {\n                if (prefix === undefined) {\n                    // Extract the VM specific prefix used by each line.\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        var match = x.stack.trim().match(/\\n( *(at )?)/);\n                        prefix = match && match[1] || \"\";\n                    }\n                } // We use the prefix to ensure our stacks line up with native stack frames.\n                return \"\\n\" + prefix + name;\n            }\n        }\n        var reentry = false;\n        var componentFrameCache;\n        {\n            var PossiblyWeakMap = typeof WeakMap === \"function\" ? WeakMap : Map;\n            componentFrameCache = new PossiblyWeakMap();\n        }\n        /**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */ function describeNativeComponentFrame(fn, construct) {\n            // If something asked for a stack inside a fake render, it should get ignored.\n            if (!fn || reentry) {\n                return \"\";\n            }\n            {\n                var frame = componentFrameCache.get(fn);\n                if (frame !== undefined) {\n                    return frame;\n                }\n            }\n            reentry = true;\n            var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n            Error.prepareStackTrace = undefined;\n            var previousDispatcher;\n            {\n                previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n                // for warnings.\n                ReactCurrentDispatcher.current = null;\n                disableLogs();\n            }\n            /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */ var RunInRootFrame = {\n                DetermineComponentFrameRoot: function() {\n                    var control;\n                    try {\n                        // This should throw.\n                        if (construct) {\n                            // Something should be setting the props in the constructor.\n                            var Fake = function() {\n                                throw Error();\n                            }; // $FlowFixMe[prop-missing]\n                            Object.defineProperty(Fake.prototype, \"props\", {\n                                set: function() {\n                                    // We use a throwing setter instead of frozen or non-writable props\n                                    // because that won't throw in a non-strict mode function.\n                                    throw Error();\n                                }\n                            });\n                            if (typeof Reflect === \"object\" && Reflect.construct) {\n                                // We construct a different control for this case to include any extra\n                                // frames added by the construct call.\n                                try {\n                                    Reflect.construct(Fake, []);\n                                } catch (x) {\n                                    control = x;\n                                }\n                                Reflect.construct(fn, [], Fake);\n                            } else {\n                                try {\n                                    Fake.call();\n                                } catch (x) {\n                                    control = x;\n                                } // $FlowFixMe[prop-missing] found when upgrading Flow\n                                fn.call(Fake.prototype);\n                            }\n                        } else {\n                            try {\n                                throw Error();\n                            } catch (x) {\n                                control = x;\n                            } // TODO(luna): This will currently only throw if the function component\n                            // tries to access React/ReactDOM/props. We should probably make this throw\n                            // in simple components too\n                            var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n                            // component, which we don't yet support. Attach a noop catch handler to\n                            // silence the error.\n                            // TODO: Implement component stacks for async client components?\n                            if (maybePromise && typeof maybePromise.catch === \"function\") {\n                                maybePromise.catch(function() {});\n                            }\n                        }\n                    } catch (sample) {\n                        // This is inlined manually because closure doesn't do it for us.\n                        if (sample && control && typeof sample.stack === \"string\") {\n                            return [\n                                sample.stack,\n                                control.stack\n                            ];\n                        }\n                    }\n                    return [\n                        null,\n                        null\n                    ];\n                }\n            }; // $FlowFixMe[prop-missing]\n            RunInRootFrame.DetermineComponentFrameRoot.displayName = \"DetermineComponentFrameRoot\";\n            var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, \"name\"); // Before ES6, the `name` property was not configurable.\n            if (namePropDescriptor && namePropDescriptor.configurable) {\n                // V8 utilizes a function's `name` property when generating a stack trace.\n                Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // is set to `false`.\n                // $FlowFixMe[cannot-write]\n                \"name\", {\n                    value: \"DetermineComponentFrameRoot\"\n                });\n            }\n            try {\n                var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];\n                if (sampleStack && controlStack) {\n                    // This extracts the first frame from the sample that isn't also in the control.\n                    // Skipping one frame that we assume is the frame that calls the two.\n                    var sampleLines = sampleStack.split(\"\\n\");\n                    var controlLines = controlStack.split(\"\\n\");\n                    var s = 0;\n                    var c = 0;\n                    while(s < sampleLines.length && !sampleLines[s].includes(\"DetermineComponentFrameRoot\")){\n                        s++;\n                    }\n                    while(c < controlLines.length && !controlLines[c].includes(\"DetermineComponentFrameRoot\")){\n                        c++;\n                    } // We couldn't find our intentionally injected common root frame, attempt\n                    // to find another common root frame by search from the bottom of the\n                    // control stack...\n                    if (s === sampleLines.length || c === controlLines.length) {\n                        s = sampleLines.length - 1;\n                        c = controlLines.length - 1;\n                        while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]){\n                            // We expect at least one stack frame to be shared.\n                            // Typically this will be the root most one. However, stack frames may be\n                            // cut off due to maximum stack limits. In this case, one maybe cut off\n                            // earlier than the other. We assume that the sample is longer or the same\n                            // and there for cut off earlier. So we should find the root most frame in\n                            // the sample somewhere in the control.\n                            c--;\n                        }\n                    }\n                    for(; s >= 1 && c >= 0; s--, c--){\n                        // Next we find the first one that isn't the same which should be the\n                        // frame that called our sample function and the control.\n                        if (sampleLines[s] !== controlLines[c]) {\n                            // In V8, the first line is describing the message but other VMs don't.\n                            // If we're about to return the first line, and the control is also on the same\n                            // line, that's a pretty good indicator that our sample threw at same line as\n                            // the control. I.e. before we entered the sample frame. So we ignore this result.\n                            // This can happen if you passed a class to function component, or non-function.\n                            if (s !== 1 || c !== 1) {\n                                do {\n                                    s--;\n                                    c--; // We may still have similar intermediate frames from the construct call.\n                                    // The next one that isn't the same should be our match though.\n                                    if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                                        // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                                        var _frame = \"\\n\" + sampleLines[s].replace(\" at new \", \" at \"); // If our component frame is labeled \"<anonymous>\"\n                                        // but we have a user-provided \"displayName\"\n                                        // splice it in to make the stack more readable.\n                                        if (fn.displayName && _frame.includes(\"<anonymous>\")) {\n                                            _frame = _frame.replace(\"<anonymous>\", fn.displayName);\n                                        }\n                                        if (true) {\n                                            if (typeof fn === \"function\") {\n                                                componentFrameCache.set(fn, _frame);\n                                            }\n                                        } // Return the line we found.\n                                        return _frame;\n                                    }\n                                }while (s >= 1 && c >= 0);\n                            }\n                            break;\n                        }\n                    }\n                }\n            } finally{\n                reentry = false;\n                {\n                    ReactCurrentDispatcher.current = previousDispatcher;\n                    reenableLogs();\n                }\n                Error.prepareStackTrace = previousPrepareStackTrace;\n            } // Fallback to just using the name if we couldn't make it throw.\n            var name = fn ? fn.displayName || fn.name : \"\";\n            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : \"\";\n            {\n                if (typeof fn === \"function\") {\n                    componentFrameCache.set(fn, syntheticFrame);\n                }\n            }\n            return syntheticFrame;\n        }\n        function describeFunctionComponentFrame(fn, source, ownerFn) {\n            {\n                return describeNativeComponentFrame(fn, false);\n            }\n        }\n        function shouldConstruct(Component) {\n            var prototype = Component.prototype;\n            return !!(prototype && prototype.isReactComponent);\n        }\n        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n            if (type == null) {\n                return \"\";\n            }\n            if (typeof type === \"function\") {\n                {\n                    return describeNativeComponentFrame(type, shouldConstruct(type));\n                }\n            }\n            if (typeof type === \"string\") {\n                return describeBuiltInComponentFrame(type);\n            }\n            switch(type){\n                case REACT_SUSPENSE_TYPE:\n                    return describeBuiltInComponentFrame(\"Suspense\");\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return describeBuiltInComponentFrame(\"SuspenseList\");\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_FORWARD_REF_TYPE:\n                        return describeFunctionComponentFrame(type.render);\n                    case REACT_MEMO_TYPE:\n                        // Memo may contain any component type so we recursively resolve it.\n                        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                // Lazy may contain any component type so we recursively resolve it.\n                                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n                            } catch (x) {}\n                        }\n                }\n            }\n            return \"\";\n        }\n        // $FlowFixMe[method-unbinding]\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        var loggedTypeFailures = {};\n        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n        function setCurrentlyValidatingElement$1(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n                }\n            }\n        }\n        function checkPropTypes(typeSpecs, values, location, componentName, element) {\n            {\n                // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n                var has = Function.call.bind(hasOwnProperty);\n                for(var typeSpecName in typeSpecs){\n                    if (has(typeSpecs, typeSpecName)) {\n                        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n                        // fail the render phase where it didn't fail before. So we log it.\n                        // After these have been cleaned up, we'll let them throw.\n                        try {\n                            // This is intentionally an invariant that gets caught. It's the same\n                            // behavior as without this statement except with a better message.\n                            if (typeof typeSpecs[typeSpecName] !== \"function\") {\n                                // eslint-disable-next-line react-internal/prod-error-codes\n                                var err = Error((componentName || \"React class\") + \": \" + location + \" type `\" + typeSpecName + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + typeof typeSpecs[typeSpecName] + \"`.\" + \"This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                                err.name = \"Invariant Violation\";\n                                throw err;\n                            }\n                            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                        } catch (ex) {\n                            error$1 = ex;\n                        }\n                        if (error$1 && !(error$1 instanceof Error)) {\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"%s: type specification of %s\" + \" `%s` is invalid; the type checker \" + \"function must return `null` or an `Error` but returned a %s. \" + \"You may have forgotten to pass an argument to the type checker \" + \"creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and \" + \"shape all require an argument).\", componentName || \"React class\", location, typeSpecName, typeof error$1);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n                            // Only monitor this failure once because there tends to be a lot of the\n                            // same error.\n                            loggedTypeFailures[error$1.message] = true;\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"Failed %s type: %s\", location, error$1.message);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                    }\n                }\n            }\n        }\n        var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n        function isArray(a) {\n            return isArrayImpl(a);\n        }\n        /*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */ // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function typeName(value) {\n            {\n                // toStringTag is needed for namespaced types like Temporal.Instant\n                var hasToStringTag = typeof Symbol === \"function\" && Symbol.toStringTag;\n                var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\"; // $FlowFixMe[incompatible-return]\n                return type;\n            }\n        } // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function willCoercionThrow(value) {\n            {\n                try {\n                    testStringCoercion(value);\n                    return false;\n                } catch (e) {\n                    return true;\n                }\n            }\n        }\n        function testStringCoercion(value) {\n            // If you ended up here by following an exception call stack, here's what's\n            // happened: you supplied an object or symbol value to React (as a prop, key,\n            // DOM attribute, CSS property, string ref, etc.) and when React tried to\n            // coerce it to a string using `'' + value`, an exception was thrown.\n            //\n            // The most common types that will cause this exception are `Symbol` instances\n            // and Temporal objects like `Temporal.Instant`. But any object that has a\n            // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n            // exception. (Library authors do this to prevent users from using built-in\n            // numeric operators like `+` or comparison operators like `>=` because custom\n            // methods are needed to perform accurate arithmetic or comparison.)\n            //\n            // To fix the problem, coerce this object or symbol value to a string before\n            // passing it to React. The most reliable way is usually `String(value)`.\n            //\n            // To find which value is throwing, check the browser or debugger console.\n            // Before this exception was thrown, there should be `console.error` output\n            // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n            // problem and how that type was used: key, atrribute, input value prop, etc.\n            // In most cases, this console output also shows the component and its\n            // ancestor components where the exception happened.\n            //\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            return \"\" + value;\n        }\n        function checkKeyStringCoercion(value) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided key is an unsupported type %s.\" + \" This value must be coerced to a string before using it here.\", typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\n        var RESERVED_PROPS = {\n            key: true,\n            ref: true,\n            __self: true,\n            __source: true\n        };\n        var specialPropKeyWarningShown;\n        var specialPropRefWarningShown;\n        var didWarnAboutStringRefs;\n        {\n            didWarnAboutStringRefs = {};\n        }\n        function hasValidRef(config) {\n            {\n                if (hasOwnProperty.call(config, \"ref\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"ref\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.ref !== undefined;\n        }\n        function hasValidKey(config) {\n            {\n                if (hasOwnProperty.call(config, \"key\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.key !== undefined;\n        }\n        function warnIfStringRefCannotBeAutoConverted(config, self) {\n            {\n                if (typeof config.ref === \"string\" && ReactCurrentOwner$1.current && self && ReactCurrentOwner$1.current.stateNode !== self) {\n                    var componentName = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n                    if (!didWarnAboutStringRefs[componentName]) {\n                        error('Component \"%s\" contains the string ref \"%s\". ' + \"Support for string refs will be removed in a future major release. \" + \"This case cannot be automatically converted to an arrow function. \" + \"We ask you to manually fix this case by using useRef() or createRef() instead. \" + \"Learn more about using refs safely here: \" + \"https://reactjs.org/link/strict-mode-string-ref\", getComponentNameFromType(ReactCurrentOwner$1.current.type), config.ref);\n                        didWarnAboutStringRefs[componentName] = true;\n                    }\n                }\n            }\n        }\n        function defineKeyPropWarningGetter(props, displayName) {\n            {\n                var warnAboutAccessingKey = function() {\n                    if (!specialPropKeyWarningShown) {\n                        specialPropKeyWarningShown = true;\n                        error(\"%s: `key` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                };\n                warnAboutAccessingKey.isReactWarning = true;\n                Object.defineProperty(props, \"key\", {\n                    get: warnAboutAccessingKey,\n                    configurable: true\n                });\n            }\n        }\n        function defineRefPropWarningGetter(props, displayName) {\n            {\n                var warnAboutAccessingRef = function() {\n                    if (!specialPropRefWarningShown) {\n                        specialPropRefWarningShown = true;\n                        error(\"%s: `ref` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                };\n                warnAboutAccessingRef.isReactWarning = true;\n                Object.defineProperty(props, \"ref\", {\n                    get: warnAboutAccessingRef,\n                    configurable: true\n                });\n            }\n        }\n        /**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */ function ReactElement(type, key, ref, self, source, owner, props) {\n            var element = {\n                // This tag allows us to uniquely identify this as a React Element\n                $$typeof: REACT_ELEMENT_TYPE,\n                // Built-in properties that belong on the element\n                type: type,\n                key: key,\n                ref: ref,\n                props: props,\n                // Record the component responsible for creating this element.\n                _owner: owner\n            };\n            {\n                // The validation flag is currently mutative. We put it on\n                // an external backing store so that we can freeze the whole object.\n                // This can be replaced with a WeakMap once they are implemented in\n                // commonly used development environments.\n                element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n                // the validation flag non-enumerable (where possible, which should\n                // include every environment we run tests in), so the test framework\n                // ignores it.\n                Object.defineProperty(element._store, \"validated\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: true,\n                    value: false\n                }); // self and source are DEV only properties.\n                Object.defineProperty(element, \"_self\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: self\n                }); // Two elements created in two different places should be considered\n                // equal for testing purposes and therefore we hide it from enumeration.\n                Object.defineProperty(element, \"_source\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: source\n                });\n                if (Object.freeze) {\n                    Object.freeze(element.props);\n                    Object.freeze(element);\n                }\n            }\n            return element;\n        }\n        /**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */ function jsxDEV$1(type, config, maybeKey, source, self) {\n            {\n                var propName; // Reserved names are extracted\n                var props = {};\n                var key = null;\n                var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n                // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n                // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n                // but as an intermediary step, we will use jsxDEV for everything except\n                // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n                // key is explicitly declared to be undefined or not.\n                if (maybeKey !== undefined) {\n                    {\n                        checkKeyStringCoercion(maybeKey);\n                    }\n                    key = \"\" + maybeKey;\n                }\n                if (hasValidKey(config)) {\n                    {\n                        checkKeyStringCoercion(config.key);\n                    }\n                    key = \"\" + config.key;\n                }\n                if (hasValidRef(config)) {\n                    ref = config.ref;\n                    warnIfStringRefCannotBeAutoConverted(config, self);\n                } // Remaining properties are added to a new props object\n                for(propName in config){\n                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n                        props[propName] = config[propName];\n                    }\n                } // Resolve default props\n                if (type && type.defaultProps) {\n                    var defaultProps = type.defaultProps;\n                    for(propName in defaultProps){\n                        if (props[propName] === undefined) {\n                            props[propName] = defaultProps[propName];\n                        }\n                    }\n                }\n                if (key || ref) {\n                    var displayName = typeof type === \"function\" ? type.displayName || type.name || \"Unknown\" : type;\n                    if (key) {\n                        defineKeyPropWarningGetter(props, displayName);\n                    }\n                    if (ref) {\n                        defineRefPropWarningGetter(props, displayName);\n                    }\n                }\n                return ReactElement(type, key, ref, self, source, ReactCurrentOwner$1.current, props);\n            }\n        }\n        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        var REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\");\n        function setCurrentlyValidatingElement(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame.setExtraStackFrame(null);\n                }\n            }\n        }\n        var propTypesMisspellWarningShown;\n        {\n            propTypesMisspellWarningShown = false;\n        }\n        /**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */ function isValidElement(object) {\n            {\n                return typeof object === \"object\" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n            }\n        }\n        function getDeclarationErrorAddendum() {\n            {\n                if (ReactCurrentOwner.current) {\n                    var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n                    if (name) {\n                        return \"\\n\\nCheck the render method of `\" + name + \"`.\";\n                    }\n                }\n                return \"\";\n            }\n        }\n        function getSourceInfoErrorAddendum(source) {\n            {\n                if (source !== undefined) {\n                    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, \"\");\n                    var lineNumber = source.lineNumber;\n                    return \"\\n\\nCheck your code at \" + fileName + \":\" + lineNumber + \".\";\n                }\n                return \"\";\n            }\n        }\n        /**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */ var ownerHasKeyUseWarning = {};\n        function getCurrentComponentErrorInfo(parentType) {\n            {\n                var info = getDeclarationErrorAddendum();\n                if (!info) {\n                    var parentName = getComponentNameFromType(parentType);\n                    if (parentName) {\n                        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n                    }\n                }\n                return info;\n            }\n        }\n        /**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */ function validateExplicitKey(element, parentType) {\n            {\n                if (!element._store || element._store.validated || element.key != null) {\n                    return;\n                }\n                element._store.validated = true;\n                var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n                if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n                    return;\n                }\n                ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n                // property, it may be the creator of the child that's responsible for\n                // assigning it a key.\n                var childOwner = \"\";\n                if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n                    // Give the component that originally created this child.\n                    childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n                }\n                setCurrentlyValidatingElement(element);\n                error('Each child in a list should have a unique \"key\" prop.' + \"%s%s See https://reactjs.org/link/warning-keys for more information.\", currentComponentErrorInfo, childOwner);\n                setCurrentlyValidatingElement(null);\n            }\n        }\n        /**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */ function validateChildKeys(node, parentType) {\n            {\n                if (typeof node !== \"object\" || !node) {\n                    return;\n                }\n                if (node.$$typeof === REACT_CLIENT_REFERENCE) ;\n                else if (isArray(node)) {\n                    for(var i = 0; i < node.length; i++){\n                        var child = node[i];\n                        if (isValidElement(child)) {\n                            validateExplicitKey(child, parentType);\n                        }\n                    }\n                } else if (isValidElement(node)) {\n                    // This element was passed in a valid location.\n                    if (node._store) {\n                        node._store.validated = true;\n                    }\n                } else {\n                    var iteratorFn = getIteratorFn(node);\n                    if (typeof iteratorFn === \"function\") {\n                        // Entry iterators used to provide implicit keys,\n                        // but now we print a separate warning for them later.\n                        if (iteratorFn !== node.entries) {\n                            var iterator = iteratorFn.call(node);\n                            var step;\n                            while(!(step = iterator.next()).done){\n                                if (isValidElement(step.value)) {\n                                    validateExplicitKey(step.value, parentType);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        /**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */ function validatePropTypes(element) {\n            {\n                var type = element.type;\n                if (type === null || type === undefined || typeof type === \"string\") {\n                    return;\n                }\n                if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n                    return;\n                }\n                var propTypes;\n                if (typeof type === \"function\") {\n                    propTypes = type.propTypes;\n                } else if (typeof type === \"object\" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n                // Inner props are checked in the reconciler.\n                type.$$typeof === REACT_MEMO_TYPE)) {\n                    propTypes = type.propTypes;\n                } else {\n                    return;\n                }\n                if (propTypes) {\n                    // Intentionally inside to avoid triggering lazy initializers:\n                    var name = getComponentNameFromType(type);\n                    checkPropTypes(propTypes, element.props, \"prop\", name, element);\n                } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n                    propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n                    var _name = getComponentNameFromType(type);\n                    error(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", _name || \"Unknown\");\n                }\n                if (typeof type.getDefaultProps === \"function\" && !type.getDefaultProps.isReactClassApproved) {\n                    error(\"getDefaultProps is only used on classic React.createClass \" + \"definitions. Use a static property named `defaultProps` instead.\");\n                }\n            }\n        }\n        /**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */ function validateFragmentProps(fragment) {\n            {\n                var keys = Object.keys(fragment.props);\n                for(var i = 0; i < keys.length; i++){\n                    var key = keys[i];\n                    if (key !== \"children\" && key !== \"key\") {\n                        setCurrentlyValidatingElement(fragment);\n                        error(\"Invalid prop `%s` supplied to `React.Fragment`. \" + \"React.Fragment can only have `key` and `children` props.\", key);\n                        setCurrentlyValidatingElement(null);\n                        break;\n                    }\n                }\n                if (fragment.ref !== null) {\n                    setCurrentlyValidatingElement(fragment);\n                    error(\"Invalid attribute `ref` supplied to `React.Fragment`.\");\n                    setCurrentlyValidatingElement(null);\n                }\n            }\n        }\n        var didWarnAboutKeySpread = {};\n        function jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n            {\n                var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n                // succeed and there will likely be errors in render.\n                if (!validType) {\n                    var info = \"\";\n                    if (type === undefined || typeof type === \"object\" && type !== null && Object.keys(type).length === 0) {\n                        info += \" You likely forgot to export your component from the file \" + \"it's defined in, or you might have mixed up default and named imports.\";\n                    }\n                    var sourceInfo = getSourceInfoErrorAddendum(source);\n                    if (sourceInfo) {\n                        info += sourceInfo;\n                    } else {\n                        info += getDeclarationErrorAddendum();\n                    }\n                    var typeString;\n                    if (type === null) {\n                        typeString = \"null\";\n                    } else if (isArray(type)) {\n                        typeString = \"array\";\n                    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n                        typeString = \"<\" + (getComponentNameFromType(type.type) || \"Unknown\") + \" />\";\n                        info = \" Did you accidentally export a JSX literal instead of a component?\";\n                    } else {\n                        typeString = typeof type;\n                    }\n                    error(\"React.jsx: type is invalid -- expected a string (for \" + \"built-in components) or a class/function (for composite \" + \"components) but got: %s.%s\", typeString, info);\n                }\n                var element = jsxDEV$1(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n                // TODO: Drop this when these are no longer allowed as the type argument.\n                if (element == null) {\n                    return element;\n                } // Skip key warning if the type isn't valid since our key validation logic\n                // doesn't expect a non-string/function type and can throw confusing errors.\n                // We don't want exception behavior to differ between dev and prod.\n                // (Rendering will throw with a helpful message and as soon as the type is\n                // fixed, the key warnings will appear.)\n                if (validType) {\n                    var children = props.children;\n                    if (children !== undefined) {\n                        if (isStaticChildren) {\n                            if (isArray(children)) {\n                                for(var i = 0; i < children.length; i++){\n                                    validateChildKeys(children[i], type);\n                                }\n                                if (Object.freeze) {\n                                    Object.freeze(children);\n                                }\n                            } else {\n                                error(\"React.jsx: Static children should always be an array. \" + \"You are likely explicitly calling React.jsxs or React.jsxDEV. \" + \"Use the Babel transform instead.\");\n                            }\n                        } else {\n                            validateChildKeys(children, type);\n                        }\n                    }\n                }\n                if (hasOwnProperty.call(props, \"key\")) {\n                    var componentName = getComponentNameFromType(type);\n                    var keys = Object.keys(props).filter(function(k) {\n                        return k !== \"key\";\n                    });\n                    var beforeExample = keys.length > 0 ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\" : \"{key: someKey}\";\n                    if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n                        var afterExample = keys.length > 0 ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\";\n                        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + \"  let props = %s;\\n\" + \"  <%s {...props} />\\n\" + \"React keys must be passed directly to JSX without using spread:\\n\" + \"  let props = %s;\\n\" + \"  <%s key={someKey} {...props} />\", beforeExample, componentName, afterExample, componentName);\n                        didWarnAboutKeySpread[componentName + beforeExample] = true;\n                    }\n                }\n                if (type === REACT_FRAGMENT_TYPE) {\n                    validateFragmentProps(element);\n                } else {\n                    validatePropTypes(element);\n                }\n                return element;\n            }\n        } // These two functions exist to still get child warnings in dev\n        var jsxDEV = jsxWithValidation;\n        exports.Fragment = REACT_FRAGMENT_TYPE;\n        exports.jsxDEV = jsxDEV;\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsS0FBeUIsRUFBYyxFQUUxQyxNQUFNO0lBQ0xDLDhMQUF5QjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcz9jYTIwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/seedrandom/index.js":
/*!******************************************!*\
  !*** ./node_modules/seedrandom/index.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("// A library of seedable RNGs implemented in Javascript.\n//\n// Usage:\n//\n// var seedrandom = require('seedrandom');\n// var random = seedrandom(1); // or any seed.\n// var x = random();       // 0 <= x < 1.  Every bit is random.\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\n// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.\n// Period: ~2^116\n// Reported to pass all BigCrush tests.\n\nvar alea = __webpack_require__(/*! ./lib/alea */ \"(app-pages-browser)/./node_modules/seedrandom/lib/alea.js\");\n// xor128, a pure xor-shift generator by George Marsaglia.\n// Period: 2^128-1.\n// Reported to fail: MatrixRank and LinearComp.\nvar xor128 = __webpack_require__(/*! ./lib/xor128 */ \"(app-pages-browser)/./node_modules/seedrandom/lib/xor128.js\");\n// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.\n// Period: 2^192-2^32\n// Reported to fail: CollisionOver, SimpPoker, and LinearComp.\nvar xorwow = __webpack_require__(/*! ./lib/xorwow */ \"(app-pages-browser)/./node_modules/seedrandom/lib/xorwow.js\");\n// xorshift7, by François Panneton and Pierre L'ecuyer, takes\n// a different approach: it adds robustness by allowing more shifts\n// than Marsaglia's original three.  It is a 7-shift generator\n// with 256 bits, that passes BigCrush with no systmatic failures.\n// Period 2^256-1.\n// No systematic BigCrush failures reported.\nvar xorshift7 = __webpack_require__(/*! ./lib/xorshift7 */ \"(app-pages-browser)/./node_modules/seedrandom/lib/xorshift7.js\");\n// xor4096, by Richard Brent, is a 4096-bit xor-shift with a\n// very long period that also adds a Weyl generator. It also passes\n// BigCrush with no systematic failures.  Its long period may\n// be useful if you have many generators and need to avoid\n// collisions.\n// Period: 2^4128-2^32.\n// No systematic BigCrush failures reported.\nvar xor4096 = __webpack_require__(/*! ./lib/xor4096 */ \"(app-pages-browser)/./node_modules/seedrandom/lib/xor4096.js\");\n// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random\n// number generator derived from ChaCha, a modern stream cipher.\n// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n// Period: ~2^127\n// No systematic BigCrush failures reported.\nvar tychei = __webpack_require__(/*! ./lib/tychei */ \"(app-pages-browser)/./node_modules/seedrandom/lib/tychei.js\");\n// The original ARC4-based prng included in this library.\n// Period: ~2^1600\nvar sr = __webpack_require__(/*! ./seedrandom */ \"(app-pages-browser)/./node_modules/seedrandom/seedrandom.js\");\nsr.alea = alea;\nsr.xor128 = xor128;\nsr.xorwow = xorwow;\nsr.xorshift7 = xorshift7;\nsr.xor4096 = xor4096;\nsr.tychei = tychei;\nmodule.exports = sr;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHdEQUF3RDtBQUN4RCxFQUFFO0FBQ0YsU0FBUztBQUNULEVBQUU7QUFDRiwwQ0FBMEM7QUFDMUMsOENBQThDO0FBQzlDLCtEQUErRDtBQUMvRCxpRUFBaUU7QUFFakUsbUVBQW1FO0FBQ25FLGlCQUFpQjtBQUNqQix1Q0FBdUM7O0FBQ3ZDLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDO0FBRW5CLDBEQUEwRDtBQUMxRCxtQkFBbUI7QUFDbkIsK0NBQStDO0FBQy9DLElBQUlDLFNBQVNELG1CQUFPQSxDQUFDO0FBRXJCLG1FQUFtRTtBQUNuRSxxQkFBcUI7QUFDckIsOERBQThEO0FBQzlELElBQUlFLFNBQVNGLG1CQUFPQSxDQUFDO0FBRXJCLDZEQUE2RDtBQUM3RCxtRUFBbUU7QUFDbkUsOERBQThEO0FBQzlELGtFQUFrRTtBQUNsRSxrQkFBa0I7QUFDbEIsNENBQTRDO0FBQzVDLElBQUlHLFlBQVlILG1CQUFPQSxDQUFDO0FBRXhCLDREQUE0RDtBQUM1RCxtRUFBbUU7QUFDbkUsNkRBQTZEO0FBQzdELDBEQUEwRDtBQUMxRCxjQUFjO0FBQ2QsdUJBQXVCO0FBQ3ZCLDRDQUE0QztBQUM1QyxJQUFJSSxVQUFVSixtQkFBT0EsQ0FBQztBQUV0Qix1RUFBdUU7QUFDdkUsZ0VBQWdFO0FBQ2hFLHFEQUFxRDtBQUNyRCxpQkFBaUI7QUFDakIsNENBQTRDO0FBQzVDLElBQUlLLFNBQVNMLG1CQUFPQSxDQUFDO0FBRXJCLHlEQUF5RDtBQUN6RCxrQkFBa0I7QUFDbEIsSUFBSU0sS0FBS04sbUJBQU9BLENBQUM7QUFFakJNLEdBQUdQLElBQUksR0FBR0E7QUFDVk8sR0FBR0wsTUFBTSxHQUFHQTtBQUNaSyxHQUFHSixNQUFNLEdBQUdBO0FBQ1pJLEdBQUdILFNBQVMsR0FBR0E7QUFDZkcsR0FBR0YsT0FBTyxHQUFHQTtBQUNiRSxHQUFHRCxNQUFNLEdBQUdBO0FBRVpFLE9BQU9DLE9BQU8sR0FBR0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3NlZWRyYW5kb20vaW5kZXguanM/NGU4MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBIGxpYnJhcnkgb2Ygc2VlZGFibGUgUk5HcyBpbXBsZW1lbnRlZCBpbiBKYXZhc2NyaXB0LlxuLy9cbi8vIFVzYWdlOlxuLy9cbi8vIHZhciBzZWVkcmFuZG9tID0gcmVxdWlyZSgnc2VlZHJhbmRvbScpO1xuLy8gdmFyIHJhbmRvbSA9IHNlZWRyYW5kb20oMSk7IC8vIG9yIGFueSBzZWVkLlxuLy8gdmFyIHggPSByYW5kb20oKTsgICAgICAgLy8gMCA8PSB4IDwgMS4gIEV2ZXJ5IGJpdCBpcyByYW5kb20uXG4vLyB2YXIgeCA9IHJhbmRvbS5xdWljaygpOyAvLyAwIDw9IHggPCAxLiAgMzIgYml0cyBvZiByYW5kb21uZXNzLlxuXG4vLyBhbGVhLCBhIDUzLWJpdCBtdWx0aXBseS13aXRoLWNhcnJ5IGdlbmVyYXRvciBieSBKb2hhbm5lcyBCYWFnw7hlLlxuLy8gUGVyaW9kOiB+Ml4xMTZcbi8vIFJlcG9ydGVkIHRvIHBhc3MgYWxsIEJpZ0NydXNoIHRlc3RzLlxudmFyIGFsZWEgPSByZXF1aXJlKCcuL2xpYi9hbGVhJyk7XG5cbi8vIHhvcjEyOCwgYSBwdXJlIHhvci1zaGlmdCBnZW5lcmF0b3IgYnkgR2VvcmdlIE1hcnNhZ2xpYS5cbi8vIFBlcmlvZDogMl4xMjgtMS5cbi8vIFJlcG9ydGVkIHRvIGZhaWw6IE1hdHJpeFJhbmsgYW5kIExpbmVhckNvbXAuXG52YXIgeG9yMTI4ID0gcmVxdWlyZSgnLi9saWIveG9yMTI4Jyk7XG5cbi8vIHhvcndvdywgR2VvcmdlIE1hcnNhZ2xpYSdzIDE2MC1iaXQgeG9yLXNoaWZ0IGNvbWJpbmVkIHBsdXMgd2V5bC5cbi8vIFBlcmlvZDogMl4xOTItMl4zMlxuLy8gUmVwb3J0ZWQgdG8gZmFpbDogQ29sbGlzaW9uT3ZlciwgU2ltcFBva2VyLCBhbmQgTGluZWFyQ29tcC5cbnZhciB4b3J3b3cgPSByZXF1aXJlKCcuL2xpYi94b3J3b3cnKTtcblxuLy8geG9yc2hpZnQ3LCBieSBGcmFuw6dvaXMgUGFubmV0b24gYW5kIFBpZXJyZSBMJ2VjdXllciwgdGFrZXNcbi8vIGEgZGlmZmVyZW50IGFwcHJvYWNoOiBpdCBhZGRzIHJvYnVzdG5lc3MgYnkgYWxsb3dpbmcgbW9yZSBzaGlmdHNcbi8vIHRoYW4gTWFyc2FnbGlhJ3Mgb3JpZ2luYWwgdGhyZWUuICBJdCBpcyBhIDctc2hpZnQgZ2VuZXJhdG9yXG4vLyB3aXRoIDI1NiBiaXRzLCB0aGF0IHBhc3NlcyBCaWdDcnVzaCB3aXRoIG5vIHN5c3RtYXRpYyBmYWlsdXJlcy5cbi8vIFBlcmlvZCAyXjI1Ni0xLlxuLy8gTm8gc3lzdGVtYXRpYyBCaWdDcnVzaCBmYWlsdXJlcyByZXBvcnRlZC5cbnZhciB4b3JzaGlmdDcgPSByZXF1aXJlKCcuL2xpYi94b3JzaGlmdDcnKTtcblxuLy8geG9yNDA5NiwgYnkgUmljaGFyZCBCcmVudCwgaXMgYSA0MDk2LWJpdCB4b3Itc2hpZnQgd2l0aCBhXG4vLyB2ZXJ5IGxvbmcgcGVyaW9kIHRoYXQgYWxzbyBhZGRzIGEgV2V5bCBnZW5lcmF0b3IuIEl0IGFsc28gcGFzc2VzXG4vLyBCaWdDcnVzaCB3aXRoIG5vIHN5c3RlbWF0aWMgZmFpbHVyZXMuICBJdHMgbG9uZyBwZXJpb2QgbWF5XG4vLyBiZSB1c2VmdWwgaWYgeW91IGhhdmUgbWFueSBnZW5lcmF0b3JzIGFuZCBuZWVkIHRvIGF2b2lkXG4vLyBjb2xsaXNpb25zLlxuLy8gUGVyaW9kOiAyXjQxMjgtMl4zMi5cbi8vIE5vIHN5c3RlbWF0aWMgQmlnQ3J1c2ggZmFpbHVyZXMgcmVwb3J0ZWQuXG52YXIgeG9yNDA5NiA9IHJlcXVpcmUoJy4vbGliL3hvcjQwOTYnKTtcblxuLy8gVHljaGUtaSwgYnkgU2FtdWVsIE5ldmVzIGFuZCBGaWxpcGUgQXJhdWpvLCBpcyBhIGJpdC1zaGlmdGluZyByYW5kb21cbi8vIG51bWJlciBnZW5lcmF0b3IgZGVyaXZlZCBmcm9tIENoYUNoYSwgYSBtb2Rlcm4gc3RyZWFtIGNpcGhlci5cbi8vIGh0dHBzOi8vZWRlbi5kZWkudWMucHQvfnNuZXZlcy9wdWJzLzIwMTEtc25mYTIucGRmXG4vLyBQZXJpb2Q6IH4yXjEyN1xuLy8gTm8gc3lzdGVtYXRpYyBCaWdDcnVzaCBmYWlsdXJlcyByZXBvcnRlZC5cbnZhciB0eWNoZWkgPSByZXF1aXJlKCcuL2xpYi90eWNoZWknKTtcblxuLy8gVGhlIG9yaWdpbmFsIEFSQzQtYmFzZWQgcHJuZyBpbmNsdWRlZCBpbiB0aGlzIGxpYnJhcnkuXG4vLyBQZXJpb2Q6IH4yXjE2MDBcbnZhciBzciA9IHJlcXVpcmUoJy4vc2VlZHJhbmRvbScpO1xuXG5zci5hbGVhID0gYWxlYTtcbnNyLnhvcjEyOCA9IHhvcjEyODtcbnNyLnhvcndvdyA9IHhvcndvdztcbnNyLnhvcnNoaWZ0NyA9IHhvcnNoaWZ0NztcbnNyLnhvcjQwOTYgPSB4b3I0MDk2O1xuc3IudHljaGVpID0gdHljaGVpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNyO1xuIl0sIm5hbWVzIjpbImFsZWEiLCJyZXF1aXJlIiwieG9yMTI4IiwieG9yd293IiwieG9yc2hpZnQ3IiwieG9yNDA5NiIsInR5Y2hlaSIsInNyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/seedrandom/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/seedrandom/lib/alea.js":
/*!*********************************************!*\
  !*** ./node_modules/seedrandom/lib/alea.js ***!
  \*********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_RESULT__;// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010\n// http://baagoe.com/en/RandomMusings/javascript/\n// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror\n// Original work is under MIT license -\n// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n(function(global, module1, define1) {\n    function Alea(seed) {\n        var me = this, mash = Mash();\n        me.next = function() {\n            var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32\n            me.s0 = me.s1;\n            me.s1 = me.s2;\n            return me.s2 = t - (me.c = t | 0);\n        };\n        // Apply the seeding algorithm from Baagoe.\n        me.c = 1;\n        me.s0 = mash(\" \");\n        me.s1 = mash(\" \");\n        me.s2 = mash(\" \");\n        me.s0 -= mash(seed);\n        if (me.s0 < 0) {\n            me.s0 += 1;\n        }\n        me.s1 -= mash(seed);\n        if (me.s1 < 0) {\n            me.s1 += 1;\n        }\n        me.s2 -= mash(seed);\n        if (me.s2 < 0) {\n            me.s2 += 1;\n        }\n        mash = null;\n    }\n    function copy(f, t) {\n        t.c = f.c;\n        t.s0 = f.s0;\n        t.s1 = f.s1;\n        t.s2 = f.s2;\n        return t;\n    }\n    function impl(seed, opts) {\n        var xg = new Alea(seed), state = opts && opts.state, prng = xg.next;\n        prng.int32 = function() {\n            return xg.next() * 0x100000000 | 0;\n        };\n        prng.double = function() {\n            return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n        };\n        prng.quick = prng;\n        if (state) {\n            if (typeof state == \"object\") copy(state, xg);\n            prng.state = function() {\n                return copy(xg, {});\n            };\n        }\n        return prng;\n    }\n    function Mash() {\n        var n = 0xefc8249d;\n        var mash = function(data) {\n            data = String(data);\n            for(var i = 0; i < data.length; i++){\n                n += data.charCodeAt(i);\n                var h = 0.02519603282416938 * n;\n                n = h >>> 0;\n                h -= n;\n                h *= n;\n                n = h >>> 0;\n                h -= n;\n                n += h * 0x100000000; // 2^32\n            }\n            return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n        };\n        return mash;\n    }\n    if (module1 && module1.exports) {\n        module1.exports = impl;\n    } else if (__webpack_require__.amdD && __webpack_require__.amdO) {\n        !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n            return impl;\n        }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {\n        this.alea = impl;\n    }\n})(this,  true && module, __webpack_require__.amdD // present with an AMD loader\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/seedrandom/lib/alea.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/seedrandom/lib/tychei.js":
/*!***********************************************!*\
  !*** ./node_modules/seedrandom/lib/tychei.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of the \"Tyche-i\" prng algorithm by\n// Samuel Neves and Filipe Araujo.\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n(function(global, module1, define1) {\n    function XorGen(seed) {\n        var me = this, strseed = \"\";\n        // Set up generator function.\n        me.next = function() {\n            var b = me.b, c = me.c, d = me.d, a = me.a;\n            b = b << 25 ^ b >>> 7 ^ c;\n            c = c - d | 0;\n            d = d << 24 ^ d >>> 8 ^ a;\n            a = a - b | 0;\n            me.b = b = b << 20 ^ b >>> 12 ^ c;\n            me.c = c = c - d | 0;\n            me.d = d << 16 ^ c >>> 16 ^ a;\n            return me.a = a - b | 0;\n        };\n        /* The following is non-inverted tyche, which has better internal\n   * bit diffusion, but which is about 25% slower than tyche-i in JS.\n  me.next = function() {\n    var a = me.a, b = me.b, c = me.c, d = me.d;\n    a = (me.a + me.b | 0) >>> 0;\n    d = me.d ^ a; d = d << 16 ^ d >>> 16;\n    c = me.c + d | 0;\n    b = me.b ^ c; b = b << 12 ^ d >>> 20;\n    me.a = a = a + b | 0;\n    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;\n    me.c = c = c + d | 0;\n    b = b ^ c;\n    return me.b = (b << 7 ^ b >>> 25);\n  }\n  */ me.a = 0;\n        me.b = 0;\n        me.c = 2654435769 | 0;\n        me.d = 1367130551;\n        if (seed === Math.floor(seed)) {\n            // Integer seed.\n            me.a = seed / 0x100000000 | 0;\n            me.b = seed | 0;\n        } else {\n            // String seed.\n            strseed += seed;\n        }\n        // Mix in string seed, then discard an initial batch of 64 values.\n        for(var k = 0; k < strseed.length + 20; k++){\n            me.b ^= strseed.charCodeAt(k) | 0;\n            me.next();\n        }\n    }\n    function copy(f, t) {\n        t.a = f.a;\n        t.b = f.b;\n        t.c = f.c;\n        t.d = f.d;\n        return t;\n    }\n    ;\n    function impl(seed, opts) {\n        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {\n            return (xg.next() >>> 0) / 0x100000000;\n        };\n        prng.double = function() {\n            do {\n                var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 0x100000000, result = (top + bot) / (1 << 21);\n            }while (result === 0);\n            return result;\n        };\n        prng.int32 = xg.next;\n        prng.quick = prng;\n        if (state) {\n            if (typeof state == \"object\") copy(state, xg);\n            prng.state = function() {\n                return copy(xg, {});\n            };\n        }\n        return prng;\n    }\n    if (module1 && module1.exports) {\n        module1.exports = impl;\n    } else if (__webpack_require__.amdD && __webpack_require__.amdO) {\n        !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n            return impl;\n        }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {\n        this.tychei = impl;\n    }\n})(this,  true && module, __webpack_require__.amdD // present with an AMD loader\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL2xpYi90eWNoZWkuanMiLCJtYXBwaW5ncyI6IjtBQUFBLGtHQUFnRTtBQUNoRSxrQ0FBa0M7QUFDbEMseURBQXlEO0FBRXhELFVBQVNBLE1BQU0sRUFBRUMsT0FBTSxFQUFFQyxPQUFNO0lBRWhDLFNBQVNDLE9BQU9DLElBQUk7UUFDbEIsSUFBSUMsS0FBSyxJQUFJLEVBQUVDLFVBQVU7UUFFekIsNkJBQTZCO1FBQzdCRCxHQUFHRSxJQUFJLEdBQUc7WUFDUixJQUFJQyxJQUFJSCxHQUFHRyxDQUFDLEVBQUVDLElBQUlKLEdBQUdJLENBQUMsRUFBRUMsSUFBSUwsR0FBR0ssQ0FBQyxFQUFFQyxJQUFJTixHQUFHTSxDQUFDO1lBQzFDSCxJQUFJLEtBQU0sS0FBT0EsTUFBTSxJQUFLQztZQUM1QkEsSUFBSSxJQUFLQyxJQUFLO1lBQ2RBLElBQUksS0FBTSxLQUFPQSxNQUFNLElBQUtDO1lBQzVCQSxJQUFJLElBQUtILElBQUs7WUFDZEgsR0FBR0csQ0FBQyxHQUFHQSxJQUFJLEtBQU0sS0FBT0EsTUFBTSxLQUFNQztZQUNwQ0osR0FBR0ksQ0FBQyxHQUFHQSxJQUFJLElBQUtDLElBQUs7WUFDckJMLEdBQUdLLENBQUMsR0FBRyxLQUFNLEtBQU9ELE1BQU0sS0FBTUU7WUFDaEMsT0FBT04sR0FBR00sQ0FBQyxHQUFHLElBQUtILElBQUs7UUFDMUI7UUFFQTs7Ozs7Ozs7Ozs7Ozs7RUFjQSxHQUVBSCxHQUFHTSxDQUFDLEdBQUc7UUFDUE4sR0FBR0csQ0FBQyxHQUFHO1FBQ1BILEdBQUdJLENBQUMsR0FBRyxhQUFhO1FBQ3BCSixHQUFHSyxDQUFDLEdBQUc7UUFFUCxJQUFJTixTQUFTUSxLQUFLQyxLQUFLLENBQUNULE9BQU87WUFDN0IsZ0JBQWdCO1lBQ2hCQyxHQUFHTSxDQUFDLEdBQUcsT0FBUSxjQUFlO1lBQzlCTixHQUFHRyxDQUFDLEdBQUdKLE9BQU87UUFDaEIsT0FBTztZQUNMLGVBQWU7WUFDZkUsV0FBV0Y7UUFDYjtRQUVBLGtFQUFrRTtRQUNsRSxJQUFLLElBQUlVLElBQUksR0FBR0EsSUFBSVIsUUFBUVMsTUFBTSxHQUFHLElBQUlELElBQUs7WUFDNUNULEdBQUdHLENBQUMsSUFBSUYsUUFBUVUsVUFBVSxDQUFDRixLQUFLO1lBQ2hDVCxHQUFHRSxJQUFJO1FBQ1Q7SUFDRjtJQUVBLFNBQVNVLEtBQUtDLENBQUMsRUFBRUMsQ0FBQztRQUNoQkEsRUFBRVIsQ0FBQyxHQUFHTyxFQUFFUCxDQUFDO1FBQ1RRLEVBQUVYLENBQUMsR0FBR1UsRUFBRVYsQ0FBQztRQUNUVyxFQUFFVixDQUFDLEdBQUdTLEVBQUVULENBQUM7UUFDVFUsRUFBRVQsQ0FBQyxHQUFHUSxFQUFFUixDQUFDO1FBQ1QsT0FBT1M7SUFDVDs7SUFFQSxTQUFTQyxLQUFLaEIsSUFBSSxFQUFFaUIsSUFBSTtRQUN0QixJQUFJQyxLQUFLLElBQUluQixPQUFPQyxPQUNoQm1CLFFBQVFGLFFBQVFBLEtBQUtFLEtBQUssRUFDMUJDLE9BQU87WUFBYSxPQUFPLENBQUNGLEdBQUdmLElBQUksT0FBTyxLQUFLO1FBQWE7UUFDaEVpQixLQUFLQyxNQUFNLEdBQUc7WUFDWixHQUFHO2dCQUNELElBQUlDLE1BQU1KLEdBQUdmLElBQUksT0FBTyxJQUNwQm9CLE1BQU0sQ0FBQ0wsR0FBR2YsSUFBSSxPQUFPLEtBQUssYUFDMUJxQixTQUFTLENBQUNGLE1BQU1DLEdBQUUsSUFBTSxNQUFLLEVBQUM7WUFDcEMsUUFBU0MsV0FBVyxHQUFHO1lBQ3ZCLE9BQU9BO1FBQ1Q7UUFDQUosS0FBS0ssS0FBSyxHQUFHUCxHQUFHZixJQUFJO1FBQ3BCaUIsS0FBS00sS0FBSyxHQUFHTjtRQUNiLElBQUlELE9BQU87WUFDVCxJQUFJLE9BQU9BLFNBQVUsVUFBVU4sS0FBS00sT0FBT0Q7WUFDM0NFLEtBQUtELEtBQUssR0FBRztnQkFBYSxPQUFPTixLQUFLSyxJQUFJLENBQUM7WUFBSTtRQUNqRDtRQUNBLE9BQU9FO0lBQ1Q7SUFFQSxJQUFJdkIsV0FBVUEsUUFBTzhCLE9BQU8sRUFBRTtRQUM1QjlCLFFBQU84QixPQUFPLEdBQUdYO0lBQ25CLE9BQU8sSUFBSWxCLHdCQUFBQSxJQUFVQSx3QkFBVSxFQUFFO1FBQy9CQSxtQ0FBTztZQUFhLE9BQU9rQjtRQUFNLENBQUM7QUFBQSxrR0FBQztJQUNyQyxPQUFPO1FBQ0wsSUFBSSxDQUFDYSxNQUFNLEdBQUdiO0lBQ2hCO0FBRUEsR0FDRSxJQUFJLEVBQ0osS0FBbUIsSUFBWW5CLFFBQy9CLHdCQUF1Q0MsQ0FBRyw2QkFBNkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3NlZWRyYW5kb20vbGliL3R5Y2hlaS5qcz9mNjIzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEEgSmF2YXNjcmlwdCBpbXBsZW1lbnRhaW9uIG9mIHRoZSBcIlR5Y2hlLWlcIiBwcm5nIGFsZ29yaXRobSBieVxuLy8gU2FtdWVsIE5ldmVzIGFuZCBGaWxpcGUgQXJhdWpvLlxuLy8gU2VlIGh0dHBzOi8vZWRlbi5kZWkudWMucHQvfnNuZXZlcy9wdWJzLzIwMTEtc25mYTIucGRmXG5cbihmdW5jdGlvbihnbG9iYWwsIG1vZHVsZSwgZGVmaW5lKSB7XG5cbmZ1bmN0aW9uIFhvckdlbihzZWVkKSB7XG4gIHZhciBtZSA9IHRoaXMsIHN0cnNlZWQgPSAnJztcblxuICAvLyBTZXQgdXAgZ2VuZXJhdG9yIGZ1bmN0aW9uLlxuICBtZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGIgPSBtZS5iLCBjID0gbWUuYywgZCA9IG1lLmQsIGEgPSBtZS5hO1xuICAgIGIgPSAoYiA8PCAyNSkgXiAoYiA+Pj4gNykgXiBjO1xuICAgIGMgPSAoYyAtIGQpIHwgMDtcbiAgICBkID0gKGQgPDwgMjQpIF4gKGQgPj4+IDgpIF4gYTtcbiAgICBhID0gKGEgLSBiKSB8IDA7XG4gICAgbWUuYiA9IGIgPSAoYiA8PCAyMCkgXiAoYiA+Pj4gMTIpIF4gYztcbiAgICBtZS5jID0gYyA9IChjIC0gZCkgfCAwO1xuICAgIG1lLmQgPSAoZCA8PCAxNikgXiAoYyA+Pj4gMTYpIF4gYTtcbiAgICByZXR1cm4gbWUuYSA9IChhIC0gYikgfCAwO1xuICB9O1xuXG4gIC8qIFRoZSBmb2xsb3dpbmcgaXMgbm9uLWludmVydGVkIHR5Y2hlLCB3aGljaCBoYXMgYmV0dGVyIGludGVybmFsXG4gICAqIGJpdCBkaWZmdXNpb24sIGJ1dCB3aGljaCBpcyBhYm91dCAyNSUgc2xvd2VyIHRoYW4gdHljaGUtaSBpbiBKUy5cbiAgbWUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhID0gbWUuYSwgYiA9IG1lLmIsIGMgPSBtZS5jLCBkID0gbWUuZDtcbiAgICBhID0gKG1lLmEgKyBtZS5iIHwgMCkgPj4+IDA7XG4gICAgZCA9IG1lLmQgXiBhOyBkID0gZCA8PCAxNiBeIGQgPj4+IDE2O1xuICAgIGMgPSBtZS5jICsgZCB8IDA7XG4gICAgYiA9IG1lLmIgXiBjOyBiID0gYiA8PCAxMiBeIGQgPj4+IDIwO1xuICAgIG1lLmEgPSBhID0gYSArIGIgfCAwO1xuICAgIGQgPSBkIF4gYTsgbWUuZCA9IGQgPSBkIDw8IDggXiBkID4+PiAyNDtcbiAgICBtZS5jID0gYyA9IGMgKyBkIHwgMDtcbiAgICBiID0gYiBeIGM7XG4gICAgcmV0dXJuIG1lLmIgPSAoYiA8PCA3IF4gYiA+Pj4gMjUpO1xuICB9XG4gICovXG5cbiAgbWUuYSA9IDA7XG4gIG1lLmIgPSAwO1xuICBtZS5jID0gMjY1NDQzNTc2OSB8IDA7XG4gIG1lLmQgPSAxMzY3MTMwNTUxO1xuXG4gIGlmIChzZWVkID09PSBNYXRoLmZsb29yKHNlZWQpKSB7XG4gICAgLy8gSW50ZWdlciBzZWVkLlxuICAgIG1lLmEgPSAoc2VlZCAvIDB4MTAwMDAwMDAwKSB8IDA7XG4gICAgbWUuYiA9IHNlZWQgfCAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFN0cmluZyBzZWVkLlxuICAgIHN0cnNlZWQgKz0gc2VlZDtcbiAgfVxuXG4gIC8vIE1peCBpbiBzdHJpbmcgc2VlZCwgdGhlbiBkaXNjYXJkIGFuIGluaXRpYWwgYmF0Y2ggb2YgNjQgdmFsdWVzLlxuICBmb3IgKHZhciBrID0gMDsgayA8IHN0cnNlZWQubGVuZ3RoICsgMjA7IGsrKykge1xuICAgIG1lLmIgXj0gc3Ryc2VlZC5jaGFyQ29kZUF0KGspIHwgMDtcbiAgICBtZS5uZXh0KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29weShmLCB0KSB7XG4gIHQuYSA9IGYuYTtcbiAgdC5iID0gZi5iO1xuICB0LmMgPSBmLmM7XG4gIHQuZCA9IGYuZDtcbiAgcmV0dXJuIHQ7XG59O1xuXG5mdW5jdGlvbiBpbXBsKHNlZWQsIG9wdHMpIHtcbiAgdmFyIHhnID0gbmV3IFhvckdlbihzZWVkKSxcbiAgICAgIHN0YXRlID0gb3B0cyAmJiBvcHRzLnN0YXRlLFxuICAgICAgcHJuZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMDsgfTtcbiAgcHJuZy5kb3VibGUgPSBmdW5jdGlvbigpIHtcbiAgICBkbyB7XG4gICAgICB2YXIgdG9wID0geGcubmV4dCgpID4+PiAxMSxcbiAgICAgICAgICBib3QgPSAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwLFxuICAgICAgICAgIHJlc3VsdCA9ICh0b3AgKyBib3QpIC8gKDEgPDwgMjEpO1xuICAgIH0gd2hpbGUgKHJlc3VsdCA9PT0gMCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcHJuZy5pbnQzMiA9IHhnLm5leHQ7XG4gIHBybmcucXVpY2sgPSBwcm5nO1xuICBpZiAoc3RhdGUpIHtcbiAgICBpZiAodHlwZW9mKHN0YXRlKSA9PSAnb2JqZWN0JykgY29weShzdGF0ZSwgeGcpO1xuICAgIHBybmcuc3RhdGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGNvcHkoeGcsIHt9KTsgfVxuICB9XG4gIHJldHVybiBwcm5nO1xufVxuXG5pZiAobW9kdWxlICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gaW1wbDtcbn0gZWxzZSBpZiAoZGVmaW5lICYmIGRlZmluZS5hbWQpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gaW1wbDsgfSk7XG59IGVsc2Uge1xuICB0aGlzLnR5Y2hlaSA9IGltcGw7XG59XG5cbn0pKFxuICB0aGlzLFxuICAodHlwZW9mIG1vZHVsZSkgPT0gJ29iamVjdCcgJiYgbW9kdWxlLCAgICAvLyBwcmVzZW50IGluIG5vZGUuanNcbiAgKHR5cGVvZiBkZWZpbmUpID09ICdmdW5jdGlvbicgJiYgZGVmaW5lICAgLy8gcHJlc2VudCB3aXRoIGFuIEFNRCBsb2FkZXJcbik7XG5cblxuIl0sIm5hbWVzIjpbImdsb2JhbCIsIm1vZHVsZSIsImRlZmluZSIsIlhvckdlbiIsInNlZWQiLCJtZSIsInN0cnNlZWQiLCJuZXh0IiwiYiIsImMiLCJkIiwiYSIsIk1hdGgiLCJmbG9vciIsImsiLCJsZW5ndGgiLCJjaGFyQ29kZUF0IiwiY29weSIsImYiLCJ0IiwiaW1wbCIsIm9wdHMiLCJ4ZyIsInN0YXRlIiwicHJuZyIsImRvdWJsZSIsInRvcCIsImJvdCIsInJlc3VsdCIsImludDMyIiwicXVpY2siLCJleHBvcnRzIiwiYW1kIiwidHljaGVpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/seedrandom/lib/tychei.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/seedrandom/lib/xor128.js":
/*!***********************************************!*\
  !*** ./node_modules/seedrandom/lib/xor128.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n(function(global, module1, define1) {\n    function XorGen(seed) {\n        var me = this, strseed = \"\";\n        me.x = 0;\n        me.y = 0;\n        me.z = 0;\n        me.w = 0;\n        // Set up generator function.\n        me.next = function() {\n            var t = me.x ^ me.x << 11;\n            me.x = me.y;\n            me.y = me.z;\n            me.z = me.w;\n            return me.w ^= me.w >>> 19 ^ t ^ t >>> 8;\n        };\n        if (seed === (seed | 0)) {\n            // Integer seed.\n            me.x = seed;\n        } else {\n            // String seed.\n            strseed += seed;\n        }\n        // Mix in string seed, then discard an initial batch of 64 values.\n        for(var k = 0; k < strseed.length + 64; k++){\n            me.x ^= strseed.charCodeAt(k) | 0;\n            me.next();\n        }\n    }\n    function copy(f, t) {\n        t.x = f.x;\n        t.y = f.y;\n        t.z = f.z;\n        t.w = f.w;\n        return t;\n    }\n    function impl(seed, opts) {\n        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {\n            return (xg.next() >>> 0) / 0x100000000;\n        };\n        prng.double = function() {\n            do {\n                var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 0x100000000, result = (top + bot) / (1 << 21);\n            }while (result === 0);\n            return result;\n        };\n        prng.int32 = xg.next;\n        prng.quick = prng;\n        if (state) {\n            if (typeof state == \"object\") copy(state, xg);\n            prng.state = function() {\n                return copy(xg, {});\n            };\n        }\n        return prng;\n    }\n    if (module1 && module1.exports) {\n        module1.exports = impl;\n    } else if (__webpack_require__.amdD && __webpack_require__.amdO) {\n        !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n            return impl;\n        }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {\n        this.xor128 = impl;\n    }\n})(this,  true && module, __webpack_require__.amdD // present with an AMD loader\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL2xpYi94b3IxMjguanMiLCJtYXBwaW5ncyI6IjtBQUFBLGlHQUErRDtBQUMvRCxnRUFBZ0U7QUFFL0QsVUFBU0EsTUFBTSxFQUFFQyxPQUFNLEVBQUVDLE9BQU07SUFFaEMsU0FBU0MsT0FBT0MsSUFBSTtRQUNsQixJQUFJQyxLQUFLLElBQUksRUFBRUMsVUFBVTtRQUV6QkQsR0FBR0UsQ0FBQyxHQUFHO1FBQ1BGLEdBQUdHLENBQUMsR0FBRztRQUNQSCxHQUFHSSxDQUFDLEdBQUc7UUFDUEosR0FBR0ssQ0FBQyxHQUFHO1FBRVAsNkJBQTZCO1FBQzdCTCxHQUFHTSxJQUFJLEdBQUc7WUFDUixJQUFJQyxJQUFJUCxHQUFHRSxDQUFDLEdBQUlGLEdBQUdFLENBQUMsSUFBSTtZQUN4QkYsR0FBR0UsQ0FBQyxHQUFHRixHQUFHRyxDQUFDO1lBQ1hILEdBQUdHLENBQUMsR0FBR0gsR0FBR0ksQ0FBQztZQUNYSixHQUFHSSxDQUFDLEdBQUdKLEdBQUdLLENBQUM7WUFDWCxPQUFPTCxHQUFHSyxDQUFDLElBQUksR0FBSUEsQ0FBQyxLQUFLLEtBQU1FLElBQUtBLE1BQU07UUFDNUM7UUFFQSxJQUFJUixTQUFVQSxDQUFBQSxPQUFPLElBQUk7WUFDdkIsZ0JBQWdCO1lBQ2hCQyxHQUFHRSxDQUFDLEdBQUdIO1FBQ1QsT0FBTztZQUNMLGVBQWU7WUFDZkUsV0FBV0Y7UUFDYjtRQUVBLGtFQUFrRTtRQUNsRSxJQUFLLElBQUlTLElBQUksR0FBR0EsSUFBSVAsUUFBUVEsTUFBTSxHQUFHLElBQUlELElBQUs7WUFDNUNSLEdBQUdFLENBQUMsSUFBSUQsUUFBUVMsVUFBVSxDQUFDRixLQUFLO1lBQ2hDUixHQUFHTSxJQUFJO1FBQ1Q7SUFDRjtJQUVBLFNBQVNLLEtBQUtDLENBQUMsRUFBRUwsQ0FBQztRQUNoQkEsRUFBRUwsQ0FBQyxHQUFHVSxFQUFFVixDQUFDO1FBQ1RLLEVBQUVKLENBQUMsR0FBR1MsRUFBRVQsQ0FBQztRQUNUSSxFQUFFSCxDQUFDLEdBQUdRLEVBQUVSLENBQUM7UUFDVEcsRUFBRUYsQ0FBQyxHQUFHTyxFQUFFUCxDQUFDO1FBQ1QsT0FBT0U7SUFDVDtJQUVBLFNBQVNNLEtBQUtkLElBQUksRUFBRWUsSUFBSTtRQUN0QixJQUFJQyxLQUFLLElBQUlqQixPQUFPQyxPQUNoQmlCLFFBQVFGLFFBQVFBLEtBQUtFLEtBQUssRUFDMUJDLE9BQU87WUFBYSxPQUFPLENBQUNGLEdBQUdULElBQUksT0FBTyxLQUFLO1FBQWE7UUFDaEVXLEtBQUtDLE1BQU0sR0FBRztZQUNaLEdBQUc7Z0JBQ0QsSUFBSUMsTUFBTUosR0FBR1QsSUFBSSxPQUFPLElBQ3BCYyxNQUFNLENBQUNMLEdBQUdULElBQUksT0FBTyxLQUFLLGFBQzFCZSxTQUFTLENBQUNGLE1BQU1DLEdBQUUsSUFBTSxNQUFLLEVBQUM7WUFDcEMsUUFBU0MsV0FBVyxHQUFHO1lBQ3ZCLE9BQU9BO1FBQ1Q7UUFDQUosS0FBS0ssS0FBSyxHQUFHUCxHQUFHVCxJQUFJO1FBQ3BCVyxLQUFLTSxLQUFLLEdBQUdOO1FBQ2IsSUFBSUQsT0FBTztZQUNULElBQUksT0FBT0EsU0FBVSxVQUFVTCxLQUFLSyxPQUFPRDtZQUMzQ0UsS0FBS0QsS0FBSyxHQUFHO2dCQUFhLE9BQU9MLEtBQUtJLElBQUksQ0FBQztZQUFJO1FBQ2pEO1FBQ0EsT0FBT0U7SUFDVDtJQUVBLElBQUlyQixXQUFVQSxRQUFPNEIsT0FBTyxFQUFFO1FBQzVCNUIsUUFBTzRCLE9BQU8sR0FBR1g7SUFDbkIsT0FBTyxJQUFJaEIsd0JBQUFBLElBQVVBLHdCQUFVLEVBQUU7UUFDL0JBLG1DQUFPO1lBQWEsT0FBT2dCO1FBQU0sQ0FBQztBQUFBLGtHQUFDO0lBQ3JDLE9BQU87UUFDTCxJQUFJLENBQUNhLE1BQU0sR0FBR2I7SUFDaEI7QUFFQSxHQUNFLElBQUksRUFDSixLQUFtQixJQUFZakIsUUFDL0Isd0JBQXVDQyxDQUFHLDZCQUE2QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvc2VlZHJhbmRvbS9saWIveG9yMTI4LmpzPzBhZWQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQSBKYXZhc2NyaXB0IGltcGxlbWVudGFpb24gb2YgdGhlIFwieG9yMTI4XCIgcHJuZyBhbGdvcml0aG0gYnlcbi8vIEdlb3JnZSBNYXJzYWdsaWEuICBTZWUgaHR0cDovL3d3dy5qc3RhdHNvZnQub3JnL3YwOC9pMTQvcGFwZXJcblxuKGZ1bmN0aW9uKGdsb2JhbCwgbW9kdWxlLCBkZWZpbmUpIHtcblxuZnVuY3Rpb24gWG9yR2VuKHNlZWQpIHtcbiAgdmFyIG1lID0gdGhpcywgc3Ryc2VlZCA9ICcnO1xuXG4gIG1lLnggPSAwO1xuICBtZS55ID0gMDtcbiAgbWUueiA9IDA7XG4gIG1lLncgPSAwO1xuXG4gIC8vIFNldCB1cCBnZW5lcmF0b3IgZnVuY3Rpb24uXG4gIG1lLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdCA9IG1lLnggXiAobWUueCA8PCAxMSk7XG4gICAgbWUueCA9IG1lLnk7XG4gICAgbWUueSA9IG1lLno7XG4gICAgbWUueiA9IG1lLnc7XG4gICAgcmV0dXJuIG1lLncgXj0gKG1lLncgPj4+IDE5KSBeIHQgXiAodCA+Pj4gOCk7XG4gIH07XG5cbiAgaWYgKHNlZWQgPT09IChzZWVkIHwgMCkpIHtcbiAgICAvLyBJbnRlZ2VyIHNlZWQuXG4gICAgbWUueCA9IHNlZWQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gU3RyaW5nIHNlZWQuXG4gICAgc3Ryc2VlZCArPSBzZWVkO1xuICB9XG5cbiAgLy8gTWl4IGluIHN0cmluZyBzZWVkLCB0aGVuIGRpc2NhcmQgYW4gaW5pdGlhbCBiYXRjaCBvZiA2NCB2YWx1ZXMuXG4gIGZvciAodmFyIGsgPSAwOyBrIDwgc3Ryc2VlZC5sZW5ndGggKyA2NDsgaysrKSB7XG4gICAgbWUueCBePSBzdHJzZWVkLmNoYXJDb2RlQXQoaykgfCAwO1xuICAgIG1lLm5leHQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb3B5KGYsIHQpIHtcbiAgdC54ID0gZi54O1xuICB0LnkgPSBmLnk7XG4gIHQueiA9IGYuejtcbiAgdC53ID0gZi53O1xuICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gaW1wbChzZWVkLCBvcHRzKSB7XG4gIHZhciB4ZyA9IG5ldyBYb3JHZW4oc2VlZCksXG4gICAgICBzdGF0ZSA9IG9wdHMgJiYgb3B0cy5zdGF0ZSxcbiAgICAgIHBybmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDA7IH07XG4gIHBybmcuZG91YmxlID0gZnVuY3Rpb24oKSB7XG4gICAgZG8ge1xuICAgICAgdmFyIHRvcCA9IHhnLm5leHQoKSA+Pj4gMTEsXG4gICAgICAgICAgYm90ID0gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMCxcbiAgICAgICAgICByZXN1bHQgPSAodG9wICsgYm90KSAvICgxIDw8IDIxKTtcbiAgICB9IHdoaWxlIChyZXN1bHQgPT09IDApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHBybmcuaW50MzIgPSB4Zy5uZXh0O1xuICBwcm5nLnF1aWNrID0gcHJuZztcbiAgaWYgKHN0YXRlKSB7XG4gICAgaWYgKHR5cGVvZihzdGF0ZSkgPT0gJ29iamVjdCcpIGNvcHkoc3RhdGUsIHhnKTtcbiAgICBwcm5nLnN0YXRlID0gZnVuY3Rpb24oKSB7IHJldHVybiBjb3B5KHhnLCB7fSk7IH1cbiAgfVxuICByZXR1cm4gcHJuZztcbn1cblxuaWYgKG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGltcGw7XG59IGVsc2UgaWYgKGRlZmluZSAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIGltcGw7IH0pO1xufSBlbHNlIHtcbiAgdGhpcy54b3IxMjggPSBpbXBsO1xufVxuXG59KShcbiAgdGhpcyxcbiAgKHR5cGVvZiBtb2R1bGUpID09ICdvYmplY3QnICYmIG1vZHVsZSwgICAgLy8gcHJlc2VudCBpbiBub2RlLmpzXG4gICh0eXBlb2YgZGVmaW5lKSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZSAgIC8vIHByZXNlbnQgd2l0aCBhbiBBTUQgbG9hZGVyXG4pO1xuXG5cbiJdLCJuYW1lcyI6WyJnbG9iYWwiLCJtb2R1bGUiLCJkZWZpbmUiLCJYb3JHZW4iLCJzZWVkIiwibWUiLCJzdHJzZWVkIiwieCIsInkiLCJ6IiwidyIsIm5leHQiLCJ0IiwiayIsImxlbmd0aCIsImNoYXJDb2RlQXQiLCJjb3B5IiwiZiIsImltcGwiLCJvcHRzIiwieGciLCJzdGF0ZSIsInBybmciLCJkb3VibGUiLCJ0b3AiLCJib3QiLCJyZXN1bHQiLCJpbnQzMiIsInF1aWNrIiwiZXhwb3J0cyIsImFtZCIsInhvcjEyOCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/seedrandom/lib/xor128.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/seedrandom/lib/xor4096.js":
/*!************************************************!*\
  !*** ./node_modules/seedrandom/lib/xor4096.js ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.\n//\n// This fast non-cryptographic random number generator is designed for\n// use in Monte-Carlo algorithms. It combines a long-period xorshift\n// generator with a Weyl generator, and it passes all common batteries\n// of stasticial tests for randomness while consuming only a few nanoseconds\n// for each prng generated.  For background on the generator, see Brent's\n// paper: \"Some long-period random number generators using shifts and xors.\"\n// http://arxiv.org/pdf/1004.3115v1.pdf\n//\n// Usage:\n//\n// var xor4096 = require('xor4096');\n// random = xor4096(1);                        // Seed with int32 or string.\n// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.\n// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.\n//\n// For nonzero numeric keys, this impelementation provides a sequence\n// identical to that by Brent's xorgens 3 implementaion in C.  This\n// implementation also provides for initalizing the generator with\n// string seeds, or for saving and restoring the state of the generator.\n//\n// On Chrome, this prng benchmarks about 2.1 times slower than\n// Javascript's built-in Math.random().\n(function(global, module1, define1) {\n    function XorGen(seed) {\n        var me = this;\n        // Set up generator function.\n        me.next = function() {\n            var w = me.w, X = me.X, i = me.i, t, v;\n            // Update Weyl generator.\n            me.w = w = w + 0x61c88647 | 0;\n            // Update xor generator.\n            v = X[i + 34 & 127];\n            t = X[i = i + 1 & 127];\n            v ^= v << 13;\n            t ^= t << 17;\n            v ^= v >>> 15;\n            t ^= t >>> 12;\n            // Update Xor generator array state.\n            v = X[i] = v ^ t;\n            me.i = i;\n            // Result is the combination.\n            return v + (w ^ w >>> 16) | 0;\n        };\n        function init(me, seed) {\n            var t, v, i, j, w, X = [], limit = 128;\n            if (seed === (seed | 0)) {\n                // Numeric seeds initialize v, which is used to generates X.\n                v = seed;\n                seed = null;\n            } else {\n                // String seeds are mixed into v and X one character at a time.\n                seed = seed + \"\\x00\";\n                v = 0;\n                limit = Math.max(limit, seed.length);\n            }\n            // Initialize circular array and weyl value.\n            for(i = 0, j = -32; j < limit; ++j){\n                // Put the unicode characters into the array, and shuffle them.\n                if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);\n                // After 32 shuffles, take v as the starting w value.\n                if (j === 0) w = v;\n                v ^= v << 10;\n                v ^= v >>> 15;\n                v ^= v << 4;\n                v ^= v >>> 13;\n                if (j >= 0) {\n                    w = w + 0x61c88647 | 0; // Weyl.\n                    t = X[j & 127] ^= v + w; // Combine xor and weyl to init array.\n                    i = 0 == t ? i + 1 : 0; // Count zeroes.\n                }\n            }\n            // We have detected all zeroes; make the key nonzero.\n            if (i >= 128) {\n                X[(seed && seed.length || 0) & 127] = -1;\n            }\n            // Run the generator 512 times to further mix the state before using it.\n            // Factoring this as a function slows the main generator, so it is just\n            // unrolled here.  The weyl generator is not advanced while warming up.\n            i = 127;\n            for(j = 4 * 128; j > 0; --j){\n                v = X[i + 34 & 127];\n                t = X[i = i + 1 & 127];\n                v ^= v << 13;\n                t ^= t << 17;\n                v ^= v >>> 15;\n                t ^= t >>> 12;\n                X[i] = v ^ t;\n            }\n            // Storing state as object members is faster than using closure variables.\n            me.w = w;\n            me.X = X;\n            me.i = i;\n        }\n        init(me, seed);\n    }\n    function copy(f, t) {\n        t.i = f.i;\n        t.w = f.w;\n        t.X = f.X.slice();\n        return t;\n    }\n    ;\n    function impl(seed, opts) {\n        if (seed == null) seed = +new Date;\n        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {\n            return (xg.next() >>> 0) / 0x100000000;\n        };\n        prng.double = function() {\n            do {\n                var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 0x100000000, result = (top + bot) / (1 << 21);\n            }while (result === 0);\n            return result;\n        };\n        prng.int32 = xg.next;\n        prng.quick = prng;\n        if (state) {\n            if (state.X) copy(state, xg);\n            prng.state = function() {\n                return copy(xg, {});\n            };\n        }\n        return prng;\n    }\n    if (module1 && module1.exports) {\n        module1.exports = impl;\n    } else if (__webpack_require__.amdD && __webpack_require__.amdO) {\n        !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n            return impl;\n        }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {\n        this.xor4096 = impl;\n    }\n})(this,  true && module, __webpack_require__.amdD // present with an AMD loader\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/seedrandom/lib/xor4096.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/seedrandom/lib/xorshift7.js":
/*!**************************************************!*\
  !*** ./node_modules/seedrandom/lib/xorshift7.js ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of the \"xorshift7\" algorithm by\n// François Panneton and Pierre L'ecuyer:\n// \"On the Xorgshift Random Number Generators\"\n// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf\n(function(global, module1, define1) {\n    function XorGen(seed) {\n        var me = this;\n        // Set up generator function.\n        me.next = function() {\n            // Update xor generator.\n            var X = me.x, i = me.i, t, v, w;\n            t = X[i];\n            t ^= t >>> 7;\n            v = t ^ t << 24;\n            t = X[i + 1 & 7];\n            v ^= t ^ t >>> 10;\n            t = X[i + 3 & 7];\n            v ^= t ^ t >>> 3;\n            t = X[i + 4 & 7];\n            v ^= t ^ t << 7;\n            t = X[i + 7 & 7];\n            t = t ^ t << 13;\n            v ^= t ^ t << 9;\n            X[i] = v;\n            me.i = i + 1 & 7;\n            return v;\n        };\n        function init(me, seed) {\n            var j, w, X = [];\n            if (seed === (seed | 0)) {\n                // Seed state array using a 32-bit integer.\n                w = X[0] = seed;\n            } else {\n                // Seed state using a string.\n                seed = \"\" + seed;\n                for(j = 0; j < seed.length; ++j){\n                    X[j & 7] = X[j & 7] << 15 ^ seed.charCodeAt(j) + X[j + 1 & 7] << 13;\n                }\n            }\n            // Enforce an array length of 8, not all zeroes.\n            while(X.length < 8)X.push(0);\n            for(j = 0; j < 8 && X[j] === 0; ++j);\n            if (j == 8) w = X[7] = -1;\n            else w = X[j];\n            me.x = X;\n            me.i = 0;\n            // Discard an initial 256 values.\n            for(j = 256; j > 0; --j){\n                me.next();\n            }\n        }\n        init(me, seed);\n    }\n    function copy(f, t) {\n        t.x = f.x.slice();\n        t.i = f.i;\n        return t;\n    }\n    function impl(seed, opts) {\n        if (seed == null) seed = +new Date;\n        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {\n            return (xg.next() >>> 0) / 0x100000000;\n        };\n        prng.double = function() {\n            do {\n                var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 0x100000000, result = (top + bot) / (1 << 21);\n            }while (result === 0);\n            return result;\n        };\n        prng.int32 = xg.next;\n        prng.quick = prng;\n        if (state) {\n            if (state.x) copy(state, xg);\n            prng.state = function() {\n                return copy(xg, {});\n            };\n        }\n        return prng;\n    }\n    if (module1 && module1.exports) {\n        module1.exports = impl;\n    } else if (__webpack_require__.amdD && __webpack_require__.amdO) {\n        !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n            return impl;\n        }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {\n        this.xorshift7 = impl;\n    }\n})(this,  true && module, __webpack_require__.amdD // present with an AMD loader\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL2xpYi94b3JzaGlmdDcuanMiLCJtYXBwaW5ncyI6IjtBQUFBLCtGQUE2RDtBQUM3RCx5Q0FBeUM7QUFDekMsOENBQThDO0FBQzlDLDBFQUEwRTtBQUV6RSxVQUFTQSxNQUFNLEVBQUVDLE9BQU0sRUFBRUMsT0FBTTtJQUVoQyxTQUFTQyxPQUFPQyxJQUFJO1FBQ2xCLElBQUlDLEtBQUssSUFBSTtRQUViLDZCQUE2QjtRQUM3QkEsR0FBR0MsSUFBSSxHQUFHO1lBQ1Isd0JBQXdCO1lBQ3hCLElBQUlDLElBQUlGLEdBQUdHLENBQUMsRUFBRUMsSUFBSUosR0FBR0ksQ0FBQyxFQUFFQyxHQUFHQyxHQUFHQztZQUM5QkYsSUFBSUgsQ0FBQyxDQUFDRSxFQUFFO1lBQUVDLEtBQU1BLE1BQU07WUFBSUMsSUFBSUQsSUFBS0EsS0FBSztZQUN4Q0EsSUFBSUgsQ0FBQyxDQUFDLElBQUssSUFBSyxFQUFFO1lBQUVJLEtBQUtELElBQUtBLE1BQU07WUFDcENBLElBQUlILENBQUMsQ0FBQyxJQUFLLElBQUssRUFBRTtZQUFFSSxLQUFLRCxJQUFLQSxNQUFNO1lBQ3BDQSxJQUFJSCxDQUFDLENBQUMsSUFBSyxJQUFLLEVBQUU7WUFBRUksS0FBS0QsSUFBS0EsS0FBSztZQUNuQ0EsSUFBSUgsQ0FBQyxDQUFDLElBQUssSUFBSyxFQUFFO1lBQUVHLElBQUlBLElBQUtBLEtBQUs7WUFBS0MsS0FBS0QsSUFBS0EsS0FBSztZQUN0REgsQ0FBQyxDQUFDRSxFQUFFLEdBQUdFO1lBQ1BOLEdBQUdJLENBQUMsR0FBRyxJQUFLLElBQUs7WUFDakIsT0FBT0U7UUFDVDtRQUVBLFNBQVNFLEtBQUtSLEVBQUUsRUFBRUQsSUFBSTtZQUNwQixJQUFJVSxHQUFHRixHQUFHTCxJQUFJLEVBQUU7WUFFaEIsSUFBSUgsU0FBVUEsQ0FBQUEsT0FBTyxJQUFJO2dCQUN2QiwyQ0FBMkM7Z0JBQzNDUSxJQUFJTCxDQUFDLENBQUMsRUFBRSxHQUFHSDtZQUNiLE9BQU87Z0JBQ0wsNkJBQTZCO2dCQUM3QkEsT0FBTyxLQUFLQTtnQkFDWixJQUFLVSxJQUFJLEdBQUdBLElBQUlWLEtBQUtXLE1BQU0sRUFBRSxFQUFFRCxFQUFHO29CQUNoQ1AsQ0FBQyxDQUFDTyxJQUFJLEVBQUUsR0FBRyxDQUFFLENBQUNBLElBQUksRUFBRSxJQUFJLEtBQ25CVixLQUFLWSxVQUFVLENBQUNGLEtBQUtQLENBQUMsQ0FBQyxJQUFLLElBQUssRUFBRSxJQUFJO2dCQUM5QztZQUNGO1lBQ0EsZ0RBQWdEO1lBQ2hELE1BQU9BLEVBQUVRLE1BQU0sR0FBRyxFQUFHUixFQUFFVSxJQUFJLENBQUM7WUFDNUIsSUFBS0gsSUFBSSxHQUFHQSxJQUFJLEtBQUtQLENBQUMsQ0FBQ08sRUFBRSxLQUFLLEdBQUcsRUFBRUE7WUFDbkMsSUFBSUEsS0FBSyxHQUFHRixJQUFJTCxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUM7aUJBQVFLLElBQUlMLENBQUMsQ0FBQ08sRUFBRTtZQUV4Q1QsR0FBR0csQ0FBQyxHQUFHRDtZQUNQRixHQUFHSSxDQUFDLEdBQUc7WUFFUCxpQ0FBaUM7WUFDakMsSUFBS0ssSUFBSSxLQUFLQSxJQUFJLEdBQUcsRUFBRUEsRUFBRztnQkFDeEJULEdBQUdDLElBQUk7WUFDVDtRQUNGO1FBRUFPLEtBQUtSLElBQUlEO0lBQ1g7SUFFQSxTQUFTYyxLQUFLQyxDQUFDLEVBQUVULENBQUM7UUFDaEJBLEVBQUVGLENBQUMsR0FBR1csRUFBRVgsQ0FBQyxDQUFDWSxLQUFLO1FBQ2ZWLEVBQUVELENBQUMsR0FBR1UsRUFBRVYsQ0FBQztRQUNULE9BQU9DO0lBQ1Q7SUFFQSxTQUFTVyxLQUFLakIsSUFBSSxFQUFFa0IsSUFBSTtRQUN0QixJQUFJbEIsUUFBUSxNQUFNQSxPQUFPLENBQUUsSUFBSW1CO1FBQy9CLElBQUlDLEtBQUssSUFBSXJCLE9BQU9DLE9BQ2hCcUIsUUFBUUgsUUFBUUEsS0FBS0csS0FBSyxFQUMxQkMsT0FBTztZQUFhLE9BQU8sQ0FBQ0YsR0FBR2xCLElBQUksT0FBTyxLQUFLO1FBQWE7UUFDaEVvQixLQUFLQyxNQUFNLEdBQUc7WUFDWixHQUFHO2dCQUNELElBQUlDLE1BQU1KLEdBQUdsQixJQUFJLE9BQU8sSUFDcEJ1QixNQUFNLENBQUNMLEdBQUdsQixJQUFJLE9BQU8sS0FBSyxhQUMxQndCLFNBQVMsQ0FBQ0YsTUFBTUMsR0FBRSxJQUFNLE1BQUssRUFBQztZQUNwQyxRQUFTQyxXQUFXLEdBQUc7WUFDdkIsT0FBT0E7UUFDVDtRQUNBSixLQUFLSyxLQUFLLEdBQUdQLEdBQUdsQixJQUFJO1FBQ3BCb0IsS0FBS00sS0FBSyxHQUFHTjtRQUNiLElBQUlELE9BQU87WUFDVCxJQUFJQSxNQUFNakIsQ0FBQyxFQUFFVSxLQUFLTyxPQUFPRDtZQUN6QkUsS0FBS0QsS0FBSyxHQUFHO2dCQUFhLE9BQU9QLEtBQUtNLElBQUksQ0FBQztZQUFJO1FBQ2pEO1FBQ0EsT0FBT0U7SUFDVDtJQUVBLElBQUl6QixXQUFVQSxRQUFPZ0MsT0FBTyxFQUFFO1FBQzVCaEMsUUFBT2dDLE9BQU8sR0FBR1o7SUFDbkIsT0FBTyxJQUFJbkIsd0JBQUFBLElBQVVBLHdCQUFVLEVBQUU7UUFDL0JBLG1DQUFPO1lBQWEsT0FBT21CO1FBQU0sQ0FBQztBQUFBLGtHQUFDO0lBQ3JDLE9BQU87UUFDTCxJQUFJLENBQUNjLFNBQVMsR0FBR2Q7SUFDbkI7QUFFQSxHQUNFLElBQUksRUFDSixLQUFtQixJQUFZcEIsUUFDL0Isd0JBQXVDQyxDQUFHLDZCQUE2QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvc2VlZHJhbmRvbS9saWIveG9yc2hpZnQ3LmpzPzdlYmEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQSBKYXZhc2NyaXB0IGltcGxlbWVudGFpb24gb2YgdGhlIFwieG9yc2hpZnQ3XCIgYWxnb3JpdGhtIGJ5XG4vLyBGcmFuw6dvaXMgUGFubmV0b24gYW5kIFBpZXJyZSBMJ2VjdXllcjpcbi8vIFwiT24gdGhlIFhvcmdzaGlmdCBSYW5kb20gTnVtYmVyIEdlbmVyYXRvcnNcIlxuLy8gaHR0cDovL3NhbHVjLmVuZ3IudWNvbm4uZWR1L3JlZnMvY3J5cHRvL3JuZy9wYW5uZXRvbjA1b250aGV4b3JzaGlmdC5wZGZcblxuKGZ1bmN0aW9uKGdsb2JhbCwgbW9kdWxlLCBkZWZpbmUpIHtcblxuZnVuY3Rpb24gWG9yR2VuKHNlZWQpIHtcbiAgdmFyIG1lID0gdGhpcztcblxuICAvLyBTZXQgdXAgZ2VuZXJhdG9yIGZ1bmN0aW9uLlxuICBtZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gVXBkYXRlIHhvciBnZW5lcmF0b3IuXG4gICAgdmFyIFggPSBtZS54LCBpID0gbWUuaSwgdCwgdiwgdztcbiAgICB0ID0gWFtpXTsgdCBePSAodCA+Pj4gNyk7IHYgPSB0IF4gKHQgPDwgMjQpO1xuICAgIHQgPSBYWyhpICsgMSkgJiA3XTsgdiBePSB0IF4gKHQgPj4+IDEwKTtcbiAgICB0ID0gWFsoaSArIDMpICYgN107IHYgXj0gdCBeICh0ID4+PiAzKTtcbiAgICB0ID0gWFsoaSArIDQpICYgN107IHYgXj0gdCBeICh0IDw8IDcpO1xuICAgIHQgPSBYWyhpICsgNykgJiA3XTsgdCA9IHQgXiAodCA8PCAxMyk7IHYgXj0gdCBeICh0IDw8IDkpO1xuICAgIFhbaV0gPSB2O1xuICAgIG1lLmkgPSAoaSArIDEpICYgNztcbiAgICByZXR1cm4gdjtcbiAgfTtcblxuICBmdW5jdGlvbiBpbml0KG1lLCBzZWVkKSB7XG4gICAgdmFyIGosIHcsIFggPSBbXTtcblxuICAgIGlmIChzZWVkID09PSAoc2VlZCB8IDApKSB7XG4gICAgICAvLyBTZWVkIHN0YXRlIGFycmF5IHVzaW5nIGEgMzItYml0IGludGVnZXIuXG4gICAgICB3ID0gWFswXSA9IHNlZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNlZWQgc3RhdGUgdXNpbmcgYSBzdHJpbmcuXG4gICAgICBzZWVkID0gJycgKyBzZWVkO1xuICAgICAgZm9yIChqID0gMDsgaiA8IHNlZWQubGVuZ3RoOyArK2opIHtcbiAgICAgICAgWFtqICYgN10gPSAoWFtqICYgN10gPDwgMTUpIF5cbiAgICAgICAgICAgIChzZWVkLmNoYXJDb2RlQXQoaikgKyBYWyhqICsgMSkgJiA3XSA8PCAxMyk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIEVuZm9yY2UgYW4gYXJyYXkgbGVuZ3RoIG9mIDgsIG5vdCBhbGwgemVyb2VzLlxuICAgIHdoaWxlIChYLmxlbmd0aCA8IDgpIFgucHVzaCgwKTtcbiAgICBmb3IgKGogPSAwOyBqIDwgOCAmJiBYW2pdID09PSAwOyArK2opO1xuICAgIGlmIChqID09IDgpIHcgPSBYWzddID0gLTE7IGVsc2UgdyA9IFhbal07XG5cbiAgICBtZS54ID0gWDtcbiAgICBtZS5pID0gMDtcblxuICAgIC8vIERpc2NhcmQgYW4gaW5pdGlhbCAyNTYgdmFsdWVzLlxuICAgIGZvciAoaiA9IDI1NjsgaiA+IDA7IC0taikge1xuICAgICAgbWUubmV4dCgpO1xuICAgIH1cbiAgfVxuXG4gIGluaXQobWUsIHNlZWQpO1xufVxuXG5mdW5jdGlvbiBjb3B5KGYsIHQpIHtcbiAgdC54ID0gZi54LnNsaWNlKCk7XG4gIHQuaSA9IGYuaTtcbiAgcmV0dXJuIHQ7XG59XG5cbmZ1bmN0aW9uIGltcGwoc2VlZCwgb3B0cykge1xuICBpZiAoc2VlZCA9PSBudWxsKSBzZWVkID0gKyhuZXcgRGF0ZSk7XG4gIHZhciB4ZyA9IG5ldyBYb3JHZW4oc2VlZCksXG4gICAgICBzdGF0ZSA9IG9wdHMgJiYgb3B0cy5zdGF0ZSxcbiAgICAgIHBybmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDA7IH07XG4gIHBybmcuZG91YmxlID0gZnVuY3Rpb24oKSB7XG4gICAgZG8ge1xuICAgICAgdmFyIHRvcCA9IHhnLm5leHQoKSA+Pj4gMTEsXG4gICAgICAgICAgYm90ID0gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMCxcbiAgICAgICAgICByZXN1bHQgPSAodG9wICsgYm90KSAvICgxIDw8IDIxKTtcbiAgICB9IHdoaWxlIChyZXN1bHQgPT09IDApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHBybmcuaW50MzIgPSB4Zy5uZXh0O1xuICBwcm5nLnF1aWNrID0gcHJuZztcbiAgaWYgKHN0YXRlKSB7XG4gICAgaWYgKHN0YXRlLngpIGNvcHkoc3RhdGUsIHhnKTtcbiAgICBwcm5nLnN0YXRlID0gZnVuY3Rpb24oKSB7IHJldHVybiBjb3B5KHhnLCB7fSk7IH1cbiAgfVxuICByZXR1cm4gcHJuZztcbn1cblxuaWYgKG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGltcGw7XG59IGVsc2UgaWYgKGRlZmluZSAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIGltcGw7IH0pO1xufSBlbHNlIHtcbiAgdGhpcy54b3JzaGlmdDcgPSBpbXBsO1xufVxuXG59KShcbiAgdGhpcyxcbiAgKHR5cGVvZiBtb2R1bGUpID09ICdvYmplY3QnICYmIG1vZHVsZSwgICAgLy8gcHJlc2VudCBpbiBub2RlLmpzXG4gICh0eXBlb2YgZGVmaW5lKSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZSAgIC8vIHByZXNlbnQgd2l0aCBhbiBBTUQgbG9hZGVyXG4pO1xuXG4iXSwibmFtZXMiOlsiZ2xvYmFsIiwibW9kdWxlIiwiZGVmaW5lIiwiWG9yR2VuIiwic2VlZCIsIm1lIiwibmV4dCIsIlgiLCJ4IiwiaSIsInQiLCJ2IiwidyIsImluaXQiLCJqIiwibGVuZ3RoIiwiY2hhckNvZGVBdCIsInB1c2giLCJjb3B5IiwiZiIsInNsaWNlIiwiaW1wbCIsIm9wdHMiLCJEYXRlIiwieGciLCJzdGF0ZSIsInBybmciLCJkb3VibGUiLCJ0b3AiLCJib3QiLCJyZXN1bHQiLCJpbnQzMiIsInF1aWNrIiwiZXhwb3J0cyIsImFtZCIsInhvcnNoaWZ0NyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/seedrandom/lib/xorshift7.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/seedrandom/lib/xorwow.js":
/*!***********************************************!*\
  !*** ./node_modules/seedrandom/lib/xorwow.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of the \"xorwow\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n(function(global, module1, define1) {\n    function XorGen(seed) {\n        var me = this, strseed = \"\";\n        // Set up generator function.\n        me.next = function() {\n            var t = me.x ^ me.x >>> 2;\n            me.x = me.y;\n            me.y = me.z;\n            me.z = me.w;\n            me.w = me.v;\n            return (me.d = me.d + 362437 | 0) + (me.v = me.v ^ me.v << 4 ^ (t ^ t << 1)) | 0;\n        };\n        me.x = 0;\n        me.y = 0;\n        me.z = 0;\n        me.w = 0;\n        me.v = 0;\n        if (seed === (seed | 0)) {\n            // Integer seed.\n            me.x = seed;\n        } else {\n            // String seed.\n            strseed += seed;\n        }\n        // Mix in string seed, then discard an initial batch of 64 values.\n        for(var k = 0; k < strseed.length + 64; k++){\n            me.x ^= strseed.charCodeAt(k) | 0;\n            if (k == strseed.length) {\n                me.d = me.x << 10 ^ me.x >>> 4;\n            }\n            me.next();\n        }\n    }\n    function copy(f, t) {\n        t.x = f.x;\n        t.y = f.y;\n        t.z = f.z;\n        t.w = f.w;\n        t.v = f.v;\n        t.d = f.d;\n        return t;\n    }\n    function impl(seed, opts) {\n        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {\n            return (xg.next() >>> 0) / 0x100000000;\n        };\n        prng.double = function() {\n            do {\n                var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 0x100000000, result = (top + bot) / (1 << 21);\n            }while (result === 0);\n            return result;\n        };\n        prng.int32 = xg.next;\n        prng.quick = prng;\n        if (state) {\n            if (typeof state == \"object\") copy(state, xg);\n            prng.state = function() {\n                return copy(xg, {});\n            };\n        }\n        return prng;\n    }\n    if (module1 && module1.exports) {\n        module1.exports = impl;\n    } else if (__webpack_require__.amdD && __webpack_require__.amdO) {\n        !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n            return impl;\n        }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {\n        this.xorwow = impl;\n    }\n})(this,  true && module, __webpack_require__.amdD // present with an AMD loader\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL2xpYi94b3J3b3cuanMiLCJtYXBwaW5ncyI6IjtBQUFBLGlHQUErRDtBQUMvRCxnRUFBZ0U7QUFFL0QsVUFBU0EsTUFBTSxFQUFFQyxPQUFNLEVBQUVDLE9BQU07SUFFaEMsU0FBU0MsT0FBT0MsSUFBSTtRQUNsQixJQUFJQyxLQUFLLElBQUksRUFBRUMsVUFBVTtRQUV6Qiw2QkFBNkI7UUFDN0JELEdBQUdFLElBQUksR0FBRztZQUNSLElBQUlDLElBQUtILEdBQUdJLENBQUMsR0FBSUosR0FBR0ksQ0FBQyxLQUFLO1lBQzFCSixHQUFHSSxDQUFDLEdBQUdKLEdBQUdLLENBQUM7WUFBRUwsR0FBR0ssQ0FBQyxHQUFHTCxHQUFHTSxDQUFDO1lBQUVOLEdBQUdNLENBQUMsR0FBR04sR0FBR08sQ0FBQztZQUFFUCxHQUFHTyxDQUFDLEdBQUdQLEdBQUdRLENBQUM7WUFDbEQsT0FBTyxDQUFDUixHQUFHUyxDQUFDLEdBQUlULEdBQUdTLENBQUMsR0FBRyxTQUFTLENBQUMsSUFDN0JULENBQUFBLEdBQUdRLENBQUMsR0FBRyxHQUFJQSxDQUFDLEdBQUlSLEdBQUdRLENBQUMsSUFBSSxJQUFPTCxDQUFBQSxJQUFLQSxLQUFLLENBQUMsQ0FBQyxJQUFLO1FBQ3REO1FBRUFILEdBQUdJLENBQUMsR0FBRztRQUNQSixHQUFHSyxDQUFDLEdBQUc7UUFDUEwsR0FBR00sQ0FBQyxHQUFHO1FBQ1BOLEdBQUdPLENBQUMsR0FBRztRQUNQUCxHQUFHUSxDQUFDLEdBQUc7UUFFUCxJQUFJVCxTQUFVQSxDQUFBQSxPQUFPLElBQUk7WUFDdkIsZ0JBQWdCO1lBQ2hCQyxHQUFHSSxDQUFDLEdBQUdMO1FBQ1QsT0FBTztZQUNMLGVBQWU7WUFDZkUsV0FBV0Y7UUFDYjtRQUVBLGtFQUFrRTtRQUNsRSxJQUFLLElBQUlXLElBQUksR0FBR0EsSUFBSVQsUUFBUVUsTUFBTSxHQUFHLElBQUlELElBQUs7WUFDNUNWLEdBQUdJLENBQUMsSUFBSUgsUUFBUVcsVUFBVSxDQUFDRixLQUFLO1lBQ2hDLElBQUlBLEtBQUtULFFBQVFVLE1BQU0sRUFBRTtnQkFDdkJYLEdBQUdTLENBQUMsR0FBR1QsR0FBR0ksQ0FBQyxJQUFJLEtBQUtKLEdBQUdJLENBQUMsS0FBSztZQUMvQjtZQUNBSixHQUFHRSxJQUFJO1FBQ1Q7SUFDRjtJQUVBLFNBQVNXLEtBQUtDLENBQUMsRUFBRVgsQ0FBQztRQUNoQkEsRUFBRUMsQ0FBQyxHQUFHVSxFQUFFVixDQUFDO1FBQ1RELEVBQUVFLENBQUMsR0FBR1MsRUFBRVQsQ0FBQztRQUNURixFQUFFRyxDQUFDLEdBQUdRLEVBQUVSLENBQUM7UUFDVEgsRUFBRUksQ0FBQyxHQUFHTyxFQUFFUCxDQUFDO1FBQ1RKLEVBQUVLLENBQUMsR0FBR00sRUFBRU4sQ0FBQztRQUNUTCxFQUFFTSxDQUFDLEdBQUdLLEVBQUVMLENBQUM7UUFDVCxPQUFPTjtJQUNUO0lBRUEsU0FBU1ksS0FBS2hCLElBQUksRUFBRWlCLElBQUk7UUFDdEIsSUFBSUMsS0FBSyxJQUFJbkIsT0FBT0MsT0FDaEJtQixRQUFRRixRQUFRQSxLQUFLRSxLQUFLLEVBQzFCQyxPQUFPO1lBQWEsT0FBTyxDQUFDRixHQUFHZixJQUFJLE9BQU8sS0FBSztRQUFhO1FBQ2hFaUIsS0FBS0MsTUFBTSxHQUFHO1lBQ1osR0FBRztnQkFDRCxJQUFJQyxNQUFNSixHQUFHZixJQUFJLE9BQU8sSUFDcEJvQixNQUFNLENBQUNMLEdBQUdmLElBQUksT0FBTyxLQUFLLGFBQzFCcUIsU0FBUyxDQUFDRixNQUFNQyxHQUFFLElBQU0sTUFBSyxFQUFDO1lBQ3BDLFFBQVNDLFdBQVcsR0FBRztZQUN2QixPQUFPQTtRQUNUO1FBQ0FKLEtBQUtLLEtBQUssR0FBR1AsR0FBR2YsSUFBSTtRQUNwQmlCLEtBQUtNLEtBQUssR0FBR047UUFDYixJQUFJRCxPQUFPO1lBQ1QsSUFBSSxPQUFPQSxTQUFVLFVBQVVMLEtBQUtLLE9BQU9EO1lBQzNDRSxLQUFLRCxLQUFLLEdBQUc7Z0JBQWEsT0FBT0wsS0FBS0ksSUFBSSxDQUFDO1lBQUk7UUFDakQ7UUFDQSxPQUFPRTtJQUNUO0lBRUEsSUFBSXZCLFdBQVVBLFFBQU84QixPQUFPLEVBQUU7UUFDNUI5QixRQUFPOEIsT0FBTyxHQUFHWDtJQUNuQixPQUFPLElBQUlsQix3QkFBQUEsSUFBVUEsd0JBQVUsRUFBRTtRQUMvQkEsbUNBQU87WUFBYSxPQUFPa0I7UUFBTSxDQUFDO0FBQUEsa0dBQUM7SUFDckMsT0FBTztRQUNMLElBQUksQ0FBQ2EsTUFBTSxHQUFHYjtJQUNoQjtBQUVBLEdBQ0UsSUFBSSxFQUNKLEtBQW1CLElBQVluQixRQUMvQix3QkFBdUNDLENBQUcsNkJBQTZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL2xpYi94b3J3b3cuanM/ZWMxMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBIEphdmFzY3JpcHQgaW1wbGVtZW50YWlvbiBvZiB0aGUgXCJ4b3J3b3dcIiBwcm5nIGFsZ29yaXRobSBieVxuLy8gR2VvcmdlIE1hcnNhZ2xpYS4gIFNlZSBodHRwOi8vd3d3LmpzdGF0c29mdC5vcmcvdjA4L2kxNC9wYXBlclxuXG4oZnVuY3Rpb24oZ2xvYmFsLCBtb2R1bGUsIGRlZmluZSkge1xuXG5mdW5jdGlvbiBYb3JHZW4oc2VlZCkge1xuICB2YXIgbWUgPSB0aGlzLCBzdHJzZWVkID0gJyc7XG5cbiAgLy8gU2V0IHVwIGdlbmVyYXRvciBmdW5jdGlvbi5cbiAgbWUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0ID0gKG1lLnggXiAobWUueCA+Pj4gMikpO1xuICAgIG1lLnggPSBtZS55OyBtZS55ID0gbWUuejsgbWUueiA9IG1lLnc7IG1lLncgPSBtZS52O1xuICAgIHJldHVybiAobWUuZCA9IChtZS5kICsgMzYyNDM3IHwgMCkpICtcbiAgICAgICAobWUudiA9IChtZS52IF4gKG1lLnYgPDwgNCkpIF4gKHQgXiAodCA8PCAxKSkpIHwgMDtcbiAgfTtcblxuICBtZS54ID0gMDtcbiAgbWUueSA9IDA7XG4gIG1lLnogPSAwO1xuICBtZS53ID0gMDtcbiAgbWUudiA9IDA7XG5cbiAgaWYgKHNlZWQgPT09IChzZWVkIHwgMCkpIHtcbiAgICAvLyBJbnRlZ2VyIHNlZWQuXG4gICAgbWUueCA9IHNlZWQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gU3RyaW5nIHNlZWQuXG4gICAgc3Ryc2VlZCArPSBzZWVkO1xuICB9XG5cbiAgLy8gTWl4IGluIHN0cmluZyBzZWVkLCB0aGVuIGRpc2NhcmQgYW4gaW5pdGlhbCBiYXRjaCBvZiA2NCB2YWx1ZXMuXG4gIGZvciAodmFyIGsgPSAwOyBrIDwgc3Ryc2VlZC5sZW5ndGggKyA2NDsgaysrKSB7XG4gICAgbWUueCBePSBzdHJzZWVkLmNoYXJDb2RlQXQoaykgfCAwO1xuICAgIGlmIChrID09IHN0cnNlZWQubGVuZ3RoKSB7XG4gICAgICBtZS5kID0gbWUueCA8PCAxMCBeIG1lLnggPj4+IDQ7XG4gICAgfVxuICAgIG1lLm5leHQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb3B5KGYsIHQpIHtcbiAgdC54ID0gZi54O1xuICB0LnkgPSBmLnk7XG4gIHQueiA9IGYuejtcbiAgdC53ID0gZi53O1xuICB0LnYgPSBmLnY7XG4gIHQuZCA9IGYuZDtcbiAgcmV0dXJuIHQ7XG59XG5cbmZ1bmN0aW9uIGltcGwoc2VlZCwgb3B0cykge1xuICB2YXIgeGcgPSBuZXcgWG9yR2VuKHNlZWQpLFxuICAgICAgc3RhdGUgPSBvcHRzICYmIG9wdHMuc3RhdGUsXG4gICAgICBwcm5nID0gZnVuY3Rpb24oKSB7IHJldHVybiAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwOyB9O1xuICBwcm5nLmRvdWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIGRvIHtcbiAgICAgIHZhciB0b3AgPSB4Zy5uZXh0KCkgPj4+IDExLFxuICAgICAgICAgIGJvdCA9ICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDAsXG4gICAgICAgICAgcmVzdWx0ID0gKHRvcCArIGJvdCkgLyAoMSA8PCAyMSk7XG4gICAgfSB3aGlsZSAocmVzdWx0ID09PSAwKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBwcm5nLmludDMyID0geGcubmV4dDtcbiAgcHJuZy5xdWljayA9IHBybmc7XG4gIGlmIChzdGF0ZSkge1xuICAgIGlmICh0eXBlb2Yoc3RhdGUpID09ICdvYmplY3QnKSBjb3B5KHN0YXRlLCB4Zyk7XG4gICAgcHJuZy5zdGF0ZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29weSh4Zywge30pOyB9XG4gIH1cbiAgcmV0dXJuIHBybmc7XG59XG5cbmlmIChtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBpbXBsO1xufSBlbHNlIGlmIChkZWZpbmUgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBpbXBsOyB9KTtcbn0gZWxzZSB7XG4gIHRoaXMueG9yd293ID0gaW1wbDtcbn1cblxufSkoXG4gIHRoaXMsXG4gICh0eXBlb2YgbW9kdWxlKSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUsICAgIC8vIHByZXNlbnQgaW4gbm9kZS5qc1xuICAodHlwZW9mIGRlZmluZSkgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUgICAvLyBwcmVzZW50IHdpdGggYW4gQU1EIGxvYWRlclxuKTtcblxuXG4iXSwibmFtZXMiOlsiZ2xvYmFsIiwibW9kdWxlIiwiZGVmaW5lIiwiWG9yR2VuIiwic2VlZCIsIm1lIiwic3Ryc2VlZCIsIm5leHQiLCJ0IiwieCIsInkiLCJ6IiwidyIsInYiLCJkIiwiayIsImxlbmd0aCIsImNoYXJDb2RlQXQiLCJjb3B5IiwiZiIsImltcGwiLCJvcHRzIiwieGciLCJzdGF0ZSIsInBybmciLCJkb3VibGUiLCJ0b3AiLCJib3QiLCJyZXN1bHQiLCJpbnQzMiIsInF1aWNrIiwiZXhwb3J0cyIsImFtZCIsInhvcndvdyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/seedrandom/lib/xorwow.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/seedrandom/seedrandom.js":
/*!***********************************************!*\
  !*** ./node_modules/seedrandom/seedrandom.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("var __WEBPACK_AMD_DEFINE_RESULT__;\n/*\nCopyright 2019 David Bau.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/ (function(global, pool, math) {\n    //\n    // The following constants are related to IEEE 754 limits.\n    //\n    var width = 256, chunks = 6, digits = 52, rngname = \"random\", startdenom = math.pow(width, chunks), significance = math.pow(2, digits), overflow = significance * 2, mask = width - 1, nodecrypto; // node.js crypto module, initialized at the bottom.\n    //\n    // seedrandom()\n    // This is the seedrandom function described above.\n    //\n    function seedrandom(seed, options, callback) {\n        var key = [];\n        options = options == true ? {\n            entropy: true\n        } : options || {};\n        // Flatten the seed string or build one from local entropy if needed.\n        var shortseed = mixkey(flatten(options.entropy ? [\n            seed,\n            tostring(pool)\n        ] : seed == null ? autoseed() : seed, 3), key);\n        // Use the seed to initialize an ARC4 generator.\n        var arc4 = new ARC4(key);\n        // This function returns a random double in [0, 1) that contains\n        // randomness in every bit of the mantissa of the IEEE 754 value.\n        var prng = function() {\n            var n = arc4.g(chunks), d = startdenom, x = 0; //   and no 'extra last byte'.\n            while(n < significance){\n                n = (n + x) * width; //   shifting numerator and\n                d *= width; //   denominator and generating a\n                x = arc4.g(1); //   new least-significant-byte.\n            }\n            while(n >= overflow){\n                n /= 2; //   last byte, shift everything\n                d /= 2; //   right using integer math until\n                x >>>= 1; //   we have exactly the desired bits.\n            }\n            return (n + x) / d; // Form the number within [0, 1).\n        };\n        prng.int32 = function() {\n            return arc4.g(4) | 0;\n        };\n        prng.quick = function() {\n            return arc4.g(4) / 0x100000000;\n        };\n        prng.double = prng;\n        // Mix the randomness into accumulated entropy.\n        mixkey(tostring(arc4.S), pool);\n        // Calling convention: what to return as a function of prng, seed, is_math.\n        return (options.pass || callback || function(prng, seed, is_math_call, state) {\n            if (state) {\n                // Load the arc4 state from the given state if it has an S array.\n                if (state.S) {\n                    copy(state, arc4);\n                }\n                // Only provide the .state method if requested via options.state.\n                prng.state = function() {\n                    return copy(arc4, {});\n                };\n            }\n            // If called as a method of Math (Math.seedrandom()), mutate\n            // Math.random because that is how seedrandom.js has worked since v1.0.\n            if (is_math_call) {\n                math[rngname] = prng;\n                return seed;\n            } else return prng;\n        })(prng, shortseed, \"global\" in options ? options.global : this == math, options.state);\n    }\n    //\n    // ARC4\n    //\n    // An ARC4 implementation.  The constructor takes a key in the form of\n    // an array of at most (width) integers that should be 0 <= x < (width).\n    //\n    // The g(count) method returns a pseudorandom integer that concatenates\n    // the next (count) outputs from ARC4.  Its return value is a number x\n    // that is in the range 0 <= x < (width ^ count).\n    //\n    function ARC4(key) {\n        var t, keylen = key.length, me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\n        // The empty key [] is treated as [0].\n        if (!keylen) {\n            key = [\n                keylen++\n            ];\n        }\n        // Set up S using the standard key scheduling algorithm.\n        while(i < width){\n            s[i] = i++;\n        }\n        for(i = 0; i < width; i++){\n            s[i] = s[j = mask & j + key[i % keylen] + (t = s[i])];\n            s[j] = t;\n        }\n        // The \"g\" method returns the next (count) outputs as one number.\n        (me.g = function(count) {\n            // Using instance members instead of closure state nearly doubles speed.\n            var t, r = 0, i = me.i, j = me.j, s = me.S;\n            while(count--){\n                t = s[i = mask & i + 1];\n                r = r * width + s[mask & (s[i] = s[j = mask & j + t]) + (s[j] = t)];\n            }\n            me.i = i;\n            me.j = j;\n            return r;\n        // For robust unpredictability, the function call below automatically\n        // discards an initial batch of values.  This is called RC4-drop[256].\n        // See http://google.com/search?q=rsa+fluhrer+response&btnI\n        })(width);\n    }\n    //\n    // copy()\n    // Copies internal state of ARC4 to or from a plain object.\n    //\n    function copy(f, t) {\n        t.i = f.i;\n        t.j = f.j;\n        t.S = f.S.slice();\n        return t;\n    }\n    ;\n    //\n    // flatten()\n    // Converts an object tree to nested arrays of strings.\n    //\n    function flatten(obj, depth) {\n        var result = [], typ = typeof obj, prop;\n        if (depth && typ == \"object\") {\n            for(prop in obj){\n                try {\n                    result.push(flatten(obj[prop], depth - 1));\n                } catch (e) {}\n            }\n        }\n        return result.length ? result : typ == \"string\" ? obj : obj + \"\\x00\";\n    }\n    //\n    // mixkey()\n    // Mixes a string seed into a key that is an array of integers, and\n    // returns a shortened string seed that is equivalent to the result key.\n    //\n    function mixkey(seed, key) {\n        var stringseed = seed + \"\", smear, j = 0;\n        while(j < stringseed.length){\n            key[mask & j] = mask & (smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++);\n        }\n        return tostring(key);\n    }\n    //\n    // autoseed()\n    // Returns an object for autoseeding, using window.crypto and Node crypto\n    // module if available.\n    //\n    function autoseed() {\n        try {\n            var out;\n            if (nodecrypto && (out = nodecrypto.randomBytes)) {\n                // The use of 'out' to remember randomBytes makes tight minified code.\n                out = out(width);\n            } else {\n                out = new Uint8Array(width);\n                (global.crypto || global.msCrypto).getRandomValues(out);\n            }\n            return tostring(out);\n        } catch (e) {\n            var browser = global.navigator, plugins = browser && browser.plugins;\n            return [\n                +new Date,\n                global,\n                plugins,\n                global.screen,\n                tostring(pool)\n            ];\n        }\n    }\n    //\n    // tostring()\n    // Converts an array of charcodes to a string\n    //\n    function tostring(a) {\n        return String.fromCharCode.apply(0, a);\n    }\n    //\n    // When seedrandom.js is loaded, we immediately mix a few bits\n    // from the built-in RNG into the entropy pool.  Because we do\n    // not want to interfere with deterministic PRNG state later,\n    // seedrandom will not call math.random on its own again after\n    // initialization.\n    //\n    mixkey(math.random(), pool);\n    //\n    // Nodejs and AMD support: export the implementation as a module using\n    // either convention.\n    //\n    if ( true && module.exports) {\n        module.exports = seedrandom;\n        // When in node.js, try using crypto package for autoseeding.\n        try {\n            nodecrypto = __webpack_require__(/*! crypto */ \"?840f\");\n        } catch (ex) {}\n    } else if (true) {\n        !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n            return seedrandom;\n        }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n// End anonymous scope, and pass initial values.\n})(// global: `self` in browsers (including strict mode and web workers),\n// otherwise `this` in Node and other environments\ntypeof self !== \"undefined\" ? self : void 0, [], Math // math: package containing random, pow, and seedrandom\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/seedrandom/seedrandom.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/page.tsx":
/*!**************************!*\
  !*** ./src/app/page.tsx ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Home; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var pocketbase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! pocketbase */ \"(app-pages-browser)/./node_modules/pocketbase/dist/pocketbase.es.mjs\");\n/* harmony import */ var random_words__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! random-words */ \"(app-pages-browser)/./node_modules/random-words/index.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\nfunction Home() {\n    _s();\n    const [messages, setMessages] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    const [user, setUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    const [input, setInput] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const effectRan = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!effectRan.current) {\n            const pb = new pocketbase__WEBPACK_IMPORTED_MODULE_2__[\"default\"](\"http://127.0.0.1:8090\");\n            pb.admins.authWithPassword(\"parker.graham1@outlook.ca\", \"password\");\n            createUser(pb);\n            getMessages(pb);\n            subscribeMessages(pb);\n        }\n        return ()=>{\n            effectRan.current = true;\n        };\n    }, []);\n    const getMessages = async (pb)=>{\n        const results = await pb.collection(\"messages\").getFullList();\n        for (let result of results){\n            const username = (await pb.collection(\"users\").getOne(result.user)).username;\n            result.username = username;\n        }\n        setMessages(results.map((r)=>{\n            return {\n                id: r.id,\n                content: r.content,\n                username: r.username,\n                time: r.created\n            };\n        }));\n    };\n    const subscribeMessages = async (pb)=>{\n        await pb.collection(\"messages\").subscribe(\"*\", async (e)=>{\n            await getMessages(pb);\n        });\n    };\n    const createUser = async (pb)=>{\n        const username = (0,random_words__WEBPACK_IMPORTED_MODULE_3__.generate)();\n        const user = await pb.collection(\"users\").create({\n            username\n        });\n        setUser({\n            id: user.id,\n            username: user.username\n        });\n    // setUser({ id: 'w3iacyzlhlickra', username: 'mad' });\n    };\n    const sendMessage = async ()=>{\n        const pb = new pocketbase__WEBPACK_IMPORTED_MODULE_2__[\"default\"](\"http://127.0.0.1:8090\");\n        const result = await pb.collection(\"messages\").create({\n            content: input,\n            user: user === null || user === void 0 ? void 0 : user.id\n        });\n        setInput(\"\");\n    };\n    const messagesEndRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const scrollToBottom = ()=>{\n        var _messagesEndRef_current;\n        (_messagesEndRef_current = messagesEndRef.current) === null || _messagesEndRef_current === void 0 ? void 0 : _messagesEndRef_current.scrollIntoView({\n            behavior: \"smooth\"\n        });\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        scrollToBottom();\n    }, [\n        messages\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"overflow-scroll\",\n                style: {\n                    height: \"85vh\"\n                },\n                children: [\n                    messages === null || messages === void 0 ? void 0 : messages.map((message)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: message.username == (user === null || user === void 0 ? void 0 : user.username) ? \"flex justify-end mx-10 my-5\" : \"flex mx-10 my-5\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"p-3 border-solid border-2 border-indigo-600 rounded-lg bg-indigo-600 text-white\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"flex items-center\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                className: \"font-bold text-lg mr-2\",\n                                                children: message.username\n                                            }, void 0, false, {\n                                                fileName: \"/Users/parkergraham/Documents/Programming/cpsc559-youchat/src/app/page.tsx\",\n                                                lineNumber: 84,\n                                                columnNumber: 17\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                className: \"text-sm text-grey\",\n                                                children: message.time.slice(10, 16)\n                                            }, void 0, false, {\n                                                fileName: \"/Users/parkergraham/Documents/Programming/cpsc559-youchat/src/app/page.tsx\",\n                                                lineNumber: 86,\n                                                columnNumber: 17\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/Users/parkergraham/Documents/Programming/cpsc559-youchat/src/app/page.tsx\",\n                                        lineNumber: 83,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        children: message.content\n                                    }, void 0, false, {\n                                        fileName: \"/Users/parkergraham/Documents/Programming/cpsc559-youchat/src/app/page.tsx\",\n                                        lineNumber: 88,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/parkergraham/Documents/Programming/cpsc559-youchat/src/app/page.tsx\",\n                                lineNumber: 82,\n                                columnNumber: 13\n                            }, this)\n                        }, message.id, false, {\n                            fileName: \"/Users/parkergraham/Documents/Programming/cpsc559-youchat/src/app/page.tsx\",\n                            lineNumber: 79,\n                            columnNumber: 11\n                        }, this)),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        ref: messagesEndRef\n                    }, void 0, false, {\n                        fileName: \"/Users/parkergraham/Documents/Programming/cpsc559-youchat/src/app/page.tsx\",\n                        lineNumber: 91,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/parkergraham/Documents/Programming/cpsc559-youchat/src/app/page.tsx\",\n                lineNumber: 77,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex m-10 absolute inset-x-0 bottom-0\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                        onChange: (e)=>setInput(e.currentTarget.value),\n                        onKeyDown: (e)=>{\n                            e.key == \"Enter\" && sendMessage();\n                        },\n                        value: input,\n                        type: \"text\",\n                        className: \"w-full rounded-lg border-0 py-1.5 pl-5 pr-20 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\n                    }, void 0, false, {\n                        fileName: \"/Users/parkergraham/Documents/Programming/cpsc559-youchat/src/app/page.tsx\",\n                        lineNumber: 94,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        className: \"ml-5\",\n                        onClick: sendMessage,\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                            xmlns: \"http://www.w3.org/2000/svg\",\n                            fill: \"none\",\n                            viewBox: \"0 0 24 24\",\n                            strokeWidth: 1.5,\n                            stroke: \"currentColor\",\n                            className: \"w-6 h-6\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                strokeLinecap: \"round\",\n                                strokeLinejoin: \"round\",\n                                d: \"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\"\n                            }, void 0, false, {\n                                fileName: \"/Users/parkergraham/Documents/Programming/cpsc559-youchat/src/app/page.tsx\",\n                                lineNumber: 105,\n                                columnNumber: 13\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/parkergraham/Documents/Programming/cpsc559-youchat/src/app/page.tsx\",\n                            lineNumber: 104,\n                            columnNumber: 11\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/Users/parkergraham/Documents/Programming/cpsc559-youchat/src/app/page.tsx\",\n                        lineNumber: 103,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/parkergraham/Documents/Programming/cpsc559-youchat/src/app/page.tsx\",\n                lineNumber: 93,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/parkergraham/Documents/Programming/cpsc559-youchat/src/app/page.tsx\",\n        lineNumber: 76,\n        columnNumber: 5\n    }, this);\n}\n_s(Home, \"oloUrjCxCFdEvvxjq4HzeVfd52c=\");\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/page.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/pocketbase/dist/pocketbase.es.mjs":
/*!********************************************************!*\
  !*** ./node_modules/pocketbase/dist/pocketbase.es.mjs ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdminService: function() { return /* binding */ AdminService; },\n/* harmony export */   AsyncAuthStore: function() { return /* binding */ AsyncAuthStore; },\n/* harmony export */   BaseAuthStore: function() { return /* binding */ BaseAuthStore; },\n/* harmony export */   ClientResponseError: function() { return /* binding */ ClientResponseError; },\n/* harmony export */   CollectionService: function() { return /* binding */ CollectionService; },\n/* harmony export */   CrudService: function() { return /* binding */ CrudService; },\n/* harmony export */   LocalAuthStore: function() { return /* binding */ LocalAuthStore; },\n/* harmony export */   LogService: function() { return /* binding */ LogService; },\n/* harmony export */   RealtimeService: function() { return /* binding */ RealtimeService; },\n/* harmony export */   RecordService: function() { return /* binding */ RecordService; },\n/* harmony export */   cookieParse: function() { return /* binding */ cookieParse; },\n/* harmony export */   cookieSerialize: function() { return /* binding */ cookieSerialize; },\n/* harmony export */   \"default\": function() { return /* binding */ Client; },\n/* harmony export */   getTokenPayload: function() { return /* binding */ getTokenPayload; },\n/* harmony export */   isTokenExpired: function() { return /* binding */ isTokenExpired; },\n/* harmony export */   normalizeUnknownQueryParams: function() { return /* binding */ normalizeUnknownQueryParams; }\n/* harmony export */ });\nclass ClientResponseError extends Error {\n    get data() {\n        return this.response;\n    }\n    toJSON() {\n        return {\n            ...this\n        };\n    }\n    constructor(e){\n        var _this_response, _this_originalError_cause_message, _this_originalError_cause, _this_originalError;\n        super(\"ClientResponseError\"), this.url = \"\", this.status = 0, this.response = {}, this.isAbort = !1, this.originalError = null, Object.setPrototypeOf(this, ClientResponseError.prototype), null !== e && \"object\" == typeof e && (this.url = \"string\" == typeof e.url ? e.url : \"\", this.status = \"number\" == typeof e.status ? e.status : 0, this.isAbort = !!e.isAbort, this.originalError = e.originalError, null !== e.response && \"object\" == typeof e.response ? this.response = e.response : null !== e.data && \"object\" == typeof e.data ? this.response = e.data : this.response = {}), this.originalError || e instanceof ClientResponseError || (this.originalError = e), \"undefined\" != typeof DOMException && e instanceof DOMException && (this.isAbort = !0), this.name = \"ClientResponseError \" + this.status, this.message = (_this_response = this.response) === null || _this_response === void 0 ? void 0 : _this_response.message, this.message || (this.isAbort ? this.message = \"The request was autocancelled. You can find more info in https://github.com/pocketbase/js-sdk#auto-cancellation.\" : ((_this_originalError = this.originalError) === null || _this_originalError === void 0 ? void 0 : (_this_originalError_cause = _this_originalError.cause) === null || _this_originalError_cause === void 0 ? void 0 : (_this_originalError_cause_message = _this_originalError_cause.message) === null || _this_originalError_cause_message === void 0 ? void 0 : _this_originalError_cause_message.includes(\"ECONNREFUSED ::1\")) ? this.message = \"Failed to connect to the PocketBase server. Try changing the SDK URL from localhost to 127.0.0.1 (https://github.com/pocketbase/js-sdk/issues/21).\" : this.message = \"Something went wrong while processing your request.\");\n    }\n}\nconst e = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\nfunction cookieParse(e, t) {\n    const s = {};\n    if (\"string\" != typeof e) return s;\n    const i = Object.assign({}, t || {}).decode || defaultDecode;\n    let n = 0;\n    for(; n < e.length;){\n        const t = e.indexOf(\"=\", n);\n        if (-1 === t) break;\n        let r = e.indexOf(\";\", n);\n        if (-1 === r) r = e.length;\n        else if (r < t) {\n            n = e.lastIndexOf(\";\", t - 1) + 1;\n            continue;\n        }\n        const o = e.slice(n, t).trim();\n        if (void 0 === s[o]) {\n            let n = e.slice(t + 1, r).trim();\n            34 === n.charCodeAt(0) && (n = n.slice(1, -1));\n            try {\n                s[o] = i(n);\n            } catch (e) {\n                s[o] = n;\n            }\n        }\n        n = r + 1;\n    }\n    return s;\n}\nfunction cookieSerialize(t, s, i) {\n    const n = Object.assign({}, i || {}), r = n.encode || defaultEncode;\n    if (!e.test(t)) throw new TypeError(\"argument name is invalid\");\n    const o = r(s);\n    if (o && !e.test(o)) throw new TypeError(\"argument val is invalid\");\n    let a = t + \"=\" + o;\n    if (null != n.maxAge) {\n        const e = n.maxAge - 0;\n        if (isNaN(e) || !isFinite(e)) throw new TypeError(\"option maxAge is invalid\");\n        a += \"; Max-Age=\" + Math.floor(e);\n    }\n    if (n.domain) {\n        if (!e.test(n.domain)) throw new TypeError(\"option domain is invalid\");\n        a += \"; Domain=\" + n.domain;\n    }\n    if (n.path) {\n        if (!e.test(n.path)) throw new TypeError(\"option path is invalid\");\n        a += \"; Path=\" + n.path;\n    }\n    if (n.expires) {\n        if (!function isDate(e) {\n            return \"[object Date]\" === Object.prototype.toString.call(e) || e instanceof Date;\n        }(n.expires) || isNaN(n.expires.valueOf())) throw new TypeError(\"option expires is invalid\");\n        a += \"; Expires=\" + n.expires.toUTCString();\n    }\n    if (n.httpOnly && (a += \"; HttpOnly\"), n.secure && (a += \"; Secure\"), n.priority) {\n        switch(\"string\" == typeof n.priority ? n.priority.toLowerCase() : n.priority){\n            case \"low\":\n                a += \"; Priority=Low\";\n                break;\n            case \"medium\":\n                a += \"; Priority=Medium\";\n                break;\n            case \"high\":\n                a += \"; Priority=High\";\n                break;\n            default:\n                throw new TypeError(\"option priority is invalid\");\n        }\n    }\n    if (n.sameSite) {\n        switch(\"string\" == typeof n.sameSite ? n.sameSite.toLowerCase() : n.sameSite){\n            case !0:\n                a += \"; SameSite=Strict\";\n                break;\n            case \"lax\":\n                a += \"; SameSite=Lax\";\n                break;\n            case \"strict\":\n                a += \"; SameSite=Strict\";\n                break;\n            case \"none\":\n                a += \"; SameSite=None\";\n                break;\n            default:\n                throw new TypeError(\"option sameSite is invalid\");\n        }\n    }\n    return a;\n}\nfunction defaultDecode(e) {\n    return -1 !== e.indexOf(\"%\") ? decodeURIComponent(e) : e;\n}\nfunction defaultEncode(e) {\n    return encodeURIComponent(e);\n}\nlet t;\nfunction getTokenPayload(e) {\n    if (e) try {\n        const s = decodeURIComponent(t(e.split(\".\")[1]).split(\"\").map(function(e) {\n            return \"%\" + (\"00\" + e.charCodeAt(0).toString(16)).slice(-2);\n        }).join(\"\"));\n        return JSON.parse(s) || {};\n    } catch (e) {}\n    return {};\n}\nfunction isTokenExpired(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    let s = getTokenPayload(e);\n    return !(Object.keys(s).length > 0 && (!s.exp || s.exp - t > Date.now() / 1e3));\n}\nt = \"function\" == typeof atob ? atob : (e)=>{\n    let t = String(e).replace(/=+$/, \"\");\n    if (t.length % 4 == 1) throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n    for(var s, i, n = 0, r = 0, o = \"\"; i = t.charAt(r++); ~i && (s = n % 4 ? 64 * s + i : i, n++ % 4) ? o += String.fromCharCode(255 & s >> (-2 * n & 6)) : 0)i = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(i);\n    return o;\n};\nconst s = \"pb_auth\";\nclass BaseAuthStore {\n    get token() {\n        return this.baseToken;\n    }\n    get model() {\n        return this.baseModel;\n    }\n    get isValid() {\n        return !isTokenExpired(this.token);\n    }\n    get isAdmin() {\n        return \"admin\" === getTokenPayload(this.token).type;\n    }\n    get isAuthRecord() {\n        return \"authRecord\" === getTokenPayload(this.token).type;\n    }\n    save(e, t) {\n        this.baseToken = e || \"\", this.baseModel = t || null, this.triggerChange();\n    }\n    clear() {\n        this.baseToken = \"\", this.baseModel = null, this.triggerChange();\n    }\n    loadFromCookie(e) {\n        let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : s;\n        const i = cookieParse(e || \"\")[t] || \"\";\n        let n = {};\n        try {\n            n = JSON.parse(i), (null === typeof n || \"object\" != typeof n || Array.isArray(n)) && (n = {});\n        } catch (e) {}\n        this.save(n.token || \"\", n.model || null);\n    }\n    exportToCookie(e) {\n        let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : s;\n        const i = {\n            secure: !0,\n            sameSite: !0,\n            httpOnly: !0,\n            path: \"/\"\n        }, n = getTokenPayload(this.token);\n        i.expires = (n === null || n === void 0 ? void 0 : n.exp) ? new Date(1e3 * n.exp) : new Date(\"1970-01-01\"), e = Object.assign({}, i, e);\n        const r = {\n            token: this.token,\n            model: this.model ? JSON.parse(JSON.stringify(this.model)) : null\n        };\n        let o = cookieSerialize(t, JSON.stringify(r), e);\n        const a = \"undefined\" != typeof Blob ? new Blob([\n            o\n        ]).size : o.length;\n        if (r.model && a > 4096) {\n            var _r_model, _r_model1;\n            r.model = {\n                id: r === null || r === void 0 ? void 0 : (_r_model = r.model) === null || _r_model === void 0 ? void 0 : _r_model.id,\n                email: r === null || r === void 0 ? void 0 : (_r_model1 = r.model) === null || _r_model1 === void 0 ? void 0 : _r_model1.email\n            };\n            const s = [\n                \"collectionId\",\n                \"username\",\n                \"verified\"\n            ];\n            for(const e in this.model)s.includes(e) && (r.model[e] = this.model[e]);\n            o = cookieSerialize(t, JSON.stringify(r), e);\n        }\n        return o;\n    }\n    onChange(e) {\n        let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;\n        return this._onChangeCallbacks.push(e), t && e(this.token, this.model), ()=>{\n            for(let t = this._onChangeCallbacks.length - 1; t >= 0; t--)if (this._onChangeCallbacks[t] == e) return delete this._onChangeCallbacks[t], void this._onChangeCallbacks.splice(t, 1);\n        };\n    }\n    triggerChange() {\n        for (const e of this._onChangeCallbacks)e && e(this.token, this.model);\n    }\n    constructor(){\n        this.baseToken = \"\", this.baseModel = null, this._onChangeCallbacks = [];\n    }\n}\nclass LocalAuthStore extends BaseAuthStore {\n    get token() {\n        return (this._storageGet(this.storageKey) || {}).token || \"\";\n    }\n    get model() {\n        return (this._storageGet(this.storageKey) || {}).model || null;\n    }\n    save(e, t) {\n        this._storageSet(this.storageKey, {\n            token: e,\n            model: t\n        }), super.save(e, t);\n    }\n    clear() {\n        this._storageRemove(this.storageKey), super.clear();\n    }\n    _storageGet(e) {\n        var _window;\n        if ( true && ((_window = window) === null || _window === void 0 ? void 0 : _window.localStorage)) {\n            const t = window.localStorage.getItem(e) || \"\";\n            try {\n                return JSON.parse(t);\n            } catch (e) {\n                return t;\n            }\n        }\n        return this.storageFallback[e];\n    }\n    _storageSet(e, t) {\n        var _window;\n        if ( true && ((_window = window) === null || _window === void 0 ? void 0 : _window.localStorage)) {\n            let s = t;\n            \"string\" != typeof t && (s = JSON.stringify(t)), window.localStorage.setItem(e, s);\n        } else this.storageFallback[e] = t;\n    }\n    _storageRemove(e) {\n        var _window, _window_localStorage;\n         true && ((_window = window) === null || _window === void 0 ? void 0 : _window.localStorage) && ((_window_localStorage = window.localStorage) === null || _window_localStorage === void 0 ? void 0 : _window_localStorage.removeItem(e)), delete this.storageFallback[e];\n    }\n    _bindStorageEvent() {\n        var _window;\n         true && ((_window = window) === null || _window === void 0 ? void 0 : _window.localStorage) && window.addEventListener && window.addEventListener(\"storage\", (e)=>{\n            if (e.key != this.storageKey) return;\n            const t = this._storageGet(this.storageKey) || {};\n            super.save(t.token || \"\", t.model || null);\n        });\n    }\n    constructor(e = \"pocketbase_auth\"){\n        super(), this.storageFallback = {}, this.storageKey = e, this._bindStorageEvent();\n    }\n}\nclass BaseService {\n    constructor(e){\n        this.client = e;\n    }\n}\nclass SettingsService extends BaseService {\n    async getAll(e) {\n        return e = Object.assign({\n            method: \"GET\"\n        }, e), this.client.send(\"/api/settings\", e);\n    }\n    async update(e, t) {\n        return t = Object.assign({\n            method: \"PATCH\",\n            body: e\n        }, t), this.client.send(\"/api/settings\", t);\n    }\n    async testS3() {\n        let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"storage\", t = arguments.length > 1 ? arguments[1] : void 0;\n        return t = Object.assign({\n            method: \"POST\",\n            body: {\n                filesystem: e\n            }\n        }, t), this.client.send(\"/api/settings/test/s3\", t).then(()=>!0);\n    }\n    async testEmail(e, t, s) {\n        return s = Object.assign({\n            method: \"POST\",\n            body: {\n                email: e,\n                template: t\n            }\n        }, s), this.client.send(\"/api/settings/test/email\", s).then(()=>!0);\n    }\n    async generateAppleClientSecret(e, t, s, i, n, r) {\n        return r = Object.assign({\n            method: \"POST\",\n            body: {\n                clientId: e,\n                teamId: t,\n                keyId: s,\n                privateKey: i,\n                duration: n\n            }\n        }, r), this.client.send(\"/api/settings/apple/generate-client-secret\", r);\n    }\n}\nclass CrudService extends BaseService {\n    decode(e) {\n        return e;\n    }\n    async getFullList(e, t) {\n        if (\"number\" == typeof e) return this._getFullList(e, t);\n        let s = 500;\n        return (t = Object.assign({}, e, t)).batch && (s = t.batch, delete t.batch), this._getFullList(s, t);\n    }\n    async getList() {\n        let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 30, s = arguments.length > 2 ? arguments[2] : void 0;\n        return (s = Object.assign({\n            method: \"GET\"\n        }, s)).query = Object.assign({\n            page: e,\n            perPage: t\n        }, s.query), this.client.send(this.baseCrudPath, s).then((e)=>{\n            var _e_items;\n            return e.items = ((_e_items = e.items) === null || _e_items === void 0 ? void 0 : _e_items.map((e)=>this.decode(e))) || [], e;\n        });\n    }\n    async getFirstListItem(e, t) {\n        return (t = Object.assign({\n            requestKey: \"one_by_filter_\" + this.baseCrudPath + \"_\" + e\n        }, t)).query = Object.assign({\n            filter: e,\n            skipTotal: 1\n        }, t.query), this.getList(1, 1, t).then((e)=>{\n            var _e_items;\n            if (!(e === null || e === void 0 ? void 0 : (_e_items = e.items) === null || _e_items === void 0 ? void 0 : _e_items.length)) throw new ClientResponseError({\n                status: 404,\n                response: {\n                    code: 404,\n                    message: \"The requested resource wasn't found.\",\n                    data: {}\n                }\n            });\n            return e.items[0];\n        });\n    }\n    async getOne(e, t) {\n        if (!e) throw new ClientResponseError({\n            url: this.client.buildUrl(this.baseCrudPath + \"/\"),\n            status: 404,\n            response: {\n                code: 404,\n                message: \"Missing required record id.\",\n                data: {}\n            }\n        });\n        return t = Object.assign({\n            method: \"GET\"\n        }, t), this.client.send(this.baseCrudPath + \"/\" + encodeURIComponent(e), t).then((e)=>this.decode(e));\n    }\n    async create(e, t) {\n        return t = Object.assign({\n            method: \"POST\",\n            body: e\n        }, t), this.client.send(this.baseCrudPath, t).then((e)=>this.decode(e));\n    }\n    async update(e, t, s) {\n        return s = Object.assign({\n            method: \"PATCH\",\n            body: t\n        }, s), this.client.send(this.baseCrudPath + \"/\" + encodeURIComponent(e), s).then((e)=>this.decode(e));\n    }\n    async delete(e, t) {\n        return t = Object.assign({\n            method: \"DELETE\"\n        }, t), this.client.send(this.baseCrudPath + \"/\" + encodeURIComponent(e), t).then(()=>!0);\n    }\n    _getFullList() {\n        let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 500, t = arguments.length > 1 ? arguments[1] : void 0;\n        (t = t || {}).query = Object.assign({\n            skipTotal: 1\n        }, t.query);\n        let s = [], request = async (i)=>this.getList(i, e || 500, t).then((e)=>{\n                const t = e.items;\n                return s = s.concat(t), t.length == e.perPage ? request(i + 1) : s;\n            });\n        return request(1);\n    }\n}\nfunction normalizeLegacyOptionsArgs(e, t, s, i) {\n    const n = void 0 !== i;\n    return n || void 0 !== s ? n ? (console.warn(e), t.body = Object.assign({}, t.body, s), t.query = Object.assign({}, t.query, i), t) : Object.assign(t, s) : t;\n}\nfunction resetAutoRefresh(e) {\n    var _e__resetAutoRefresh;\n    (_e__resetAutoRefresh = e._resetAutoRefresh) === null || _e__resetAutoRefresh === void 0 ? void 0 : _e__resetAutoRefresh.call(e);\n}\nclass AdminService extends CrudService {\n    get baseCrudPath() {\n        return \"/api/admins\";\n    }\n    async update(e, t, s) {\n        return super.update(e, t, s).then((e)=>{\n            var _this_client_authStore_model, _this_client_authStore_model1;\n            return ((_this_client_authStore_model = this.client.authStore.model) === null || _this_client_authStore_model === void 0 ? void 0 : _this_client_authStore_model.id) === e.id && void 0 === ((_this_client_authStore_model1 = this.client.authStore.model) === null || _this_client_authStore_model1 === void 0 ? void 0 : _this_client_authStore_model1.collectionId) && this.client.authStore.save(this.client.authStore.token, e), e;\n        });\n    }\n    async delete(e, t) {\n        return super.delete(e, t).then((t)=>{\n            var _this_client_authStore_model, _this_client_authStore_model1;\n            return t && ((_this_client_authStore_model = this.client.authStore.model) === null || _this_client_authStore_model === void 0 ? void 0 : _this_client_authStore_model.id) === e && void 0 === ((_this_client_authStore_model1 = this.client.authStore.model) === null || _this_client_authStore_model1 === void 0 ? void 0 : _this_client_authStore_model1.collectionId) && this.client.authStore.clear(), t;\n        });\n    }\n    authResponse(e) {\n        const t = this.decode((e === null || e === void 0 ? void 0 : e.admin) || {});\n        return (e === null || e === void 0 ? void 0 : e.token) && (e === null || e === void 0 ? void 0 : e.admin) && this.client.authStore.save(e.token, t), Object.assign({}, e, {\n            token: (e === null || e === void 0 ? void 0 : e.token) || \"\",\n            admin: t\n        });\n    }\n    async authWithPassword(e, t, s, i) {\n        let n = {\n            method: \"POST\",\n            body: {\n                identity: e,\n                password: t\n            }\n        };\n        n = normalizeLegacyOptionsArgs(\"This form of authWithPassword(email, pass, body?, query?) is deprecated. Consider replacing it with authWithPassword(email, pass, options?).\", n, s, i);\n        const r = n.autoRefreshThreshold;\n        delete n.autoRefreshThreshold, n.autoRefresh || resetAutoRefresh(this.client);\n        let o = await this.client.send(this.baseCrudPath + \"/auth-with-password\", n);\n        return o = this.authResponse(o), r && function registerAutoRefresh(e, t, s, i) {\n            resetAutoRefresh(e);\n            const n = e.beforeSend, r = e.authStore.model, o = e.authStore.onChange((t, s)=>{\n                (!t || (s === null || s === void 0 ? void 0 : s.id) != (r === null || r === void 0 ? void 0 : r.id) || ((s === null || s === void 0 ? void 0 : s.collectionId) || (r === null || r === void 0 ? void 0 : r.collectionId)) && (s === null || s === void 0 ? void 0 : s.collectionId) != (r === null || r === void 0 ? void 0 : r.collectionId)) && resetAutoRefresh(e);\n            });\n            e._resetAutoRefresh = function() {\n                o(), e.beforeSend = n, delete e._resetAutoRefresh;\n            }, e.beforeSend = async (r, o)=>{\n                var _o_query;\n                const a = e.authStore.token;\n                if ((_o_query = o.query) === null || _o_query === void 0 ? void 0 : _o_query.autoRefresh) return n ? n(r, o) : {\n                    url: r,\n                    sendOptions: o\n                };\n                let c = e.authStore.isValid;\n                if (c && isTokenExpired(e.authStore.token, t)) try {\n                    await s();\n                } catch (e) {\n                    c = !1;\n                }\n                c || await i();\n                const l = o.headers || {};\n                for(let t in l)if (\"authorization\" == t.toLowerCase() && a == l[t] && e.authStore.token) {\n                    l[t] = e.authStore.token;\n                    break;\n                }\n                return o.headers = l, n ? n(r, o) : {\n                    url: r,\n                    sendOptions: o\n                };\n            };\n        }(this.client, r, ()=>this.authRefresh({\n                autoRefresh: !0\n            }), ()=>this.authWithPassword(e, t, Object.assign({\n                autoRefresh: !0\n            }, n))), o;\n    }\n    async authRefresh(e, t) {\n        let s = {\n            method: \"POST\"\n        };\n        return s = normalizeLegacyOptionsArgs(\"This form of authRefresh(body?, query?) is deprecated. Consider replacing it with authRefresh(options?).\", s, e, t), this.client.send(this.baseCrudPath + \"/auth-refresh\", s).then(this.authResponse.bind(this));\n    }\n    async requestPasswordReset(e, t, s) {\n        let i = {\n            method: \"POST\",\n            body: {\n                email: e\n            }\n        };\n        return i = normalizeLegacyOptionsArgs(\"This form of requestPasswordReset(email, body?, query?) is deprecated. Consider replacing it with requestPasswordReset(email, options?).\", i, t, s), this.client.send(this.baseCrudPath + \"/request-password-reset\", i).then(()=>!0);\n    }\n    async confirmPasswordReset(e, t, s, i, n) {\n        let r = {\n            method: \"POST\",\n            body: {\n                token: e,\n                password: t,\n                passwordConfirm: s\n            }\n        };\n        return r = normalizeLegacyOptionsArgs(\"This form of confirmPasswordReset(resetToken, password, passwordConfirm, body?, query?) is deprecated. Consider replacing it with confirmPasswordReset(resetToken, password, passwordConfirm, options?).\", r, i, n), this.client.send(this.baseCrudPath + \"/confirm-password-reset\", r).then(()=>!0);\n    }\n}\nconst i = [\n    \"requestKey\",\n    \"$cancelKey\",\n    \"$autoCancel\",\n    \"fetch\",\n    \"headers\",\n    \"body\",\n    \"query\",\n    \"params\",\n    \"cache\",\n    \"credentials\",\n    \"headers\",\n    \"integrity\",\n    \"keepalive\",\n    \"method\",\n    \"mode\",\n    \"redirect\",\n    \"referrer\",\n    \"referrerPolicy\",\n    \"signal\",\n    \"window\"\n];\nfunction normalizeUnknownQueryParams(e) {\n    if (e) {\n        e.query = e.query || {};\n        for(let t in e)i.includes(t) || (e.query[t] = e[t], delete e[t]);\n    }\n}\nclass RealtimeService extends BaseService {\n    get isConnected() {\n        return !!this.eventSource && !!this.clientId && !this.pendingConnects.length;\n    }\n    async subscribe(e, t, s) {\n        var _this_eventSource;\n        if (!e) throw new Error(\"topic must be set.\");\n        let i = e;\n        if (s) {\n            normalizeUnknownQueryParams(s);\n            const e = \"options=\" + encodeURIComponent(JSON.stringify({\n                query: s.query,\n                headers: s.headers\n            }));\n            i += (i.includes(\"?\") ? \"&\" : \"?\") + e;\n        }\n        const listener = function(e) {\n            const s = e;\n            let i;\n            try {\n                i = JSON.parse(s === null || s === void 0 ? void 0 : s.data);\n            } catch (e) {}\n            t(i || {});\n        };\n        return this.subscriptions[i] || (this.subscriptions[i] = []), this.subscriptions[i].push(listener), this.isConnected ? 1 === this.subscriptions[i].length ? await this.submitSubscriptions() : (_this_eventSource = this.eventSource) === null || _this_eventSource === void 0 ? void 0 : _this_eventSource.addEventListener(i, listener) : await this.connect(), async ()=>this.unsubscribeByTopicAndListener(e, listener);\n    }\n    async unsubscribe(e) {\n        let t = !1;\n        if (e) {\n            const s = this.getSubscriptionsByTopic(e);\n            for(let e in s)if (this.hasSubscriptionListeners(e)) {\n                var _this_eventSource;\n                for (let t of this.subscriptions[e])(_this_eventSource = this.eventSource) === null || _this_eventSource === void 0 ? void 0 : _this_eventSource.removeEventListener(e, t);\n                delete this.subscriptions[e], t || (t = !0);\n            }\n        } else this.subscriptions = {};\n        this.hasSubscriptionListeners() ? t && await this.submitSubscriptions() : this.disconnect();\n    }\n    async unsubscribeByPrefix(e) {\n        let t = !1;\n        for(let s in this.subscriptions)if ((s + \"?\").startsWith(e)) {\n            var _this_eventSource;\n            t = !0;\n            for (let e of this.subscriptions[s])(_this_eventSource = this.eventSource) === null || _this_eventSource === void 0 ? void 0 : _this_eventSource.removeEventListener(s, e);\n            delete this.subscriptions[s];\n        }\n        t && (this.hasSubscriptionListeners() ? await this.submitSubscriptions() : this.disconnect());\n    }\n    async unsubscribeByTopicAndListener(e, t) {\n        let s = !1;\n        const i = this.getSubscriptionsByTopic(e);\n        for(let e in i){\n            var _this_eventSource;\n            if (!Array.isArray(this.subscriptions[e]) || !this.subscriptions[e].length) continue;\n            let i = !1;\n            for(let s = this.subscriptions[e].length - 1; s >= 0; s--)this.subscriptions[e][s] === t && (i = !0, delete this.subscriptions[e][s], this.subscriptions[e].splice(s, 1), (_this_eventSource = this.eventSource) === null || _this_eventSource === void 0 ? void 0 : _this_eventSource.removeEventListener(e, t));\n            i && (this.subscriptions[e].length || delete this.subscriptions[e], s || this.hasSubscriptionListeners(e) || (s = !0));\n        }\n        this.hasSubscriptionListeners() ? s && await this.submitSubscriptions() : this.disconnect();\n    }\n    hasSubscriptionListeners(e) {\n        var _this_subscriptions_e, _this_subscriptions_e1;\n        if (this.subscriptions = this.subscriptions || {}, e) return !!((_this_subscriptions_e = this.subscriptions[e]) === null || _this_subscriptions_e === void 0 ? void 0 : _this_subscriptions_e.length);\n        for(let e in this.subscriptions)if ((_this_subscriptions_e1 = this.subscriptions[e]) === null || _this_subscriptions_e1 === void 0 ? void 0 : _this_subscriptions_e1.length) return !0;\n        return !1;\n    }\n    async submitSubscriptions() {\n        if (this.clientId) return this.addAllSubscriptionListeners(), this.lastSentSubscriptions = this.getNonEmptySubscriptionKeys(), this.client.send(\"/api/realtime\", {\n            method: \"POST\",\n            body: {\n                clientId: this.clientId,\n                subscriptions: this.lastSentSubscriptions\n            },\n            requestKey: this.getSubscriptionsCancelKey()\n        }).catch((e)=>{\n            if (!(e === null || e === void 0 ? void 0 : e.isAbort)) throw e;\n        });\n    }\n    getSubscriptionsCancelKey() {\n        return \"realtime_\" + this.clientId;\n    }\n    getSubscriptionsByTopic(e) {\n        const t = {};\n        e = e.includes(\"?\") ? e : e + \"?\";\n        for(let s in this.subscriptions)(s + \"?\").startsWith(e) && (t[s] = this.subscriptions[s]);\n        return t;\n    }\n    getNonEmptySubscriptionKeys() {\n        const e = [];\n        for(let t in this.subscriptions)this.subscriptions[t].length && e.push(t);\n        return e;\n    }\n    addAllSubscriptionListeners() {\n        if (this.eventSource) {\n            this.removeAllSubscriptionListeners();\n            for(let e in this.subscriptions)for (let t of this.subscriptions[e])this.eventSource.addEventListener(e, t);\n        }\n    }\n    removeAllSubscriptionListeners() {\n        if (this.eventSource) for(let e in this.subscriptions)for (let t of this.subscriptions[e])this.eventSource.removeEventListener(e, t);\n    }\n    async connect() {\n        if (!(this.reconnectAttempts > 0)) return new Promise((e, t)=>{\n            this.pendingConnects.push({\n                resolve: e,\n                reject: t\n            }), this.pendingConnects.length > 1 || this.initConnect();\n        });\n    }\n    initConnect() {\n        this.disconnect(!0), clearTimeout(this.connectTimeoutId), this.connectTimeoutId = setTimeout(()=>{\n            this.connectErrorHandler(new Error(\"EventSource connect took too long.\"));\n        }, this.maxConnectTimeout), this.eventSource = new EventSource(this.client.buildUrl(\"/api/realtime\")), this.eventSource.onerror = (e)=>{\n            this.connectErrorHandler(new Error(\"Failed to establish realtime connection.\"));\n        }, this.eventSource.addEventListener(\"PB_CONNECT\", (e)=>{\n            const t = e;\n            this.clientId = t === null || t === void 0 ? void 0 : t.lastEventId, this.submitSubscriptions().then(async ()=>{\n                let e = 3;\n                for(; this.hasUnsentSubscriptions() && e > 0;)e--, await this.submitSubscriptions();\n            }).then(()=>{\n                for (let e of this.pendingConnects)e.resolve();\n                this.pendingConnects = [], this.reconnectAttempts = 0, clearTimeout(this.reconnectTimeoutId), clearTimeout(this.connectTimeoutId);\n                const t = this.getSubscriptionsByTopic(\"PB_CONNECT\");\n                for(let s in t)for (let i of t[s])i(e);\n            }).catch((e)=>{\n                this.clientId = \"\", this.connectErrorHandler(e);\n            });\n        });\n    }\n    hasUnsentSubscriptions() {\n        const e = this.getNonEmptySubscriptionKeys();\n        if (e.length != this.lastSentSubscriptions.length) return !0;\n        for (const t of e)if (!this.lastSentSubscriptions.includes(t)) return !0;\n        return !1;\n    }\n    connectErrorHandler(e) {\n        if (clearTimeout(this.connectTimeoutId), clearTimeout(this.reconnectTimeoutId), !this.clientId && !this.reconnectAttempts || this.reconnectAttempts > this.maxReconnectAttempts) {\n            for (let t of this.pendingConnects)t.reject(new ClientResponseError(e));\n            return this.pendingConnects = [], void this.disconnect();\n        }\n        this.disconnect(!0);\n        const t = this.predefinedReconnectIntervals[this.reconnectAttempts] || this.predefinedReconnectIntervals[this.predefinedReconnectIntervals.length - 1];\n        this.reconnectAttempts++, this.reconnectTimeoutId = setTimeout(()=>{\n            this.initConnect();\n        }, t);\n    }\n    disconnect() {\n        let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;\n        var _this_eventSource;\n        if (clearTimeout(this.connectTimeoutId), clearTimeout(this.reconnectTimeoutId), this.removeAllSubscriptionListeners(), this.client.cancelRequest(this.getSubscriptionsCancelKey()), (_this_eventSource = this.eventSource) === null || _this_eventSource === void 0 ? void 0 : _this_eventSource.close(), this.eventSource = null, this.clientId = \"\", !e) {\n            this.reconnectAttempts = 0;\n            for (let e of this.pendingConnects)e.resolve();\n            this.pendingConnects = [];\n        }\n    }\n    constructor(){\n        super(...arguments), this.clientId = \"\", this.eventSource = null, this.subscriptions = {}, this.lastSentSubscriptions = [], this.maxConnectTimeout = 15e3, this.reconnectAttempts = 0, this.maxReconnectAttempts = 1 / 0, this.predefinedReconnectIntervals = [\n            200,\n            300,\n            500,\n            1e3,\n            1200,\n            1500,\n            2e3\n        ], this.pendingConnects = [];\n    }\n}\nclass RecordService extends CrudService {\n    get baseCrudPath() {\n        return this.baseCollectionPath + \"/records\";\n    }\n    get baseCollectionPath() {\n        return \"/api/collections/\" + encodeURIComponent(this.collectionIdOrName);\n    }\n    async subscribe(e, t, s) {\n        if (!e) throw new Error(\"Missing topic.\");\n        if (!t) throw new Error(\"Missing subscription callback.\");\n        return this.client.realtime.subscribe(this.collectionIdOrName + \"/\" + e, t, s);\n    }\n    async unsubscribe(e) {\n        return e ? this.client.realtime.unsubscribe(this.collectionIdOrName + \"/\" + e) : this.client.realtime.unsubscribeByPrefix(this.collectionIdOrName);\n    }\n    async getFullList(e, t) {\n        if (\"number\" == typeof e) return super.getFullList(e, t);\n        const s = Object.assign({}, e, t);\n        return super.getFullList(s);\n    }\n    async getList() {\n        let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 30, s = arguments.length > 2 ? arguments[2] : void 0;\n        return super.getList(e, t, s);\n    }\n    async getFirstListItem(e, t) {\n        return super.getFirstListItem(e, t);\n    }\n    async getOne(e, t) {\n        return super.getOne(e, t);\n    }\n    async create(e, t) {\n        return super.create(e, t);\n    }\n    async update(e, t, s) {\n        return super.update(e, t, s).then((e)=>{\n            var _this_client_authStore_model, _this_client_authStore_model1, _this_client_authStore_model2;\n            return ((_this_client_authStore_model = this.client.authStore.model) === null || _this_client_authStore_model === void 0 ? void 0 : _this_client_authStore_model.id) !== (e === null || e === void 0 ? void 0 : e.id) || ((_this_client_authStore_model1 = this.client.authStore.model) === null || _this_client_authStore_model1 === void 0 ? void 0 : _this_client_authStore_model1.collectionId) !== this.collectionIdOrName && ((_this_client_authStore_model2 = this.client.authStore.model) === null || _this_client_authStore_model2 === void 0 ? void 0 : _this_client_authStore_model2.collectionName) !== this.collectionIdOrName || this.client.authStore.save(this.client.authStore.token, e), e;\n        });\n    }\n    async delete(e, t) {\n        return super.delete(e, t).then((t)=>{\n            var _this_client_authStore_model, _this_client_authStore_model1, _this_client_authStore_model2;\n            return !t || ((_this_client_authStore_model = this.client.authStore.model) === null || _this_client_authStore_model === void 0 ? void 0 : _this_client_authStore_model.id) !== e || ((_this_client_authStore_model1 = this.client.authStore.model) === null || _this_client_authStore_model1 === void 0 ? void 0 : _this_client_authStore_model1.collectionId) !== this.collectionIdOrName && ((_this_client_authStore_model2 = this.client.authStore.model) === null || _this_client_authStore_model2 === void 0 ? void 0 : _this_client_authStore_model2.collectionName) !== this.collectionIdOrName || this.client.authStore.clear(), t;\n        });\n    }\n    authResponse(e) {\n        const t = this.decode((e === null || e === void 0 ? void 0 : e.record) || {});\n        return this.client.authStore.save(e === null || e === void 0 ? void 0 : e.token, t), Object.assign({}, e, {\n            token: (e === null || e === void 0 ? void 0 : e.token) || \"\",\n            record: t\n        });\n    }\n    async listAuthMethods(e) {\n        return e = Object.assign({\n            method: \"GET\"\n        }, e), this.client.send(this.baseCollectionPath + \"/auth-methods\", e).then((e)=>Object.assign({}, e, {\n                usernamePassword: !!(e === null || e === void 0 ? void 0 : e.usernamePassword),\n                emailPassword: !!(e === null || e === void 0 ? void 0 : e.emailPassword),\n                authProviders: Array.isArray(e === null || e === void 0 ? void 0 : e.authProviders) ? e === null || e === void 0 ? void 0 : e.authProviders : []\n            }));\n    }\n    async authWithPassword(e, t, s, i) {\n        let n = {\n            method: \"POST\",\n            body: {\n                identity: e,\n                password: t\n            }\n        };\n        return n = normalizeLegacyOptionsArgs(\"This form of authWithPassword(usernameOrEmail, pass, body?, query?) is deprecated. Consider replacing it with authWithPassword(usernameOrEmail, pass, options?).\", n, s, i), this.client.send(this.baseCollectionPath + \"/auth-with-password\", n).then((e)=>this.authResponse(e));\n    }\n    async authWithOAuth2Code(e, t, s, i, n, r, o) {\n        let a = {\n            method: \"POST\",\n            body: {\n                provider: e,\n                code: t,\n                codeVerifier: s,\n                redirectUrl: i,\n                createData: n\n            }\n        };\n        return a = normalizeLegacyOptionsArgs(\"This form of authWithOAuth2Code(provider, code, codeVerifier, redirectUrl, createData?, body?, query?) is deprecated. Consider replacing it with authWithOAuth2Code(provider, code, codeVerifier, redirectUrl, createData?, options?).\", a, r, o), this.client.send(this.baseCollectionPath + \"/auth-with-oauth2\", a).then((e)=>this.authResponse(e));\n    }\n    async authWithOAuth2() {\n        for(var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++){\n            e[_key] = arguments[_key];\n        }\n        if (e.length > 1 || \"string\" == typeof (e === null || e === void 0 ? void 0 : e[0])) return console.warn(\"PocketBase: This form of authWithOAuth2() is deprecated and may get removed in the future. Please replace with authWithOAuth2Code() OR use the authWithOAuth2() realtime form as shown in https://pocketbase.io/docs/authentication/#oauth2-integration.\"), this.authWithOAuth2Code((e === null || e === void 0 ? void 0 : e[0]) || \"\", (e === null || e === void 0 ? void 0 : e[1]) || \"\", (e === null || e === void 0 ? void 0 : e[2]) || \"\", (e === null || e === void 0 ? void 0 : e[3]) || \"\", (e === null || e === void 0 ? void 0 : e[4]) || {}, (e === null || e === void 0 ? void 0 : e[5]) || {}, (e === null || e === void 0 ? void 0 : e[6]) || {});\n        const t = (e === null || e === void 0 ? void 0 : e[0]) || {}, s = (await this.listAuthMethods()).authProviders.find((e)=>e.name === t.provider);\n        if (!s) throw new ClientResponseError(new Error('Missing or invalid provider \"'.concat(t.provider, '\".')));\n        const i = this.client.buildUrl(\"/api/oauth2-redirect\"), n = new RealtimeService(this.client);\n        let r = null;\n        function cleanup() {\n            r === null || r === void 0 ? void 0 : r.close(), n.unsubscribe();\n        }\n        return t.urlCallback || (r = openBrowserPopup(void 0)), new Promise(async (e, o)=>{\n            try {\n                var _t_scopes;\n                await n.subscribe(\"@oauth2\", async (r)=>{\n                    const a = n.clientId;\n                    try {\n                        if (!r.state || a !== r.state) throw new Error(\"State parameters don't match.\");\n                        if (r.error || !r.code) throw new Error(\"OAuth2 redirect error or missing code: \" + r.error);\n                        const n = Object.assign({}, t);\n                        delete n.provider, delete n.scopes, delete n.createData, delete n.urlCallback;\n                        const o = await this.authWithOAuth2Code(s.name, r.code, s.codeVerifier, i, t.createData, n);\n                        e(o);\n                    } catch (e) {\n                        o(new ClientResponseError(e));\n                    }\n                    cleanup();\n                });\n                const a = {\n                    state: n.clientId\n                };\n                ((_t_scopes = t.scopes) === null || _t_scopes === void 0 ? void 0 : _t_scopes.length) && (a.scope = t.scopes.join(\" \"));\n                const c = this._replaceQueryParams(s.authUrl + i, a);\n                let l = t.urlCallback || function(e) {\n                    r ? r.location.href = e : r = openBrowserPopup(e);\n                };\n                await l(c);\n            } catch (e) {\n                cleanup(), o(new ClientResponseError(e));\n            }\n        });\n    }\n    async authRefresh(e, t) {\n        let s = {\n            method: \"POST\"\n        };\n        return s = normalizeLegacyOptionsArgs(\"This form of authRefresh(body?, query?) is deprecated. Consider replacing it with authRefresh(options?).\", s, e, t), this.client.send(this.baseCollectionPath + \"/auth-refresh\", s).then((e)=>this.authResponse(e));\n    }\n    async requestPasswordReset(e, t, s) {\n        let i = {\n            method: \"POST\",\n            body: {\n                email: e\n            }\n        };\n        return i = normalizeLegacyOptionsArgs(\"This form of requestPasswordReset(email, body?, query?) is deprecated. Consider replacing it with requestPasswordReset(email, options?).\", i, t, s), this.client.send(this.baseCollectionPath + \"/request-password-reset\", i).then(()=>!0);\n    }\n    async confirmPasswordReset(e, t, s, i, n) {\n        let r = {\n            method: \"POST\",\n            body: {\n                token: e,\n                password: t,\n                passwordConfirm: s\n            }\n        };\n        return r = normalizeLegacyOptionsArgs(\"This form of confirmPasswordReset(token, password, passwordConfirm, body?, query?) is deprecated. Consider replacing it with confirmPasswordReset(token, password, passwordConfirm, options?).\", r, i, n), this.client.send(this.baseCollectionPath + \"/confirm-password-reset\", r).then(()=>!0);\n    }\n    async requestVerification(e, t, s) {\n        let i = {\n            method: \"POST\",\n            body: {\n                email: e\n            }\n        };\n        return i = normalizeLegacyOptionsArgs(\"This form of requestVerification(email, body?, query?) is deprecated. Consider replacing it with requestVerification(email, options?).\", i, t, s), this.client.send(this.baseCollectionPath + \"/request-verification\", i).then(()=>!0);\n    }\n    async confirmVerification(e, t, s) {\n        let i = {\n            method: \"POST\",\n            body: {\n                token: e\n            }\n        };\n        return i = normalizeLegacyOptionsArgs(\"This form of confirmVerification(token, body?, query?) is deprecated. Consider replacing it with confirmVerification(token, options?).\", i, t, s), this.client.send(this.baseCollectionPath + \"/confirm-verification\", i).then(()=>{\n            const t = getTokenPayload(e), s = this.client.authStore.model;\n            return s && !s.verified && s.id === t.id && s.collectionId === t.collectionId && (s.verified = !0, this.client.authStore.save(this.client.authStore.token, s)), !0;\n        });\n    }\n    async requestEmailChange(e, t, s) {\n        let i = {\n            method: \"POST\",\n            body: {\n                newEmail: e\n            }\n        };\n        return i = normalizeLegacyOptionsArgs(\"This form of requestEmailChange(newEmail, body?, query?) is deprecated. Consider replacing it with requestEmailChange(newEmail, options?).\", i, t, s), this.client.send(this.baseCollectionPath + \"/request-email-change\", i).then(()=>!0);\n    }\n    async confirmEmailChange(e, t, s, i) {\n        let n = {\n            method: \"POST\",\n            body: {\n                token: e,\n                password: t\n            }\n        };\n        return n = normalizeLegacyOptionsArgs(\"This form of confirmEmailChange(token, password, body?, query?) is deprecated. Consider replacing it with confirmEmailChange(token, password, options?).\", n, s, i), this.client.send(this.baseCollectionPath + \"/confirm-email-change\", n).then(()=>{\n            const t = getTokenPayload(e), s = this.client.authStore.model;\n            return s && s.id === t.id && s.collectionId === t.collectionId && this.client.authStore.clear(), !0;\n        });\n    }\n    async listExternalAuths(e, t) {\n        return t = Object.assign({\n            method: \"GET\"\n        }, t), this.client.send(this.baseCrudPath + \"/\" + encodeURIComponent(e) + \"/external-auths\", t);\n    }\n    async unlinkExternalAuth(e, t, s) {\n        return s = Object.assign({\n            method: \"DELETE\"\n        }, s), this.client.send(this.baseCrudPath + \"/\" + encodeURIComponent(e) + \"/external-auths/\" + encodeURIComponent(t), s).then(()=>!0);\n    }\n    _replaceQueryParams(e) {\n        let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        let s = e, i = \"\";\n        e.indexOf(\"?\") >= 0 && (s = e.substring(0, e.indexOf(\"?\")), i = e.substring(e.indexOf(\"?\") + 1));\n        const n = {}, r = i.split(\"&\");\n        for (const e of r){\n            if (\"\" == e) continue;\n            const t = e.split(\"=\");\n            n[decodeURIComponent(t[0].replace(/\\+/g, \" \"))] = decodeURIComponent((t[1] || \"\").replace(/\\+/g, \" \"));\n        }\n        for(let e in t)t.hasOwnProperty(e) && (null == t[e] ? delete n[e] : n[e] = t[e]);\n        i = \"\";\n        for(let e in n)n.hasOwnProperty(e) && (\"\" != i && (i += \"&\"), i += encodeURIComponent(e.replace(/%20/g, \"+\")) + \"=\" + encodeURIComponent(n[e].replace(/%20/g, \"+\")));\n        return \"\" != i ? s + \"?\" + i : s;\n    }\n    constructor(e, t){\n        super(e), this.collectionIdOrName = t;\n    }\n}\nfunction openBrowserPopup(e) {\n    var _window;\n    if ( false || !((_window = window) === null || _window === void 0 ? void 0 : _window.open)) throw new ClientResponseError(new Error(\"Not in a browser context - please pass a custom urlCallback function.\"));\n    let t = 1024, s = 768, i = window.innerWidth, n = window.innerHeight;\n    t = t > i ? i : t, s = s > n ? n : s;\n    let r = i / 2 - t / 2, o = n / 2 - s / 2;\n    return window.open(e, \"popup_window\", \"width=\" + t + \",height=\" + s + \",top=\" + o + \",left=\" + r + \",resizable,menubar=no\");\n}\nclass CollectionService extends CrudService {\n    get baseCrudPath() {\n        return \"/api/collections\";\n    }\n    async import(e) {\n        let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, s = arguments.length > 2 ? arguments[2] : void 0;\n        return s = Object.assign({\n            method: \"PUT\",\n            body: {\n                collections: e,\n                deleteMissing: t\n            }\n        }, s), this.client.send(this.baseCrudPath + \"/import\", s).then(()=>!0);\n    }\n}\nclass LogService extends BaseService {\n    async getList() {\n        let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 30, s = arguments.length > 2 ? arguments[2] : void 0;\n        return (s = Object.assign({\n            method: \"GET\"\n        }, s)).query = Object.assign({\n            page: e,\n            perPage: t\n        }, s.query), this.client.send(\"/api/logs\", s);\n    }\n    async getOne(e, t) {\n        if (!e) throw new ClientResponseError({\n            url: this.client.buildUrl(\"/api/logs/\"),\n            status: 404,\n            response: {\n                code: 404,\n                message: \"Missing required log id.\",\n                data: {}\n            }\n        });\n        return t = Object.assign({\n            method: \"GET\"\n        }, t), this.client.send(\"/api/logs/\" + encodeURIComponent(e), t);\n    }\n    async getStats(e) {\n        return e = Object.assign({\n            method: \"GET\"\n        }, e), this.client.send(\"/api/logs/stats\", e);\n    }\n}\nclass HealthService extends BaseService {\n    async check(e) {\n        return e = Object.assign({\n            method: \"GET\"\n        }, e), this.client.send(\"/api/health\", e);\n    }\n}\nclass FileService extends BaseService {\n    getUrl(e, t) {\n        let s = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n        if (!t || !(e === null || e === void 0 ? void 0 : e.id) || !(e === null || e === void 0 ? void 0 : e.collectionId) && !(e === null || e === void 0 ? void 0 : e.collectionName)) return \"\";\n        const i = [];\n        i.push(\"api\"), i.push(\"files\"), i.push(encodeURIComponent(e.collectionId || e.collectionName)), i.push(encodeURIComponent(e.id)), i.push(encodeURIComponent(t));\n        let n = this.client.buildUrl(i.join(\"/\"));\n        if (Object.keys(s).length) {\n            !1 === s.download && delete s.download;\n            const e = new URLSearchParams(s);\n            n += (n.includes(\"?\") ? \"&\" : \"?\") + e;\n        }\n        return n;\n    }\n    async getToken(e) {\n        return e = Object.assign({\n            method: \"POST\"\n        }, e), this.client.send(\"/api/files/token\", e).then((e)=>(e === null || e === void 0 ? void 0 : e.token) || \"\");\n    }\n}\nclass BackupService extends BaseService {\n    async getFullList(e) {\n        return e = Object.assign({\n            method: \"GET\"\n        }, e), this.client.send(\"/api/backups\", e);\n    }\n    async create(e, t) {\n        return t = Object.assign({\n            method: \"POST\",\n            body: {\n                name: e\n            }\n        }, t), this.client.send(\"/api/backups\", t).then(()=>!0);\n    }\n    async upload(e, t) {\n        return t = Object.assign({\n            method: \"POST\",\n            body: e\n        }, t), this.client.send(\"/api/backups/upload\", t).then(()=>!0);\n    }\n    async delete(e, t) {\n        return t = Object.assign({\n            method: \"DELETE\"\n        }, t), this.client.send(\"/api/backups/\".concat(encodeURIComponent(e)), t).then(()=>!0);\n    }\n    async restore(e, t) {\n        return t = Object.assign({\n            method: \"POST\"\n        }, t), this.client.send(\"/api/backups/\".concat(encodeURIComponent(e), \"/restore\"), t).then(()=>!0);\n    }\n    getDownloadUrl(e, t) {\n        return this.client.buildUrl(\"/api/backups/\".concat(encodeURIComponent(t), \"?token=\").concat(encodeURIComponent(e)));\n    }\n}\nclass Client {\n    collection(e) {\n        return this.recordServices[e] || (this.recordServices[e] = new RecordService(this, e)), this.recordServices[e];\n    }\n    autoCancellation(e) {\n        return this.enableAutoCancellation = !!e, this;\n    }\n    cancelRequest(e) {\n        return this.cancelControllers[e] && (this.cancelControllers[e].abort(), delete this.cancelControllers[e]), this;\n    }\n    cancelAllRequests() {\n        for(let e in this.cancelControllers)this.cancelControllers[e].abort();\n        return this.cancelControllers = {}, this;\n    }\n    filter(e, t) {\n        if (!t) return e;\n        for(let s in t){\n            let i = t[s];\n            switch(typeof i){\n                case \"boolean\":\n                case \"number\":\n                    i = \"\" + i;\n                    break;\n                case \"string\":\n                    i = \"'\" + i.replace(/'/g, \"\\\\'\") + \"'\";\n                    break;\n                default:\n                    i = null === i ? \"null\" : i instanceof Date ? \"'\" + i.toISOString().replace(\"T\", \" \") + \"'\" : \"'\" + JSON.stringify(i).replace(/'/g, \"\\\\'\") + \"'\";\n            }\n            e = e.replaceAll(\"{:\" + s + \"}\", i);\n        }\n        return e;\n    }\n    getFileUrl(e, t) {\n        let s = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n        return this.files.getUrl(e, t, s);\n    }\n    buildUrl(e) {\n        var _window_location_origin;\n        let t = this.baseUrl;\n        return  false || !window.location || t.startsWith(\"https://\") || t.startsWith(\"http://\") || (t = ((_window_location_origin = window.location.origin) === null || _window_location_origin === void 0 ? void 0 : _window_location_origin.endsWith(\"/\")) ? window.location.origin.substring(0, window.location.origin.length - 1) : window.location.origin || \"\", this.baseUrl.startsWith(\"/\") || (t += window.location.pathname || \"/\", t += t.endsWith(\"/\") ? \"\" : \"/\"), t += this.baseUrl), e && (t += t.endsWith(\"/\") ? \"\" : \"/\", t += e.startsWith(\"/\") ? e.substring(1) : e), t;\n    }\n    async send(e, t) {\n        t = this.initSendOptions(e, t);\n        let s = this.buildUrl(e);\n        if (this.beforeSend) {\n            var _console;\n            const e = Object.assign({}, await this.beforeSend(s, t));\n            void 0 !== e.url || void 0 !== e.options ? (s = e.url || s, t = e.options || t) : Object.keys(e).length && (t = e, ((_console = console) === null || _console === void 0 ? void 0 : _console.warn) && console.warn(\"Deprecated format of beforeSend return: please use `return { url, options }`, instead of `return options`.\"));\n        }\n        if (void 0 !== t.query) {\n            const e = this.serializeQueryParams(t.query);\n            e && (s += (s.includes(\"?\") ? \"&\" : \"?\") + e), delete t.query;\n        }\n        \"application/json\" == this.getHeader(t.headers, \"Content-Type\") && t.body && \"string\" != typeof t.body && (t.body = JSON.stringify(t.body));\n        return (t.fetch || fetch)(s, t).then(async (e)=>{\n            let t = {};\n            try {\n                t = await e.json();\n            } catch (e) {}\n            if (this.afterSend && (t = await this.afterSend(e, t)), e.status >= 400) throw new ClientResponseError({\n                url: e.url,\n                status: e.status,\n                data: t\n            });\n            return t;\n        }).catch((e)=>{\n            throw new ClientResponseError(e);\n        });\n    }\n    initSendOptions(e, t) {\n        if ((t = Object.assign({\n            method: \"GET\"\n        }, t)).body = this.convertToFormDataIfNeeded(t.body), normalizeUnknownQueryParams(t), t.query = Object.assign({}, t.params, t.query), void 0 === t.requestKey && (!1 === t.$autoCancel || !1 === t.query.$autoCancel ? t.requestKey = null : (t.$cancelKey || t.query.$cancelKey) && (t.requestKey = t.$cancelKey || t.query.$cancelKey)), delete t.$autoCancel, delete t.query.$autoCancel, delete t.$cancelKey, delete t.query.$cancelKey, null !== this.getHeader(t.headers, \"Content-Type\") || this.isFormData(t.body) || (t.headers = Object.assign({}, t.headers, {\n            \"Content-Type\": \"application/json\"\n        })), null === this.getHeader(t.headers, \"Accept-Language\") && (t.headers = Object.assign({}, t.headers, {\n            \"Accept-Language\": this.lang\n        })), this.authStore.token && null === this.getHeader(t.headers, \"Authorization\") && (t.headers = Object.assign({}, t.headers, {\n            Authorization: this.authStore.token\n        })), this.enableAutoCancellation && null !== t.requestKey) {\n            const s = t.requestKey || (t.method || \"GET\") + e;\n            delete t.requestKey, this.cancelRequest(s);\n            const i = new AbortController;\n            this.cancelControllers[s] = i, t.signal = i.signal;\n        }\n        return t;\n    }\n    convertToFormDataIfNeeded(e) {\n        if (\"undefined\" == typeof FormData || void 0 === e || \"object\" != typeof e || null === e || this.isFormData(e) || !this.hasBlobField(e)) return e;\n        const t = new FormData;\n        for(const s in e){\n            const i = e[s];\n            if (\"object\" != typeof i || this.hasBlobField({\n                data: i\n            })) {\n                const e = Array.isArray(i) ? i : [\n                    i\n                ];\n                for (let i of e)t.append(s, i);\n            } else {\n                let e = {};\n                e[s] = i, t.append(\"@jsonPayload\", JSON.stringify(e));\n            }\n        }\n        return t;\n    }\n    hasBlobField(e) {\n        for(const t in e){\n            const s = Array.isArray(e[t]) ? e[t] : [\n                e[t]\n            ];\n            for (const e of s)if (\"undefined\" != typeof Blob && e instanceof Blob || \"undefined\" != typeof File && e instanceof File) return !0;\n        }\n        return !1;\n    }\n    getHeader(e, t) {\n        e = e || {}, t = t.toLowerCase();\n        for(let s in e)if (s.toLowerCase() == t) return e[s];\n        return null;\n    }\n    isFormData(e) {\n        return e && (\"FormData\" === e.constructor.name || \"undefined\" != typeof FormData && e instanceof FormData);\n    }\n    serializeQueryParams(e) {\n        const t = [];\n        for(const s in e){\n            if (null === e[s]) continue;\n            const i = e[s], n = encodeURIComponent(s);\n            if (Array.isArray(i)) for (const e of i)t.push(n + \"=\" + encodeURIComponent(e));\n            else i instanceof Date ? t.push(n + \"=\" + encodeURIComponent(i.toISOString())) : null !== typeof i && \"object\" == typeof i ? t.push(n + \"=\" + encodeURIComponent(JSON.stringify(i))) : t.push(n + \"=\" + encodeURIComponent(i));\n        }\n        return t.join(\"&\");\n    }\n    constructor(e = \"/\", t, s = \"en-US\"){\n        this.cancelControllers = {}, this.recordServices = {}, this.enableAutoCancellation = !0, this.baseUrl = e, this.lang = s, this.authStore = t || new LocalAuthStore, this.admins = new AdminService(this), this.collections = new CollectionService(this), this.files = new FileService(this), this.logs = new LogService(this), this.settings = new SettingsService(this), this.realtime = new RealtimeService(this), this.health = new HealthService(this), this.backups = new BackupService(this);\n    }\n}\nclass AsyncAuthStore extends BaseAuthStore {\n    save(e, t) {\n        super.save(e, t);\n        let s = \"\";\n        try {\n            s = JSON.stringify({\n                token: e,\n                model: t\n            });\n        } catch (e) {\n            console.warn(\"AsyncAuthStore: failed to stringify the new state\");\n        }\n        this._enqueue(()=>this.saveFunc(s));\n    }\n    clear() {\n        super.clear(), this.clearFunc ? this._enqueue(()=>this.clearFunc()) : this._enqueue(()=>this.saveFunc(\"\"));\n    }\n    async _loadInitial(e) {\n        try {\n            if (e = await e) {\n                let t;\n                \"string\" == typeof e ? t = JSON.parse(e) || {} : \"object\" == typeof e && (t = e), this.save(t.token || \"\", t.model || null);\n            }\n        } catch (e) {}\n    }\n    _enqueue(e) {\n        this.queue.push(e), 1 == this.queue.length && this._dequeue();\n    }\n    _dequeue() {\n        this.queue.length && this.queue[0]().finally(()=>{\n            this.queue.shift(), this.queue.length && this._dequeue();\n        });\n    }\n    constructor(e){\n        super(), this.queue = [], this.saveFunc = e.save, this.clearFunc = e.clear, this._enqueue(()=>this._loadInitial(e.initial));\n    }\n}\n //# sourceMappingURL=pocketbase.es.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/pocketbase/dist/pocketbase.es.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/random-words/index.js":
/*!********************************************!*\
  !*** ./node_modules/random-words/index.js ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   count: function() { return /* binding */ count; },\n/* harmony export */   generate: function() { return /* binding */ generate; },\n/* harmony export */   wordList: function() { return /* binding */ wordList; }\n/* harmony export */ });\n/* harmony import */ var seedrandom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! seedrandom */ \"(app-pages-browser)/./node_modules/seedrandom/index.js\");\n\n// Export the word list as it is often useful\nconst wordList = [\n    \"ability\",\n    \"able\",\n    \"aboard\",\n    \"about\",\n    \"above\",\n    \"accept\",\n    \"accident\",\n    \"according\",\n    \"account\",\n    \"accurate\",\n    \"acres\",\n    \"across\",\n    \"act\",\n    \"action\",\n    \"active\",\n    \"activity\",\n    \"actual\",\n    \"actually\",\n    \"add\",\n    \"addition\",\n    \"additional\",\n    \"adjective\",\n    \"adult\",\n    \"adventure\",\n    \"advice\",\n    \"affect\",\n    \"afraid\",\n    \"after\",\n    \"afternoon\",\n    \"again\",\n    \"against\",\n    \"age\",\n    \"ago\",\n    \"agree\",\n    \"ahead\",\n    \"aid\",\n    \"air\",\n    \"airplane\",\n    \"alike\",\n    \"alive\",\n    \"all\",\n    \"allow\",\n    \"almost\",\n    \"alone\",\n    \"along\",\n    \"aloud\",\n    \"alphabet\",\n    \"already\",\n    \"also\",\n    \"although\",\n    \"am\",\n    \"among\",\n    \"amount\",\n    \"ancient\",\n    \"angle\",\n    \"angry\",\n    \"animal\",\n    \"announced\",\n    \"another\",\n    \"answer\",\n    \"ants\",\n    \"any\",\n    \"anybody\",\n    \"anyone\",\n    \"anything\",\n    \"anyway\",\n    \"anywhere\",\n    \"apart\",\n    \"apartment\",\n    \"appearance\",\n    \"apple\",\n    \"applied\",\n    \"appropriate\",\n    \"are\",\n    \"area\",\n    \"arm\",\n    \"army\",\n    \"around\",\n    \"arrange\",\n    \"arrangement\",\n    \"arrive\",\n    \"arrow\",\n    \"art\",\n    \"article\",\n    \"as\",\n    \"aside\",\n    \"ask\",\n    \"asleep\",\n    \"at\",\n    \"ate\",\n    \"atmosphere\",\n    \"atom\",\n    \"atomic\",\n    \"attached\",\n    \"attack\",\n    \"attempt\",\n    \"attention\",\n    \"audience\",\n    \"author\",\n    \"automobile\",\n    \"available\",\n    \"average\",\n    \"avoid\",\n    \"aware\",\n    \"away\",\n    \"baby\",\n    \"back\",\n    \"bad\",\n    \"badly\",\n    \"bag\",\n    \"balance\",\n    \"ball\",\n    \"balloon\",\n    \"band\",\n    \"bank\",\n    \"bar\",\n    \"bare\",\n    \"bark\",\n    \"barn\",\n    \"base\",\n    \"baseball\",\n    \"basic\",\n    \"basis\",\n    \"basket\",\n    \"bat\",\n    \"battle\",\n    \"be\",\n    \"bean\",\n    \"bear\",\n    \"beat\",\n    \"beautiful\",\n    \"beauty\",\n    \"became\",\n    \"because\",\n    \"become\",\n    \"becoming\",\n    \"bee\",\n    \"been\",\n    \"before\",\n    \"began\",\n    \"beginning\",\n    \"begun\",\n    \"behavior\",\n    \"behind\",\n    \"being\",\n    \"believed\",\n    \"bell\",\n    \"belong\",\n    \"below\",\n    \"belt\",\n    \"bend\",\n    \"beneath\",\n    \"bent\",\n    \"beside\",\n    \"best\",\n    \"bet\",\n    \"better\",\n    \"between\",\n    \"beyond\",\n    \"bicycle\",\n    \"bigger\",\n    \"biggest\",\n    \"bill\",\n    \"birds\",\n    \"birth\",\n    \"birthday\",\n    \"bit\",\n    \"bite\",\n    \"black\",\n    \"blank\",\n    \"blanket\",\n    \"blew\",\n    \"blind\",\n    \"block\",\n    \"blood\",\n    \"blow\",\n    \"blue\",\n    \"board\",\n    \"boat\",\n    \"body\",\n    \"bone\",\n    \"book\",\n    \"border\",\n    \"born\",\n    \"both\",\n    \"bottle\",\n    \"bottom\",\n    \"bound\",\n    \"bow\",\n    \"bowl\",\n    \"box\",\n    \"boy\",\n    \"brain\",\n    \"branch\",\n    \"brass\",\n    \"brave\",\n    \"bread\",\n    \"break\",\n    \"breakfast\",\n    \"breath\",\n    \"breathe\",\n    \"breathing\",\n    \"breeze\",\n    \"brick\",\n    \"bridge\",\n    \"brief\",\n    \"bright\",\n    \"bring\",\n    \"broad\",\n    \"broke\",\n    \"broken\",\n    \"brother\",\n    \"brought\",\n    \"brown\",\n    \"brush\",\n    \"buffalo\",\n    \"build\",\n    \"building\",\n    \"built\",\n    \"buried\",\n    \"burn\",\n    \"burst\",\n    \"bus\",\n    \"bush\",\n    \"business\",\n    \"busy\",\n    \"but\",\n    \"butter\",\n    \"buy\",\n    \"by\",\n    \"cabin\",\n    \"cage\",\n    \"cake\",\n    \"call\",\n    \"calm\",\n    \"came\",\n    \"camera\",\n    \"camp\",\n    \"can\",\n    \"canal\",\n    \"cannot\",\n    \"cap\",\n    \"capital\",\n    \"captain\",\n    \"captured\",\n    \"car\",\n    \"carbon\",\n    \"card\",\n    \"care\",\n    \"careful\",\n    \"carefully\",\n    \"carried\",\n    \"carry\",\n    \"case\",\n    \"cast\",\n    \"castle\",\n    \"cat\",\n    \"catch\",\n    \"cattle\",\n    \"caught\",\n    \"cause\",\n    \"cave\",\n    \"cell\",\n    \"cent\",\n    \"center\",\n    \"central\",\n    \"century\",\n    \"certain\",\n    \"certainly\",\n    \"chain\",\n    \"chair\",\n    \"chamber\",\n    \"chance\",\n    \"change\",\n    \"changing\",\n    \"chapter\",\n    \"character\",\n    \"characteristic\",\n    \"charge\",\n    \"chart\",\n    \"check\",\n    \"cheese\",\n    \"chemical\",\n    \"chest\",\n    \"chicken\",\n    \"chief\",\n    \"child\",\n    \"children\",\n    \"choice\",\n    \"choose\",\n    \"chose\",\n    \"chosen\",\n    \"church\",\n    \"circle\",\n    \"circus\",\n    \"citizen\",\n    \"city\",\n    \"class\",\n    \"classroom\",\n    \"claws\",\n    \"clay\",\n    \"clean\",\n    \"clear\",\n    \"clearly\",\n    \"climate\",\n    \"climb\",\n    \"clock\",\n    \"close\",\n    \"closely\",\n    \"closer\",\n    \"cloth\",\n    \"clothes\",\n    \"clothing\",\n    \"cloud\",\n    \"club\",\n    \"coach\",\n    \"coal\",\n    \"coast\",\n    \"coat\",\n    \"coffee\",\n    \"cold\",\n    \"collect\",\n    \"college\",\n    \"colony\",\n    \"color\",\n    \"column\",\n    \"combination\",\n    \"combine\",\n    \"come\",\n    \"comfortable\",\n    \"coming\",\n    \"command\",\n    \"common\",\n    \"community\",\n    \"company\",\n    \"compare\",\n    \"compass\",\n    \"complete\",\n    \"completely\",\n    \"complex\",\n    \"composed\",\n    \"composition\",\n    \"compound\",\n    \"concerned\",\n    \"condition\",\n    \"congress\",\n    \"connected\",\n    \"consider\",\n    \"consist\",\n    \"consonant\",\n    \"constantly\",\n    \"construction\",\n    \"contain\",\n    \"continent\",\n    \"continued\",\n    \"contrast\",\n    \"control\",\n    \"conversation\",\n    \"cook\",\n    \"cookies\",\n    \"cool\",\n    \"copper\",\n    \"copy\",\n    \"corn\",\n    \"corner\",\n    \"correct\",\n    \"correctly\",\n    \"cost\",\n    \"cotton\",\n    \"could\",\n    \"count\",\n    \"country\",\n    \"couple\",\n    \"courage\",\n    \"course\",\n    \"court\",\n    \"cover\",\n    \"cow\",\n    \"cowboy\",\n    \"crack\",\n    \"cream\",\n    \"create\",\n    \"creature\",\n    \"crew\",\n    \"crop\",\n    \"cross\",\n    \"crowd\",\n    \"cry\",\n    \"cup\",\n    \"curious\",\n    \"current\",\n    \"curve\",\n    \"customs\",\n    \"cut\",\n    \"cutting\",\n    \"daily\",\n    \"damage\",\n    \"dance\",\n    \"danger\",\n    \"dangerous\",\n    \"dark\",\n    \"darkness\",\n    \"date\",\n    \"daughter\",\n    \"dawn\",\n    \"day\",\n    \"dead\",\n    \"deal\",\n    \"dear\",\n    \"death\",\n    \"decide\",\n    \"declared\",\n    \"deep\",\n    \"deeply\",\n    \"deer\",\n    \"definition\",\n    \"degree\",\n    \"depend\",\n    \"depth\",\n    \"describe\",\n    \"desert\",\n    \"design\",\n    \"desk\",\n    \"detail\",\n    \"determine\",\n    \"develop\",\n    \"development\",\n    \"diagram\",\n    \"diameter\",\n    \"did\",\n    \"die\",\n    \"differ\",\n    \"difference\",\n    \"different\",\n    \"difficult\",\n    \"difficulty\",\n    \"dig\",\n    \"dinner\",\n    \"direct\",\n    \"direction\",\n    \"directly\",\n    \"dirt\",\n    \"dirty\",\n    \"disappear\",\n    \"discover\",\n    \"discovery\",\n    \"discuss\",\n    \"discussion\",\n    \"disease\",\n    \"dish\",\n    \"distance\",\n    \"distant\",\n    \"divide\",\n    \"division\",\n    \"do\",\n    \"doctor\",\n    \"does\",\n    \"dog\",\n    \"doing\",\n    \"doll\",\n    \"dollar\",\n    \"done\",\n    \"donkey\",\n    \"door\",\n    \"dot\",\n    \"double\",\n    \"doubt\",\n    \"down\",\n    \"dozen\",\n    \"draw\",\n    \"drawn\",\n    \"dream\",\n    \"dress\",\n    \"drew\",\n    \"dried\",\n    \"drink\",\n    \"drive\",\n    \"driven\",\n    \"driver\",\n    \"driving\",\n    \"drop\",\n    \"dropped\",\n    \"drove\",\n    \"dry\",\n    \"duck\",\n    \"due\",\n    \"dug\",\n    \"dull\",\n    \"during\",\n    \"dust\",\n    \"duty\",\n    \"each\",\n    \"eager\",\n    \"ear\",\n    \"earlier\",\n    \"early\",\n    \"earn\",\n    \"earth\",\n    \"easier\",\n    \"easily\",\n    \"east\",\n    \"easy\",\n    \"eat\",\n    \"eaten\",\n    \"edge\",\n    \"education\",\n    \"effect\",\n    \"effort\",\n    \"egg\",\n    \"eight\",\n    \"either\",\n    \"electric\",\n    \"electricity\",\n    \"element\",\n    \"elephant\",\n    \"eleven\",\n    \"else\",\n    \"empty\",\n    \"end\",\n    \"enemy\",\n    \"energy\",\n    \"engine\",\n    \"engineer\",\n    \"enjoy\",\n    \"enough\",\n    \"enter\",\n    \"entire\",\n    \"entirely\",\n    \"environment\",\n    \"equal\",\n    \"equally\",\n    \"equator\",\n    \"equipment\",\n    \"escape\",\n    \"especially\",\n    \"essential\",\n    \"establish\",\n    \"even\",\n    \"evening\",\n    \"event\",\n    \"eventually\",\n    \"ever\",\n    \"every\",\n    \"everybody\",\n    \"everyone\",\n    \"everything\",\n    \"everywhere\",\n    \"evidence\",\n    \"exact\",\n    \"exactly\",\n    \"examine\",\n    \"example\",\n    \"excellent\",\n    \"except\",\n    \"exchange\",\n    \"excited\",\n    \"excitement\",\n    \"exciting\",\n    \"exclaimed\",\n    \"exercise\",\n    \"exist\",\n    \"expect\",\n    \"experience\",\n    \"experiment\",\n    \"explain\",\n    \"explanation\",\n    \"explore\",\n    \"express\",\n    \"expression\",\n    \"extra\",\n    \"eye\",\n    \"face\",\n    \"facing\",\n    \"fact\",\n    \"factor\",\n    \"factory\",\n    \"failed\",\n    \"fair\",\n    \"fairly\",\n    \"fall\",\n    \"fallen\",\n    \"familiar\",\n    \"family\",\n    \"famous\",\n    \"far\",\n    \"farm\",\n    \"farmer\",\n    \"farther\",\n    \"fast\",\n    \"fastened\",\n    \"faster\",\n    \"fat\",\n    \"father\",\n    \"favorite\",\n    \"fear\",\n    \"feathers\",\n    \"feature\",\n    \"fed\",\n    \"feed\",\n    \"feel\",\n    \"feet\",\n    \"fell\",\n    \"fellow\",\n    \"felt\",\n    \"fence\",\n    \"few\",\n    \"fewer\",\n    \"field\",\n    \"fierce\",\n    \"fifteen\",\n    \"fifth\",\n    \"fifty\",\n    \"fight\",\n    \"fighting\",\n    \"figure\",\n    \"fill\",\n    \"film\",\n    \"final\",\n    \"finally\",\n    \"find\",\n    \"fine\",\n    \"finest\",\n    \"finger\",\n    \"finish\",\n    \"fire\",\n    \"fireplace\",\n    \"firm\",\n    \"first\",\n    \"fish\",\n    \"five\",\n    \"fix\",\n    \"flag\",\n    \"flame\",\n    \"flat\",\n    \"flew\",\n    \"flies\",\n    \"flight\",\n    \"floating\",\n    \"floor\",\n    \"flow\",\n    \"flower\",\n    \"fly\",\n    \"fog\",\n    \"folks\",\n    \"follow\",\n    \"food\",\n    \"foot\",\n    \"football\",\n    \"for\",\n    \"force\",\n    \"foreign\",\n    \"forest\",\n    \"forget\",\n    \"forgot\",\n    \"forgotten\",\n    \"form\",\n    \"former\",\n    \"fort\",\n    \"forth\",\n    \"forty\",\n    \"forward\",\n    \"fought\",\n    \"found\",\n    \"four\",\n    \"fourth\",\n    \"fox\",\n    \"frame\",\n    \"free\",\n    \"freedom\",\n    \"frequently\",\n    \"fresh\",\n    \"friend\",\n    \"friendly\",\n    \"frighten\",\n    \"frog\",\n    \"from\",\n    \"front\",\n    \"frozen\",\n    \"fruit\",\n    \"fuel\",\n    \"full\",\n    \"fully\",\n    \"fun\",\n    \"function\",\n    \"funny\",\n    \"fur\",\n    \"furniture\",\n    \"further\",\n    \"future\",\n    \"gain\",\n    \"game\",\n    \"garage\",\n    \"garden\",\n    \"gas\",\n    \"gasoline\",\n    \"gate\",\n    \"gather\",\n    \"gave\",\n    \"general\",\n    \"generally\",\n    \"gentle\",\n    \"gently\",\n    \"get\",\n    \"getting\",\n    \"giant\",\n    \"gift\",\n    \"girl\",\n    \"give\",\n    \"given\",\n    \"giving\",\n    \"glad\",\n    \"glass\",\n    \"globe\",\n    \"go\",\n    \"goes\",\n    \"gold\",\n    \"golden\",\n    \"gone\",\n    \"good\",\n    \"goose\",\n    \"got\",\n    \"government\",\n    \"grabbed\",\n    \"grade\",\n    \"gradually\",\n    \"grain\",\n    \"grandfather\",\n    \"grandmother\",\n    \"graph\",\n    \"grass\",\n    \"gravity\",\n    \"gray\",\n    \"great\",\n    \"greater\",\n    \"greatest\",\n    \"greatly\",\n    \"green\",\n    \"grew\",\n    \"ground\",\n    \"group\",\n    \"grow\",\n    \"grown\",\n    \"growth\",\n    \"guard\",\n    \"guess\",\n    \"guide\",\n    \"gulf\",\n    \"gun\",\n    \"habit\",\n    \"had\",\n    \"hair\",\n    \"half\",\n    \"halfway\",\n    \"hall\",\n    \"hand\",\n    \"handle\",\n    \"handsome\",\n    \"hang\",\n    \"happen\",\n    \"happened\",\n    \"happily\",\n    \"happy\",\n    \"harbor\",\n    \"hard\",\n    \"harder\",\n    \"hardly\",\n    \"has\",\n    \"hat\",\n    \"have\",\n    \"having\",\n    \"hay\",\n    \"he\",\n    \"headed\",\n    \"heading\",\n    \"health\",\n    \"heard\",\n    \"hearing\",\n    \"heart\",\n    \"heat\",\n    \"heavy\",\n    \"height\",\n    \"held\",\n    \"hello\",\n    \"help\",\n    \"helpful\",\n    \"her\",\n    \"herd\",\n    \"here\",\n    \"herself\",\n    \"hidden\",\n    \"hide\",\n    \"high\",\n    \"higher\",\n    \"highest\",\n    \"highway\",\n    \"hill\",\n    \"him\",\n    \"himself\",\n    \"his\",\n    \"history\",\n    \"hit\",\n    \"hold\",\n    \"hole\",\n    \"hollow\",\n    \"home\",\n    \"honor\",\n    \"hope\",\n    \"horn\",\n    \"horse\",\n    \"hospital\",\n    \"hot\",\n    \"hour\",\n    \"house\",\n    \"how\",\n    \"however\",\n    \"huge\",\n    \"human\",\n    \"hundred\",\n    \"hung\",\n    \"hungry\",\n    \"hunt\",\n    \"hunter\",\n    \"hurried\",\n    \"hurry\",\n    \"hurt\",\n    \"husband\",\n    \"ice\",\n    \"idea\",\n    \"identity\",\n    \"if\",\n    \"ill\",\n    \"image\",\n    \"imagine\",\n    \"immediately\",\n    \"importance\",\n    \"important\",\n    \"impossible\",\n    \"improve\",\n    \"in\",\n    \"inch\",\n    \"include\",\n    \"including\",\n    \"income\",\n    \"increase\",\n    \"indeed\",\n    \"independent\",\n    \"indicate\",\n    \"individual\",\n    \"industrial\",\n    \"industry\",\n    \"influence\",\n    \"information\",\n    \"inside\",\n    \"instance\",\n    \"instant\",\n    \"instead\",\n    \"instrument\",\n    \"interest\",\n    \"interior\",\n    \"into\",\n    \"introduced\",\n    \"invented\",\n    \"involved\",\n    \"iron\",\n    \"is\",\n    \"island\",\n    \"it\",\n    \"its\",\n    \"itself\",\n    \"jack\",\n    \"jar\",\n    \"jet\",\n    \"job\",\n    \"join\",\n    \"joined\",\n    \"journey\",\n    \"joy\",\n    \"judge\",\n    \"jump\",\n    \"jungle\",\n    \"just\",\n    \"keep\",\n    \"kept\",\n    \"key\",\n    \"kids\",\n    \"kill\",\n    \"kind\",\n    \"kitchen\",\n    \"knew\",\n    \"knife\",\n    \"know\",\n    \"knowledge\",\n    \"known\",\n    \"label\",\n    \"labor\",\n    \"lack\",\n    \"lady\",\n    \"laid\",\n    \"lake\",\n    \"lamp\",\n    \"land\",\n    \"language\",\n    \"large\",\n    \"larger\",\n    \"largest\",\n    \"last\",\n    \"late\",\n    \"later\",\n    \"laugh\",\n    \"law\",\n    \"lay\",\n    \"layers\",\n    \"lead\",\n    \"leader\",\n    \"leaf\",\n    \"learn\",\n    \"least\",\n    \"leather\",\n    \"leave\",\n    \"leaving\",\n    \"led\",\n    \"left\",\n    \"leg\",\n    \"length\",\n    \"lesson\",\n    \"let\",\n    \"letter\",\n    \"level\",\n    \"library\",\n    \"lie\",\n    \"life\",\n    \"lift\",\n    \"light\",\n    \"like\",\n    \"likely\",\n    \"limited\",\n    \"line\",\n    \"lion\",\n    \"lips\",\n    \"liquid\",\n    \"list\",\n    \"listen\",\n    \"little\",\n    \"live\",\n    \"living\",\n    \"load\",\n    \"local\",\n    \"locate\",\n    \"location\",\n    \"log\",\n    \"lonely\",\n    \"long\",\n    \"longer\",\n    \"look\",\n    \"loose\",\n    \"lose\",\n    \"loss\",\n    \"lost\",\n    \"lot\",\n    \"loud\",\n    \"love\",\n    \"lovely\",\n    \"low\",\n    \"lower\",\n    \"luck\",\n    \"lucky\",\n    \"lunch\",\n    \"lungs\",\n    \"lying\",\n    \"machine\",\n    \"machinery\",\n    \"mad\",\n    \"made\",\n    \"magic\",\n    \"magnet\",\n    \"mail\",\n    \"main\",\n    \"mainly\",\n    \"major\",\n    \"make\",\n    \"making\",\n    \"man\",\n    \"managed\",\n    \"manner\",\n    \"manufacturing\",\n    \"many\",\n    \"map\",\n    \"mark\",\n    \"market\",\n    \"married\",\n    \"mass\",\n    \"massage\",\n    \"master\",\n    \"material\",\n    \"mathematics\",\n    \"matter\",\n    \"may\",\n    \"maybe\",\n    \"me\",\n    \"meal\",\n    \"mean\",\n    \"means\",\n    \"meant\",\n    \"measure\",\n    \"meat\",\n    \"medicine\",\n    \"meet\",\n    \"melted\",\n    \"member\",\n    \"memory\",\n    \"men\",\n    \"mental\",\n    \"merely\",\n    \"met\",\n    \"metal\",\n    \"method\",\n    \"mice\",\n    \"middle\",\n    \"might\",\n    \"mighty\",\n    \"mile\",\n    \"military\",\n    \"milk\",\n    \"mill\",\n    \"mind\",\n    \"mine\",\n    \"minerals\",\n    \"minute\",\n    \"mirror\",\n    \"missing\",\n    \"mission\",\n    \"mistake\",\n    \"mix\",\n    \"mixture\",\n    \"model\",\n    \"modern\",\n    \"molecular\",\n    \"moment\",\n    \"money\",\n    \"monkey\",\n    \"month\",\n    \"mood\",\n    \"moon\",\n    \"more\",\n    \"morning\",\n    \"most\",\n    \"mostly\",\n    \"mother\",\n    \"motion\",\n    \"motor\",\n    \"mountain\",\n    \"mouse\",\n    \"mouth\",\n    \"move\",\n    \"movement\",\n    \"movie\",\n    \"moving\",\n    \"mud\",\n    \"muscle\",\n    \"music\",\n    \"musical\",\n    \"must\",\n    \"my\",\n    \"myself\",\n    \"mysterious\",\n    \"nails\",\n    \"name\",\n    \"nation\",\n    \"national\",\n    \"native\",\n    \"natural\",\n    \"naturally\",\n    \"nature\",\n    \"near\",\n    \"nearby\",\n    \"nearer\",\n    \"nearest\",\n    \"nearly\",\n    \"necessary\",\n    \"neck\",\n    \"needed\",\n    \"needle\",\n    \"needs\",\n    \"negative\",\n    \"neighbor\",\n    \"neighborhood\",\n    \"nervous\",\n    \"nest\",\n    \"never\",\n    \"new\",\n    \"news\",\n    \"newspaper\",\n    \"next\",\n    \"nice\",\n    \"night\",\n    \"nine\",\n    \"no\",\n    \"nobody\",\n    \"nodded\",\n    \"noise\",\n    \"none\",\n    \"noon\",\n    \"nor\",\n    \"north\",\n    \"nose\",\n    \"not\",\n    \"note\",\n    \"noted\",\n    \"nothing\",\n    \"notice\",\n    \"noun\",\n    \"now\",\n    \"number\",\n    \"numeral\",\n    \"nuts\",\n    \"object\",\n    \"observe\",\n    \"obtain\",\n    \"occasionally\",\n    \"occur\",\n    \"ocean\",\n    \"of\",\n    \"off\",\n    \"offer\",\n    \"office\",\n    \"officer\",\n    \"official\",\n    \"oil\",\n    \"old\",\n    \"older\",\n    \"oldest\",\n    \"on\",\n    \"once\",\n    \"one\",\n    \"only\",\n    \"onto\",\n    \"open\",\n    \"operation\",\n    \"opinion\",\n    \"opportunity\",\n    \"opposite\",\n    \"or\",\n    \"orange\",\n    \"orbit\",\n    \"order\",\n    \"ordinary\",\n    \"organization\",\n    \"organized\",\n    \"origin\",\n    \"original\",\n    \"other\",\n    \"ought\",\n    \"our\",\n    \"ourselves\",\n    \"out\",\n    \"outer\",\n    \"outline\",\n    \"outside\",\n    \"over\",\n    \"own\",\n    \"owner\",\n    \"oxygen\",\n    \"pack\",\n    \"package\",\n    \"page\",\n    \"paid\",\n    \"pain\",\n    \"paint\",\n    \"pair\",\n    \"palace\",\n    \"pale\",\n    \"pan\",\n    \"paper\",\n    \"paragraph\",\n    \"parallel\",\n    \"parent\",\n    \"park\",\n    \"part\",\n    \"particles\",\n    \"particular\",\n    \"particularly\",\n    \"partly\",\n    \"parts\",\n    \"party\",\n    \"pass\",\n    \"passage\",\n    \"past\",\n    \"path\",\n    \"pattern\",\n    \"pay\",\n    \"peace\",\n    \"pen\",\n    \"pencil\",\n    \"people\",\n    \"per\",\n    \"percent\",\n    \"perfect\",\n    \"perfectly\",\n    \"perhaps\",\n    \"period\",\n    \"person\",\n    \"personal\",\n    \"pet\",\n    \"phrase\",\n    \"physical\",\n    \"piano\",\n    \"pick\",\n    \"picture\",\n    \"pictured\",\n    \"pie\",\n    \"piece\",\n    \"pig\",\n    \"pile\",\n    \"pilot\",\n    \"pine\",\n    \"pink\",\n    \"pipe\",\n    \"pitch\",\n    \"place\",\n    \"plain\",\n    \"plan\",\n    \"plane\",\n    \"planet\",\n    \"planned\",\n    \"planning\",\n    \"plant\",\n    \"plastic\",\n    \"plate\",\n    \"plates\",\n    \"play\",\n    \"pleasant\",\n    \"please\",\n    \"pleasure\",\n    \"plenty\",\n    \"plural\",\n    \"plus\",\n    \"pocket\",\n    \"poem\",\n    \"poet\",\n    \"poetry\",\n    \"point\",\n    \"pole\",\n    \"police\",\n    \"policeman\",\n    \"political\",\n    \"pond\",\n    \"pony\",\n    \"pool\",\n    \"poor\",\n    \"popular\",\n    \"population\",\n    \"porch\",\n    \"port\",\n    \"position\",\n    \"positive\",\n    \"possible\",\n    \"possibly\",\n    \"post\",\n    \"pot\",\n    \"potatoes\",\n    \"pound\",\n    \"pour\",\n    \"powder\",\n    \"power\",\n    \"powerful\",\n    \"practical\",\n    \"practice\",\n    \"prepare\",\n    \"present\",\n    \"president\",\n    \"press\",\n    \"pressure\",\n    \"pretty\",\n    \"prevent\",\n    \"previous\",\n    \"price\",\n    \"pride\",\n    \"primitive\",\n    \"principal\",\n    \"principle\",\n    \"printed\",\n    \"private\",\n    \"prize\",\n    \"probably\",\n    \"problem\",\n    \"process\",\n    \"produce\",\n    \"product\",\n    \"production\",\n    \"program\",\n    \"progress\",\n    \"promised\",\n    \"proper\",\n    \"properly\",\n    \"property\",\n    \"protection\",\n    \"proud\",\n    \"prove\",\n    \"provide\",\n    \"public\",\n    \"pull\",\n    \"pupil\",\n    \"pure\",\n    \"purple\",\n    \"purpose\",\n    \"push\",\n    \"put\",\n    \"putting\",\n    \"quarter\",\n    \"queen\",\n    \"question\",\n    \"quick\",\n    \"quickly\",\n    \"quiet\",\n    \"quietly\",\n    \"quite\",\n    \"rabbit\",\n    \"race\",\n    \"radio\",\n    \"railroad\",\n    \"rain\",\n    \"raise\",\n    \"ran\",\n    \"ranch\",\n    \"range\",\n    \"rapidly\",\n    \"rate\",\n    \"rather\",\n    \"raw\",\n    \"rays\",\n    \"reach\",\n    \"read\",\n    \"reader\",\n    \"ready\",\n    \"real\",\n    \"realize\",\n    \"rear\",\n    \"reason\",\n    \"recall\",\n    \"receive\",\n    \"recent\",\n    \"recently\",\n    \"recognize\",\n    \"record\",\n    \"red\",\n    \"refer\",\n    \"refused\",\n    \"region\",\n    \"regular\",\n    \"related\",\n    \"relationship\",\n    \"religious\",\n    \"remain\",\n    \"remarkable\",\n    \"remember\",\n    \"remove\",\n    \"repeat\",\n    \"replace\",\n    \"replied\",\n    \"report\",\n    \"represent\",\n    \"require\",\n    \"research\",\n    \"respect\",\n    \"rest\",\n    \"result\",\n    \"return\",\n    \"review\",\n    \"rhyme\",\n    \"rhythm\",\n    \"rice\",\n    \"rich\",\n    \"ride\",\n    \"riding\",\n    \"right\",\n    \"ring\",\n    \"rise\",\n    \"rising\",\n    \"river\",\n    \"road\",\n    \"roar\",\n    \"rock\",\n    \"rocket\",\n    \"rocky\",\n    \"rod\",\n    \"roll\",\n    \"roof\",\n    \"room\",\n    \"root\",\n    \"rope\",\n    \"rose\",\n    \"rough\",\n    \"round\",\n    \"route\",\n    \"row\",\n    \"rubbed\",\n    \"rubber\",\n    \"rule\",\n    \"ruler\",\n    \"run\",\n    \"running\",\n    \"rush\",\n    \"sad\",\n    \"saddle\",\n    \"safe\",\n    \"safety\",\n    \"said\",\n    \"sail\",\n    \"sale\",\n    \"salmon\",\n    \"salt\",\n    \"same\",\n    \"sand\",\n    \"sang\",\n    \"sat\",\n    \"satellites\",\n    \"satisfied\",\n    \"save\",\n    \"saved\",\n    \"saw\",\n    \"say\",\n    \"scale\",\n    \"scared\",\n    \"scene\",\n    \"school\",\n    \"science\",\n    \"scientific\",\n    \"scientist\",\n    \"score\",\n    \"screen\",\n    \"sea\",\n    \"search\",\n    \"season\",\n    \"seat\",\n    \"second\",\n    \"secret\",\n    \"section\",\n    \"see\",\n    \"seed\",\n    \"seeing\",\n    \"seems\",\n    \"seen\",\n    \"seldom\",\n    \"select\",\n    \"selection\",\n    \"sell\",\n    \"send\",\n    \"sense\",\n    \"sent\",\n    \"sentence\",\n    \"separate\",\n    \"series\",\n    \"serious\",\n    \"serve\",\n    \"service\",\n    \"sets\",\n    \"setting\",\n    \"settle\",\n    \"settlers\",\n    \"seven\",\n    \"several\",\n    \"shade\",\n    \"shadow\",\n    \"shake\",\n    \"shaking\",\n    \"shall\",\n    \"shallow\",\n    \"shape\",\n    \"share\",\n    \"sharp\",\n    \"she\",\n    \"sheep\",\n    \"sheet\",\n    \"shelf\",\n    \"shells\",\n    \"shelter\",\n    \"shine\",\n    \"shinning\",\n    \"ship\",\n    \"shirt\",\n    \"shoe\",\n    \"shoot\",\n    \"shop\",\n    \"shore\",\n    \"short\",\n    \"shorter\",\n    \"shot\",\n    \"should\",\n    \"shoulder\",\n    \"shout\",\n    \"show\",\n    \"shown\",\n    \"shut\",\n    \"sick\",\n    \"sides\",\n    \"sight\",\n    \"sign\",\n    \"signal\",\n    \"silence\",\n    \"silent\",\n    \"silk\",\n    \"silly\",\n    \"silver\",\n    \"similar\",\n    \"simple\",\n    \"simplest\",\n    \"simply\",\n    \"since\",\n    \"sing\",\n    \"single\",\n    \"sink\",\n    \"sister\",\n    \"sit\",\n    \"sitting\",\n    \"situation\",\n    \"six\",\n    \"size\",\n    \"skill\",\n    \"skin\",\n    \"sky\",\n    \"slabs\",\n    \"slave\",\n    \"sleep\",\n    \"slept\",\n    \"slide\",\n    \"slight\",\n    \"slightly\",\n    \"slip\",\n    \"slipped\",\n    \"slope\",\n    \"slow\",\n    \"slowly\",\n    \"small\",\n    \"smaller\",\n    \"smallest\",\n    \"smell\",\n    \"smile\",\n    \"smoke\",\n    \"smooth\",\n    \"snake\",\n    \"snow\",\n    \"so\",\n    \"soap\",\n    \"social\",\n    \"society\",\n    \"soft\",\n    \"softly\",\n    \"soil\",\n    \"solar\",\n    \"sold\",\n    \"soldier\",\n    \"solid\",\n    \"solution\",\n    \"solve\",\n    \"some\",\n    \"somebody\",\n    \"somehow\",\n    \"someone\",\n    \"something\",\n    \"sometime\",\n    \"somewhere\",\n    \"son\",\n    \"song\",\n    \"soon\",\n    \"sort\",\n    \"sound\",\n    \"source\",\n    \"south\",\n    \"southern\",\n    \"space\",\n    \"speak\",\n    \"special\",\n    \"species\",\n    \"specific\",\n    \"speech\",\n    \"speed\",\n    \"spell\",\n    \"spend\",\n    \"spent\",\n    \"spider\",\n    \"spin\",\n    \"spirit\",\n    \"spite\",\n    \"split\",\n    \"spoken\",\n    \"sport\",\n    \"spread\",\n    \"spring\",\n    \"square\",\n    \"stage\",\n    \"stairs\",\n    \"stand\",\n    \"standard\",\n    \"star\",\n    \"stared\",\n    \"start\",\n    \"state\",\n    \"statement\",\n    \"station\",\n    \"stay\",\n    \"steady\",\n    \"steam\",\n    \"steel\",\n    \"steep\",\n    \"stems\",\n    \"step\",\n    \"stepped\",\n    \"stick\",\n    \"stiff\",\n    \"still\",\n    \"stock\",\n    \"stomach\",\n    \"stone\",\n    \"stood\",\n    \"stop\",\n    \"stopped\",\n    \"store\",\n    \"storm\",\n    \"story\",\n    \"stove\",\n    \"straight\",\n    \"strange\",\n    \"stranger\",\n    \"straw\",\n    \"stream\",\n    \"street\",\n    \"strength\",\n    \"stretch\",\n    \"strike\",\n    \"string\",\n    \"strip\",\n    \"strong\",\n    \"stronger\",\n    \"struck\",\n    \"structure\",\n    \"struggle\",\n    \"stuck\",\n    \"student\",\n    \"studied\",\n    \"studying\",\n    \"subject\",\n    \"substance\",\n    \"success\",\n    \"successful\",\n    \"such\",\n    \"sudden\",\n    \"suddenly\",\n    \"sugar\",\n    \"suggest\",\n    \"suit\",\n    \"sum\",\n    \"summer\",\n    \"sun\",\n    \"sunlight\",\n    \"supper\",\n    \"supply\",\n    \"support\",\n    \"suppose\",\n    \"sure\",\n    \"surface\",\n    \"surprise\",\n    \"surrounded\",\n    \"swam\",\n    \"sweet\",\n    \"swept\",\n    \"swim\",\n    \"swimming\",\n    \"swing\",\n    \"swung\",\n    \"syllable\",\n    \"symbol\",\n    \"system\",\n    \"table\",\n    \"tail\",\n    \"take\",\n    \"taken\",\n    \"tales\",\n    \"talk\",\n    \"tall\",\n    \"tank\",\n    \"tape\",\n    \"task\",\n    \"taste\",\n    \"taught\",\n    \"tax\",\n    \"tea\",\n    \"teach\",\n    \"teacher\",\n    \"team\",\n    \"tears\",\n    \"teeth\",\n    \"telephone\",\n    \"television\",\n    \"tell\",\n    \"temperature\",\n    \"ten\",\n    \"tent\",\n    \"term\",\n    \"terrible\",\n    \"test\",\n    \"than\",\n    \"thank\",\n    \"that\",\n    \"thee\",\n    \"them\",\n    \"themselves\",\n    \"then\",\n    \"theory\",\n    \"there\",\n    \"therefore\",\n    \"these\",\n    \"they\",\n    \"thick\",\n    \"thin\",\n    \"thing\",\n    \"think\",\n    \"third\",\n    \"thirty\",\n    \"this\",\n    \"those\",\n    \"thou\",\n    \"though\",\n    \"thought\",\n    \"thousand\",\n    \"thread\",\n    \"three\",\n    \"threw\",\n    \"throat\",\n    \"through\",\n    \"throughout\",\n    \"throw\",\n    \"thrown\",\n    \"thumb\",\n    \"thus\",\n    \"thy\",\n    \"tide\",\n    \"tie\",\n    \"tight\",\n    \"tightly\",\n    \"till\",\n    \"time\",\n    \"tin\",\n    \"tiny\",\n    \"tip\",\n    \"tired\",\n    \"title\",\n    \"to\",\n    \"tobacco\",\n    \"today\",\n    \"together\",\n    \"told\",\n    \"tomorrow\",\n    \"tone\",\n    \"tongue\",\n    \"tonight\",\n    \"too\",\n    \"took\",\n    \"tool\",\n    \"top\",\n    \"topic\",\n    \"torn\",\n    \"total\",\n    \"touch\",\n    \"toward\",\n    \"tower\",\n    \"town\",\n    \"toy\",\n    \"trace\",\n    \"track\",\n    \"trade\",\n    \"traffic\",\n    \"trail\",\n    \"train\",\n    \"transportation\",\n    \"trap\",\n    \"travel\",\n    \"treated\",\n    \"tree\",\n    \"triangle\",\n    \"tribe\",\n    \"trick\",\n    \"tried\",\n    \"trip\",\n    \"troops\",\n    \"tropical\",\n    \"trouble\",\n    \"truck\",\n    \"trunk\",\n    \"truth\",\n    \"try\",\n    \"tube\",\n    \"tune\",\n    \"turn\",\n    \"twelve\",\n    \"twenty\",\n    \"twice\",\n    \"two\",\n    \"type\",\n    \"typical\",\n    \"uncle\",\n    \"under\",\n    \"underline\",\n    \"understanding\",\n    \"unhappy\",\n    \"union\",\n    \"unit\",\n    \"universe\",\n    \"unknown\",\n    \"unless\",\n    \"until\",\n    \"unusual\",\n    \"up\",\n    \"upon\",\n    \"upper\",\n    \"upward\",\n    \"us\",\n    \"use\",\n    \"useful\",\n    \"using\",\n    \"usual\",\n    \"usually\",\n    \"valley\",\n    \"valuable\",\n    \"value\",\n    \"vapor\",\n    \"variety\",\n    \"various\",\n    \"vast\",\n    \"vegetable\",\n    \"verb\",\n    \"vertical\",\n    \"very\",\n    \"vessels\",\n    \"victory\",\n    \"view\",\n    \"village\",\n    \"visit\",\n    \"visitor\",\n    \"voice\",\n    \"volume\",\n    \"vote\",\n    \"vowel\",\n    \"voyage\",\n    \"wagon\",\n    \"wait\",\n    \"walk\",\n    \"wall\",\n    \"want\",\n    \"war\",\n    \"warm\",\n    \"warn\",\n    \"was\",\n    \"wash\",\n    \"waste\",\n    \"watch\",\n    \"water\",\n    \"wave\",\n    \"way\",\n    \"we\",\n    \"weak\",\n    \"wealth\",\n    \"wear\",\n    \"weather\",\n    \"week\",\n    \"weigh\",\n    \"weight\",\n    \"welcome\",\n    \"well\",\n    \"went\",\n    \"were\",\n    \"west\",\n    \"western\",\n    \"wet\",\n    \"whale\",\n    \"what\",\n    \"whatever\",\n    \"wheat\",\n    \"wheel\",\n    \"when\",\n    \"whenever\",\n    \"where\",\n    \"wherever\",\n    \"whether\",\n    \"which\",\n    \"while\",\n    \"whispered\",\n    \"whistle\",\n    \"white\",\n    \"who\",\n    \"whole\",\n    \"whom\",\n    \"whose\",\n    \"why\",\n    \"wide\",\n    \"widely\",\n    \"wife\",\n    \"wild\",\n    \"will\",\n    \"willing\",\n    \"win\",\n    \"wind\",\n    \"window\",\n    \"wing\",\n    \"winter\",\n    \"wire\",\n    \"wise\",\n    \"wish\",\n    \"with\",\n    \"within\",\n    \"without\",\n    \"wolf\",\n    \"women\",\n    \"won\",\n    \"wonder\",\n    \"wonderful\",\n    \"wood\",\n    \"wooden\",\n    \"wool\",\n    \"word\",\n    \"wore\",\n    \"work\",\n    \"worker\",\n    \"world\",\n    \"worried\",\n    \"worry\",\n    \"worse\",\n    \"worth\",\n    \"would\",\n    \"wrapped\",\n    \"write\",\n    \"writer\",\n    \"writing\",\n    \"written\",\n    \"wrong\",\n    \"wrote\",\n    \"yard\",\n    \"year\",\n    \"yellow\",\n    \"yes\",\n    \"yesterday\",\n    \"yet\",\n    \"you\",\n    \"young\",\n    \"younger\",\n    \"your\",\n    \"yourself\",\n    \"youth\",\n    \"zero\",\n    \"zebra\",\n    \"zipper\",\n    \"zoo\",\n    \"zulu\"\n];\nconst shortestWordSize = wordList.reduce((shortestWord, currentWord)=>currentWord.length < shortestWord.length ? currentWord : shortestWord).length;\nconst longestWordSize = wordList.reduce((longestWord, currentWord)=>currentWord.length > longestWord.length ? currentWord : longestWord).length;\nfunction generate(options) {\n    // initalize random number generator for words if options.seed is provided\n    const random = (options === null || options === void 0 ? void 0 : options.seed) ? new seedrandom__WEBPACK_IMPORTED_MODULE_0__(options.seed) : null;\n    const { minLength, maxLength, ...rest } = options || {};\n    function word() {\n        let min = typeof minLength !== \"number\" ? shortestWordSize : limitWordSize(minLength);\n        const max = typeof maxLength !== \"number\" ? longestWordSize : limitWordSize(maxLength);\n        if (min > max) min = max;\n        let rightSize = false;\n        let wordUsed;\n        while(!rightSize){\n            wordUsed = generateRandomWord();\n            rightSize = wordUsed.length <= max && wordUsed.length >= min;\n        }\n        return wordUsed;\n    }\n    function generateRandomWord() {\n        return wordList[randInt(wordList.length)];\n    }\n    // limits the size of words to the minimum and maximum possible\n    function limitWordSize(wordSize) {\n        if (wordSize < shortestWordSize) wordSize = shortestWordSize;\n        if (wordSize > longestWordSize) wordSize = longestWordSize;\n        return wordSize;\n    }\n    // random int as seeded by options.seed if applicable, or Math.random() otherwise\n    function randInt(lessThan) {\n        const r = random ? random() : Math.random();\n        return Math.floor(r * lessThan);\n    }\n    // No arguments = generate one word\n    if (options === undefined) {\n        return word();\n    }\n    // Just a number = return that many words\n    if (typeof options === \"number\") {\n        options = {\n            exactly: options\n        };\n    } else if (Object.keys(rest).length === 0) {\n        return word();\n    }\n    // options supported: exactly, min, max, join\n    if (options.exactly) {\n        options.min = options.exactly;\n        options.max = options.exactly;\n    }\n    // not a number = one word par string\n    if (typeof options.wordsPerString !== \"number\") {\n        options.wordsPerString = 1;\n    }\n    //not a function = returns the raw word\n    if (typeof options.formatter !== \"function\") {\n        options.formatter = (word)=>word;\n    }\n    //not a string = separator is a space\n    if (typeof options.separator !== \"string\") {\n        options.separator = \" \";\n    }\n    const total = options.min + randInt(options.max + 1 - options.min);\n    let results = [];\n    let token = \"\";\n    let relativeIndex = 0;\n    for(let i = 0; i < total * options.wordsPerString; i++){\n        if (relativeIndex === options.wordsPerString - 1) {\n            token += options.formatter(word(), relativeIndex);\n        } else {\n            token += options.formatter(word(), relativeIndex) + options.separator;\n        }\n        relativeIndex++;\n        if ((i + 1) % options.wordsPerString === 0) {\n            results.push(token);\n            token = \"\";\n            relativeIndex = 0;\n        }\n    }\n    if (typeof options.join === \"string\") {\n        results = results.join(options.join);\n    }\n    return results;\n}\nfunction count(options) {\n    let { minLength, maxLength } = options || {};\n    if (typeof minLength !== \"number\") {\n        minLength = shortestWordSize;\n    }\n    if (typeof maxLength !== \"number\") {\n        maxLength = longestWordSize;\n    }\n    return wordList.filter((word)=>word.length >= minLength && word.length <= maxLength).length;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yYW5kb20td29yZHMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFvQztBQUVwQyw2Q0FBNkM7QUFDdEMsTUFBTUMsV0FBVztJQUN0QjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0QsQ0FBQztBQUVGLE1BQU1DLG1CQUFtQkQsU0FBU0UsTUFBTSxDQUFDLENBQUNDLGNBQWNDLGNBQ3REQSxZQUFZQyxNQUFNLEdBQUdGLGFBQWFFLE1BQU0sR0FBR0QsY0FBY0QsY0FDekRFLE1BQU07QUFFUixNQUFNQyxrQkFBa0JOLFNBQVNFLE1BQU0sQ0FBQyxDQUFDSyxhQUFhSCxjQUNwREEsWUFBWUMsTUFBTSxHQUFHRSxZQUFZRixNQUFNLEdBQUdELGNBQWNHLGFBQ3hERixNQUFNO0FBRUQsU0FBU0csU0FBU0MsT0FBTztJQUM5QiwwRUFBMEU7SUFDMUUsTUFBTUMsU0FBU0QsQ0FBQUEsb0JBQUFBLDhCQUFBQSxRQUFTRSxJQUFJLElBQUcsSUFBSVosdUNBQVVBLENBQUNVLFFBQVFFLElBQUksSUFBSTtJQUU5RCxNQUFNLEVBQUVDLFNBQVMsRUFBRUMsU0FBUyxFQUFFLEdBQUdDLE1BQU0sR0FBR0wsV0FBVyxDQUFDO0lBRXRELFNBQVNNO1FBQ1AsSUFBSUMsTUFDRixPQUFPSixjQUFjLFdBQ2pCWCxtQkFDQWdCLGNBQWNMO1FBRXBCLE1BQU1NLE1BQ0osT0FBT0wsY0FBYyxXQUNqQlAsa0JBQ0FXLGNBQWNKO1FBRXBCLElBQUlHLE1BQU1FLEtBQUtGLE1BQU1FO1FBRXJCLElBQUlDLFlBQVk7UUFDaEIsSUFBSUM7UUFDSixNQUFPLENBQUNELFVBQVc7WUFDakJDLFdBQVdDO1lBQ1hGLFlBQVlDLFNBQVNmLE1BQU0sSUFBSWEsT0FBT0UsU0FBU2YsTUFBTSxJQUFJVztRQUMzRDtRQUNBLE9BQU9JO0lBQ1Q7SUFFQSxTQUFTQztRQUNQLE9BQU9yQixRQUFRLENBQUNzQixRQUFRdEIsU0FBU0ssTUFBTSxFQUFFO0lBQzNDO0lBRUEsK0RBQStEO0lBQy9ELFNBQVNZLGNBQWNNLFFBQVE7UUFDN0IsSUFBSUEsV0FBV3RCLGtCQUFrQnNCLFdBQVd0QjtRQUM1QyxJQUFJc0IsV0FBV2pCLGlCQUFpQmlCLFdBQVdqQjtRQUMzQyxPQUFPaUI7SUFDVDtJQUVBLGlGQUFpRjtJQUNqRixTQUFTRCxRQUFRRSxRQUFRO1FBQ3ZCLE1BQU1DLElBQUlmLFNBQVNBLFdBQVdnQixLQUFLaEIsTUFBTTtRQUN6QyxPQUFPZ0IsS0FBS0MsS0FBSyxDQUFDRixJQUFJRDtJQUN4QjtJQUVBLG1DQUFtQztJQUNuQyxJQUFJZixZQUFZbUIsV0FBVztRQUN6QixPQUFPYjtJQUNUO0lBRUEseUNBQXlDO0lBQ3pDLElBQUksT0FBT04sWUFBWSxVQUFVO1FBQy9CQSxVQUFVO1lBQUVvQixTQUFTcEI7UUFBUTtJQUMvQixPQUFPLElBQUlxQixPQUFPQyxJQUFJLENBQUNqQixNQUFNVCxNQUFNLEtBQUssR0FBRztRQUN6QyxPQUFPVTtJQUNUO0lBRUEsNkNBQTZDO0lBQzdDLElBQUlOLFFBQVFvQixPQUFPLEVBQUU7UUFDbkJwQixRQUFRTyxHQUFHLEdBQUdQLFFBQVFvQixPQUFPO1FBQzdCcEIsUUFBUVMsR0FBRyxHQUFHVCxRQUFRb0IsT0FBTztJQUMvQjtJQUVBLHFDQUFxQztJQUNyQyxJQUFJLE9BQU9wQixRQUFRdUIsY0FBYyxLQUFLLFVBQVU7UUFDOUN2QixRQUFRdUIsY0FBYyxHQUFHO0lBQzNCO0lBRUEsdUNBQXVDO0lBQ3ZDLElBQUksT0FBT3ZCLFFBQVF3QixTQUFTLEtBQUssWUFBWTtRQUMzQ3hCLFFBQVF3QixTQUFTLEdBQUcsQ0FBQ2xCLE9BQVNBO0lBQ2hDO0lBRUEscUNBQXFDO0lBQ3JDLElBQUksT0FBT04sUUFBUXlCLFNBQVMsS0FBSyxVQUFVO1FBQ3pDekIsUUFBUXlCLFNBQVMsR0FBRztJQUN0QjtJQUVBLE1BQU1DLFFBQVExQixRQUFRTyxHQUFHLEdBQUdNLFFBQVFiLFFBQVFTLEdBQUcsR0FBRyxJQUFJVCxRQUFRTyxHQUFHO0lBQ2pFLElBQUlvQixVQUFVLEVBQUU7SUFDaEIsSUFBSUMsUUFBUTtJQUNaLElBQUlDLGdCQUFnQjtJQUVwQixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUosUUFBUTFCLFFBQVF1QixjQUFjLEVBQUVPLElBQUs7UUFDdkQsSUFBSUQsa0JBQWtCN0IsUUFBUXVCLGNBQWMsR0FBRyxHQUFHO1lBQ2hESyxTQUFTNUIsUUFBUXdCLFNBQVMsQ0FBQ2xCLFFBQVF1QjtRQUNyQyxPQUFPO1lBQ0xELFNBQVM1QixRQUFRd0IsU0FBUyxDQUFDbEIsUUFBUXVCLGlCQUFpQjdCLFFBQVF5QixTQUFTO1FBQ3ZFO1FBQ0FJO1FBQ0EsSUFBSSxDQUFDQyxJQUFJLEtBQUs5QixRQUFRdUIsY0FBYyxLQUFLLEdBQUc7WUFDMUNJLFFBQVFJLElBQUksQ0FBQ0g7WUFDYkEsUUFBUTtZQUNSQyxnQkFBZ0I7UUFDbEI7SUFDRjtJQUNBLElBQUksT0FBTzdCLFFBQVFnQyxJQUFJLEtBQUssVUFBVTtRQUNwQ0wsVUFBVUEsUUFBUUssSUFBSSxDQUFDaEMsUUFBUWdDLElBQUk7SUFDckM7SUFFQSxPQUFPTDtBQUNUO0FBRU8sU0FBU00sTUFBTWpDLE9BQU87SUFDM0IsSUFBSSxFQUFFRyxTQUFTLEVBQUVDLFNBQVMsRUFBRSxHQUFHSixXQUFXLENBQUM7SUFFM0MsSUFBSSxPQUFPRyxjQUFjLFVBQVU7UUFDakNBLFlBQVlYO0lBQ2Q7SUFFQSxJQUFJLE9BQU9ZLGNBQWMsVUFBVTtRQUNqQ0EsWUFBWVA7SUFDZDtJQUVBLE9BQU9OLFNBQVMyQyxNQUFNLENBQ3BCLENBQUM1QixPQUFTQSxLQUFLVixNQUFNLElBQUlPLGFBQWFHLEtBQUtWLE1BQU0sSUFBSVEsV0FDckRSLE1BQU07QUFDViIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmFuZG9tLXdvcmRzL2luZGV4LmpzPzFkZGUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHNlZWRyYW5kb20gZnJvbSBcInNlZWRyYW5kb21cIjtcblxuLy8gRXhwb3J0IHRoZSB3b3JkIGxpc3QgYXMgaXQgaXMgb2Z0ZW4gdXNlZnVsXG5leHBvcnQgY29uc3Qgd29yZExpc3QgPSBbXG4gIFwiYWJpbGl0eVwiLFxuICBcImFibGVcIixcbiAgXCJhYm9hcmRcIixcbiAgXCJhYm91dFwiLFxuICBcImFib3ZlXCIsXG4gIFwiYWNjZXB0XCIsXG4gIFwiYWNjaWRlbnRcIixcbiAgXCJhY2NvcmRpbmdcIixcbiAgXCJhY2NvdW50XCIsXG4gIFwiYWNjdXJhdGVcIixcbiAgXCJhY3Jlc1wiLFxuICBcImFjcm9zc1wiLFxuICBcImFjdFwiLFxuICBcImFjdGlvblwiLFxuICBcImFjdGl2ZVwiLFxuICBcImFjdGl2aXR5XCIsXG4gIFwiYWN0dWFsXCIsXG4gIFwiYWN0dWFsbHlcIixcbiAgXCJhZGRcIixcbiAgXCJhZGRpdGlvblwiLFxuICBcImFkZGl0aW9uYWxcIixcbiAgXCJhZGplY3RpdmVcIixcbiAgXCJhZHVsdFwiLFxuICBcImFkdmVudHVyZVwiLFxuICBcImFkdmljZVwiLFxuICBcImFmZmVjdFwiLFxuICBcImFmcmFpZFwiLFxuICBcImFmdGVyXCIsXG4gIFwiYWZ0ZXJub29uXCIsXG4gIFwiYWdhaW5cIixcbiAgXCJhZ2FpbnN0XCIsXG4gIFwiYWdlXCIsXG4gIFwiYWdvXCIsXG4gIFwiYWdyZWVcIixcbiAgXCJhaGVhZFwiLFxuICBcImFpZFwiLFxuICBcImFpclwiLFxuICBcImFpcnBsYW5lXCIsXG4gIFwiYWxpa2VcIixcbiAgXCJhbGl2ZVwiLFxuICBcImFsbFwiLFxuICBcImFsbG93XCIsXG4gIFwiYWxtb3N0XCIsXG4gIFwiYWxvbmVcIixcbiAgXCJhbG9uZ1wiLFxuICBcImFsb3VkXCIsXG4gIFwiYWxwaGFiZXRcIixcbiAgXCJhbHJlYWR5XCIsXG4gIFwiYWxzb1wiLFxuICBcImFsdGhvdWdoXCIsXG4gIFwiYW1cIixcbiAgXCJhbW9uZ1wiLFxuICBcImFtb3VudFwiLFxuICBcImFuY2llbnRcIixcbiAgXCJhbmdsZVwiLFxuICBcImFuZ3J5XCIsXG4gIFwiYW5pbWFsXCIsXG4gIFwiYW5ub3VuY2VkXCIsXG4gIFwiYW5vdGhlclwiLFxuICBcImFuc3dlclwiLFxuICBcImFudHNcIixcbiAgXCJhbnlcIixcbiAgXCJhbnlib2R5XCIsXG4gIFwiYW55b25lXCIsXG4gIFwiYW55dGhpbmdcIixcbiAgXCJhbnl3YXlcIixcbiAgXCJhbnl3aGVyZVwiLFxuICBcImFwYXJ0XCIsXG4gIFwiYXBhcnRtZW50XCIsXG4gIFwiYXBwZWFyYW5jZVwiLFxuICBcImFwcGxlXCIsXG4gIFwiYXBwbGllZFwiLFxuICBcImFwcHJvcHJpYXRlXCIsXG4gIFwiYXJlXCIsXG4gIFwiYXJlYVwiLFxuICBcImFybVwiLFxuICBcImFybXlcIixcbiAgXCJhcm91bmRcIixcbiAgXCJhcnJhbmdlXCIsXG4gIFwiYXJyYW5nZW1lbnRcIixcbiAgXCJhcnJpdmVcIixcbiAgXCJhcnJvd1wiLFxuICBcImFydFwiLFxuICBcImFydGljbGVcIixcbiAgXCJhc1wiLFxuICBcImFzaWRlXCIsXG4gIFwiYXNrXCIsXG4gIFwiYXNsZWVwXCIsXG4gIFwiYXRcIixcbiAgXCJhdGVcIixcbiAgXCJhdG1vc3BoZXJlXCIsXG4gIFwiYXRvbVwiLFxuICBcImF0b21pY1wiLFxuICBcImF0dGFjaGVkXCIsXG4gIFwiYXR0YWNrXCIsXG4gIFwiYXR0ZW1wdFwiLFxuICBcImF0dGVudGlvblwiLFxuICBcImF1ZGllbmNlXCIsXG4gIFwiYXV0aG9yXCIsXG4gIFwiYXV0b21vYmlsZVwiLFxuICBcImF2YWlsYWJsZVwiLFxuICBcImF2ZXJhZ2VcIixcbiAgXCJhdm9pZFwiLFxuICBcImF3YXJlXCIsXG4gIFwiYXdheVwiLFxuICBcImJhYnlcIixcbiAgXCJiYWNrXCIsXG4gIFwiYmFkXCIsXG4gIFwiYmFkbHlcIixcbiAgXCJiYWdcIixcbiAgXCJiYWxhbmNlXCIsXG4gIFwiYmFsbFwiLFxuICBcImJhbGxvb25cIixcbiAgXCJiYW5kXCIsXG4gIFwiYmFua1wiLFxuICBcImJhclwiLFxuICBcImJhcmVcIixcbiAgXCJiYXJrXCIsXG4gIFwiYmFyblwiLFxuICBcImJhc2VcIixcbiAgXCJiYXNlYmFsbFwiLFxuICBcImJhc2ljXCIsXG4gIFwiYmFzaXNcIixcbiAgXCJiYXNrZXRcIixcbiAgXCJiYXRcIixcbiAgXCJiYXR0bGVcIixcbiAgXCJiZVwiLFxuICBcImJlYW5cIixcbiAgXCJiZWFyXCIsXG4gIFwiYmVhdFwiLFxuICBcImJlYXV0aWZ1bFwiLFxuICBcImJlYXV0eVwiLFxuICBcImJlY2FtZVwiLFxuICBcImJlY2F1c2VcIixcbiAgXCJiZWNvbWVcIixcbiAgXCJiZWNvbWluZ1wiLFxuICBcImJlZVwiLFxuICBcImJlZW5cIixcbiAgXCJiZWZvcmVcIixcbiAgXCJiZWdhblwiLFxuICBcImJlZ2lubmluZ1wiLFxuICBcImJlZ3VuXCIsXG4gIFwiYmVoYXZpb3JcIixcbiAgXCJiZWhpbmRcIixcbiAgXCJiZWluZ1wiLFxuICBcImJlbGlldmVkXCIsXG4gIFwiYmVsbFwiLFxuICBcImJlbG9uZ1wiLFxuICBcImJlbG93XCIsXG4gIFwiYmVsdFwiLFxuICBcImJlbmRcIixcbiAgXCJiZW5lYXRoXCIsXG4gIFwiYmVudFwiLFxuICBcImJlc2lkZVwiLFxuICBcImJlc3RcIixcbiAgXCJiZXRcIixcbiAgXCJiZXR0ZXJcIixcbiAgXCJiZXR3ZWVuXCIsXG4gIFwiYmV5b25kXCIsXG4gIFwiYmljeWNsZVwiLFxuICBcImJpZ2dlclwiLFxuICBcImJpZ2dlc3RcIixcbiAgXCJiaWxsXCIsXG4gIFwiYmlyZHNcIixcbiAgXCJiaXJ0aFwiLFxuICBcImJpcnRoZGF5XCIsXG4gIFwiYml0XCIsXG4gIFwiYml0ZVwiLFxuICBcImJsYWNrXCIsXG4gIFwiYmxhbmtcIixcbiAgXCJibGFua2V0XCIsXG4gIFwiYmxld1wiLFxuICBcImJsaW5kXCIsXG4gIFwiYmxvY2tcIixcbiAgXCJibG9vZFwiLFxuICBcImJsb3dcIixcbiAgXCJibHVlXCIsXG4gIFwiYm9hcmRcIixcbiAgXCJib2F0XCIsXG4gIFwiYm9keVwiLFxuICBcImJvbmVcIixcbiAgXCJib29rXCIsXG4gIFwiYm9yZGVyXCIsXG4gIFwiYm9yblwiLFxuICBcImJvdGhcIixcbiAgXCJib3R0bGVcIixcbiAgXCJib3R0b21cIixcbiAgXCJib3VuZFwiLFxuICBcImJvd1wiLFxuICBcImJvd2xcIixcbiAgXCJib3hcIixcbiAgXCJib3lcIixcbiAgXCJicmFpblwiLFxuICBcImJyYW5jaFwiLFxuICBcImJyYXNzXCIsXG4gIFwiYnJhdmVcIixcbiAgXCJicmVhZFwiLFxuICBcImJyZWFrXCIsXG4gIFwiYnJlYWtmYXN0XCIsXG4gIFwiYnJlYXRoXCIsXG4gIFwiYnJlYXRoZVwiLFxuICBcImJyZWF0aGluZ1wiLFxuICBcImJyZWV6ZVwiLFxuICBcImJyaWNrXCIsXG4gIFwiYnJpZGdlXCIsXG4gIFwiYnJpZWZcIixcbiAgXCJicmlnaHRcIixcbiAgXCJicmluZ1wiLFxuICBcImJyb2FkXCIsXG4gIFwiYnJva2VcIixcbiAgXCJicm9rZW5cIixcbiAgXCJicm90aGVyXCIsXG4gIFwiYnJvdWdodFwiLFxuICBcImJyb3duXCIsXG4gIFwiYnJ1c2hcIixcbiAgXCJidWZmYWxvXCIsXG4gIFwiYnVpbGRcIixcbiAgXCJidWlsZGluZ1wiLFxuICBcImJ1aWx0XCIsXG4gIFwiYnVyaWVkXCIsXG4gIFwiYnVyblwiLFxuICBcImJ1cnN0XCIsXG4gIFwiYnVzXCIsXG4gIFwiYnVzaFwiLFxuICBcImJ1c2luZXNzXCIsXG4gIFwiYnVzeVwiLFxuICBcImJ1dFwiLFxuICBcImJ1dHRlclwiLFxuICBcImJ1eVwiLFxuICBcImJ5XCIsXG4gIFwiY2FiaW5cIixcbiAgXCJjYWdlXCIsXG4gIFwiY2FrZVwiLFxuICBcImNhbGxcIixcbiAgXCJjYWxtXCIsXG4gIFwiY2FtZVwiLFxuICBcImNhbWVyYVwiLFxuICBcImNhbXBcIixcbiAgXCJjYW5cIixcbiAgXCJjYW5hbFwiLFxuICBcImNhbm5vdFwiLFxuICBcImNhcFwiLFxuICBcImNhcGl0YWxcIixcbiAgXCJjYXB0YWluXCIsXG4gIFwiY2FwdHVyZWRcIixcbiAgXCJjYXJcIixcbiAgXCJjYXJib25cIixcbiAgXCJjYXJkXCIsXG4gIFwiY2FyZVwiLFxuICBcImNhcmVmdWxcIixcbiAgXCJjYXJlZnVsbHlcIixcbiAgXCJjYXJyaWVkXCIsXG4gIFwiY2FycnlcIixcbiAgXCJjYXNlXCIsXG4gIFwiY2FzdFwiLFxuICBcImNhc3RsZVwiLFxuICBcImNhdFwiLFxuICBcImNhdGNoXCIsXG4gIFwiY2F0dGxlXCIsXG4gIFwiY2F1Z2h0XCIsXG4gIFwiY2F1c2VcIixcbiAgXCJjYXZlXCIsXG4gIFwiY2VsbFwiLFxuICBcImNlbnRcIixcbiAgXCJjZW50ZXJcIixcbiAgXCJjZW50cmFsXCIsXG4gIFwiY2VudHVyeVwiLFxuICBcImNlcnRhaW5cIixcbiAgXCJjZXJ0YWlubHlcIixcbiAgXCJjaGFpblwiLFxuICBcImNoYWlyXCIsXG4gIFwiY2hhbWJlclwiLFxuICBcImNoYW5jZVwiLFxuICBcImNoYW5nZVwiLFxuICBcImNoYW5naW5nXCIsXG4gIFwiY2hhcHRlclwiLFxuICBcImNoYXJhY3RlclwiLFxuICBcImNoYXJhY3RlcmlzdGljXCIsXG4gIFwiY2hhcmdlXCIsXG4gIFwiY2hhcnRcIixcbiAgXCJjaGVja1wiLFxuICBcImNoZWVzZVwiLFxuICBcImNoZW1pY2FsXCIsXG4gIFwiY2hlc3RcIixcbiAgXCJjaGlja2VuXCIsXG4gIFwiY2hpZWZcIixcbiAgXCJjaGlsZFwiLFxuICBcImNoaWxkcmVuXCIsXG4gIFwiY2hvaWNlXCIsXG4gIFwiY2hvb3NlXCIsXG4gIFwiY2hvc2VcIixcbiAgXCJjaG9zZW5cIixcbiAgXCJjaHVyY2hcIixcbiAgXCJjaXJjbGVcIixcbiAgXCJjaXJjdXNcIixcbiAgXCJjaXRpemVuXCIsXG4gIFwiY2l0eVwiLFxuICBcImNsYXNzXCIsXG4gIFwiY2xhc3Nyb29tXCIsXG4gIFwiY2xhd3NcIixcbiAgXCJjbGF5XCIsXG4gIFwiY2xlYW5cIixcbiAgXCJjbGVhclwiLFxuICBcImNsZWFybHlcIixcbiAgXCJjbGltYXRlXCIsXG4gIFwiY2xpbWJcIixcbiAgXCJjbG9ja1wiLFxuICBcImNsb3NlXCIsXG4gIFwiY2xvc2VseVwiLFxuICBcImNsb3NlclwiLFxuICBcImNsb3RoXCIsXG4gIFwiY2xvdGhlc1wiLFxuICBcImNsb3RoaW5nXCIsXG4gIFwiY2xvdWRcIixcbiAgXCJjbHViXCIsXG4gIFwiY29hY2hcIixcbiAgXCJjb2FsXCIsXG4gIFwiY29hc3RcIixcbiAgXCJjb2F0XCIsXG4gIFwiY29mZmVlXCIsXG4gIFwiY29sZFwiLFxuICBcImNvbGxlY3RcIixcbiAgXCJjb2xsZWdlXCIsXG4gIFwiY29sb255XCIsXG4gIFwiY29sb3JcIixcbiAgXCJjb2x1bW5cIixcbiAgXCJjb21iaW5hdGlvblwiLFxuICBcImNvbWJpbmVcIixcbiAgXCJjb21lXCIsXG4gIFwiY29tZm9ydGFibGVcIixcbiAgXCJjb21pbmdcIixcbiAgXCJjb21tYW5kXCIsXG4gIFwiY29tbW9uXCIsXG4gIFwiY29tbXVuaXR5XCIsXG4gIFwiY29tcGFueVwiLFxuICBcImNvbXBhcmVcIixcbiAgXCJjb21wYXNzXCIsXG4gIFwiY29tcGxldGVcIixcbiAgXCJjb21wbGV0ZWx5XCIsXG4gIFwiY29tcGxleFwiLFxuICBcImNvbXBvc2VkXCIsXG4gIFwiY29tcG9zaXRpb25cIixcbiAgXCJjb21wb3VuZFwiLFxuICBcImNvbmNlcm5lZFwiLFxuICBcImNvbmRpdGlvblwiLFxuICBcImNvbmdyZXNzXCIsXG4gIFwiY29ubmVjdGVkXCIsXG4gIFwiY29uc2lkZXJcIixcbiAgXCJjb25zaXN0XCIsXG4gIFwiY29uc29uYW50XCIsXG4gIFwiY29uc3RhbnRseVwiLFxuICBcImNvbnN0cnVjdGlvblwiLFxuICBcImNvbnRhaW5cIixcbiAgXCJjb250aW5lbnRcIixcbiAgXCJjb250aW51ZWRcIixcbiAgXCJjb250cmFzdFwiLFxuICBcImNvbnRyb2xcIixcbiAgXCJjb252ZXJzYXRpb25cIixcbiAgXCJjb29rXCIsXG4gIFwiY29va2llc1wiLFxuICBcImNvb2xcIixcbiAgXCJjb3BwZXJcIixcbiAgXCJjb3B5XCIsXG4gIFwiY29yblwiLFxuICBcImNvcm5lclwiLFxuICBcImNvcnJlY3RcIixcbiAgXCJjb3JyZWN0bHlcIixcbiAgXCJjb3N0XCIsXG4gIFwiY290dG9uXCIsXG4gIFwiY291bGRcIixcbiAgXCJjb3VudFwiLFxuICBcImNvdW50cnlcIixcbiAgXCJjb3VwbGVcIixcbiAgXCJjb3VyYWdlXCIsXG4gIFwiY291cnNlXCIsXG4gIFwiY291cnRcIixcbiAgXCJjb3ZlclwiLFxuICBcImNvd1wiLFxuICBcImNvd2JveVwiLFxuICBcImNyYWNrXCIsXG4gIFwiY3JlYW1cIixcbiAgXCJjcmVhdGVcIixcbiAgXCJjcmVhdHVyZVwiLFxuICBcImNyZXdcIixcbiAgXCJjcm9wXCIsXG4gIFwiY3Jvc3NcIixcbiAgXCJjcm93ZFwiLFxuICBcImNyeVwiLFxuICBcImN1cFwiLFxuICBcImN1cmlvdXNcIixcbiAgXCJjdXJyZW50XCIsXG4gIFwiY3VydmVcIixcbiAgXCJjdXN0b21zXCIsXG4gIFwiY3V0XCIsXG4gIFwiY3V0dGluZ1wiLFxuICBcImRhaWx5XCIsXG4gIFwiZGFtYWdlXCIsXG4gIFwiZGFuY2VcIixcbiAgXCJkYW5nZXJcIixcbiAgXCJkYW5nZXJvdXNcIixcbiAgXCJkYXJrXCIsXG4gIFwiZGFya25lc3NcIixcbiAgXCJkYXRlXCIsXG4gIFwiZGF1Z2h0ZXJcIixcbiAgXCJkYXduXCIsXG4gIFwiZGF5XCIsXG4gIFwiZGVhZFwiLFxuICBcImRlYWxcIixcbiAgXCJkZWFyXCIsXG4gIFwiZGVhdGhcIixcbiAgXCJkZWNpZGVcIixcbiAgXCJkZWNsYXJlZFwiLFxuICBcImRlZXBcIixcbiAgXCJkZWVwbHlcIixcbiAgXCJkZWVyXCIsXG4gIFwiZGVmaW5pdGlvblwiLFxuICBcImRlZ3JlZVwiLFxuICBcImRlcGVuZFwiLFxuICBcImRlcHRoXCIsXG4gIFwiZGVzY3JpYmVcIixcbiAgXCJkZXNlcnRcIixcbiAgXCJkZXNpZ25cIixcbiAgXCJkZXNrXCIsXG4gIFwiZGV0YWlsXCIsXG4gIFwiZGV0ZXJtaW5lXCIsXG4gIFwiZGV2ZWxvcFwiLFxuICBcImRldmVsb3BtZW50XCIsXG4gIFwiZGlhZ3JhbVwiLFxuICBcImRpYW1ldGVyXCIsXG4gIFwiZGlkXCIsXG4gIFwiZGllXCIsXG4gIFwiZGlmZmVyXCIsXG4gIFwiZGlmZmVyZW5jZVwiLFxuICBcImRpZmZlcmVudFwiLFxuICBcImRpZmZpY3VsdFwiLFxuICBcImRpZmZpY3VsdHlcIixcbiAgXCJkaWdcIixcbiAgXCJkaW5uZXJcIixcbiAgXCJkaXJlY3RcIixcbiAgXCJkaXJlY3Rpb25cIixcbiAgXCJkaXJlY3RseVwiLFxuICBcImRpcnRcIixcbiAgXCJkaXJ0eVwiLFxuICBcImRpc2FwcGVhclwiLFxuICBcImRpc2NvdmVyXCIsXG4gIFwiZGlzY292ZXJ5XCIsXG4gIFwiZGlzY3Vzc1wiLFxuICBcImRpc2N1c3Npb25cIixcbiAgXCJkaXNlYXNlXCIsXG4gIFwiZGlzaFwiLFxuICBcImRpc3RhbmNlXCIsXG4gIFwiZGlzdGFudFwiLFxuICBcImRpdmlkZVwiLFxuICBcImRpdmlzaW9uXCIsXG4gIFwiZG9cIixcbiAgXCJkb2N0b3JcIixcbiAgXCJkb2VzXCIsXG4gIFwiZG9nXCIsXG4gIFwiZG9pbmdcIixcbiAgXCJkb2xsXCIsXG4gIFwiZG9sbGFyXCIsXG4gIFwiZG9uZVwiLFxuICBcImRvbmtleVwiLFxuICBcImRvb3JcIixcbiAgXCJkb3RcIixcbiAgXCJkb3VibGVcIixcbiAgXCJkb3VidFwiLFxuICBcImRvd25cIixcbiAgXCJkb3plblwiLFxuICBcImRyYXdcIixcbiAgXCJkcmF3blwiLFxuICBcImRyZWFtXCIsXG4gIFwiZHJlc3NcIixcbiAgXCJkcmV3XCIsXG4gIFwiZHJpZWRcIixcbiAgXCJkcmlua1wiLFxuICBcImRyaXZlXCIsXG4gIFwiZHJpdmVuXCIsXG4gIFwiZHJpdmVyXCIsXG4gIFwiZHJpdmluZ1wiLFxuICBcImRyb3BcIixcbiAgXCJkcm9wcGVkXCIsXG4gIFwiZHJvdmVcIixcbiAgXCJkcnlcIixcbiAgXCJkdWNrXCIsXG4gIFwiZHVlXCIsXG4gIFwiZHVnXCIsXG4gIFwiZHVsbFwiLFxuICBcImR1cmluZ1wiLFxuICBcImR1c3RcIixcbiAgXCJkdXR5XCIsXG4gIFwiZWFjaFwiLFxuICBcImVhZ2VyXCIsXG4gIFwiZWFyXCIsXG4gIFwiZWFybGllclwiLFxuICBcImVhcmx5XCIsXG4gIFwiZWFyblwiLFxuICBcImVhcnRoXCIsXG4gIFwiZWFzaWVyXCIsXG4gIFwiZWFzaWx5XCIsXG4gIFwiZWFzdFwiLFxuICBcImVhc3lcIixcbiAgXCJlYXRcIixcbiAgXCJlYXRlblwiLFxuICBcImVkZ2VcIixcbiAgXCJlZHVjYXRpb25cIixcbiAgXCJlZmZlY3RcIixcbiAgXCJlZmZvcnRcIixcbiAgXCJlZ2dcIixcbiAgXCJlaWdodFwiLFxuICBcImVpdGhlclwiLFxuICBcImVsZWN0cmljXCIsXG4gIFwiZWxlY3RyaWNpdHlcIixcbiAgXCJlbGVtZW50XCIsXG4gIFwiZWxlcGhhbnRcIixcbiAgXCJlbGV2ZW5cIixcbiAgXCJlbHNlXCIsXG4gIFwiZW1wdHlcIixcbiAgXCJlbmRcIixcbiAgXCJlbmVteVwiLFxuICBcImVuZXJneVwiLFxuICBcImVuZ2luZVwiLFxuICBcImVuZ2luZWVyXCIsXG4gIFwiZW5qb3lcIixcbiAgXCJlbm91Z2hcIixcbiAgXCJlbnRlclwiLFxuICBcImVudGlyZVwiLFxuICBcImVudGlyZWx5XCIsXG4gIFwiZW52aXJvbm1lbnRcIixcbiAgXCJlcXVhbFwiLFxuICBcImVxdWFsbHlcIixcbiAgXCJlcXVhdG9yXCIsXG4gIFwiZXF1aXBtZW50XCIsXG4gIFwiZXNjYXBlXCIsXG4gIFwiZXNwZWNpYWxseVwiLFxuICBcImVzc2VudGlhbFwiLFxuICBcImVzdGFibGlzaFwiLFxuICBcImV2ZW5cIixcbiAgXCJldmVuaW5nXCIsXG4gIFwiZXZlbnRcIixcbiAgXCJldmVudHVhbGx5XCIsXG4gIFwiZXZlclwiLFxuICBcImV2ZXJ5XCIsXG4gIFwiZXZlcnlib2R5XCIsXG4gIFwiZXZlcnlvbmVcIixcbiAgXCJldmVyeXRoaW5nXCIsXG4gIFwiZXZlcnl3aGVyZVwiLFxuICBcImV2aWRlbmNlXCIsXG4gIFwiZXhhY3RcIixcbiAgXCJleGFjdGx5XCIsXG4gIFwiZXhhbWluZVwiLFxuICBcImV4YW1wbGVcIixcbiAgXCJleGNlbGxlbnRcIixcbiAgXCJleGNlcHRcIixcbiAgXCJleGNoYW5nZVwiLFxuICBcImV4Y2l0ZWRcIixcbiAgXCJleGNpdGVtZW50XCIsXG4gIFwiZXhjaXRpbmdcIixcbiAgXCJleGNsYWltZWRcIixcbiAgXCJleGVyY2lzZVwiLFxuICBcImV4aXN0XCIsXG4gIFwiZXhwZWN0XCIsXG4gIFwiZXhwZXJpZW5jZVwiLFxuICBcImV4cGVyaW1lbnRcIixcbiAgXCJleHBsYWluXCIsXG4gIFwiZXhwbGFuYXRpb25cIixcbiAgXCJleHBsb3JlXCIsXG4gIFwiZXhwcmVzc1wiLFxuICBcImV4cHJlc3Npb25cIixcbiAgXCJleHRyYVwiLFxuICBcImV5ZVwiLFxuICBcImZhY2VcIixcbiAgXCJmYWNpbmdcIixcbiAgXCJmYWN0XCIsXG4gIFwiZmFjdG9yXCIsXG4gIFwiZmFjdG9yeVwiLFxuICBcImZhaWxlZFwiLFxuICBcImZhaXJcIixcbiAgXCJmYWlybHlcIixcbiAgXCJmYWxsXCIsXG4gIFwiZmFsbGVuXCIsXG4gIFwiZmFtaWxpYXJcIixcbiAgXCJmYW1pbHlcIixcbiAgXCJmYW1vdXNcIixcbiAgXCJmYXJcIixcbiAgXCJmYXJtXCIsXG4gIFwiZmFybWVyXCIsXG4gIFwiZmFydGhlclwiLFxuICBcImZhc3RcIixcbiAgXCJmYXN0ZW5lZFwiLFxuICBcImZhc3RlclwiLFxuICBcImZhdFwiLFxuICBcImZhdGhlclwiLFxuICBcImZhdm9yaXRlXCIsXG4gIFwiZmVhclwiLFxuICBcImZlYXRoZXJzXCIsXG4gIFwiZmVhdHVyZVwiLFxuICBcImZlZFwiLFxuICBcImZlZWRcIixcbiAgXCJmZWVsXCIsXG4gIFwiZmVldFwiLFxuICBcImZlbGxcIixcbiAgXCJmZWxsb3dcIixcbiAgXCJmZWx0XCIsXG4gIFwiZmVuY2VcIixcbiAgXCJmZXdcIixcbiAgXCJmZXdlclwiLFxuICBcImZpZWxkXCIsXG4gIFwiZmllcmNlXCIsXG4gIFwiZmlmdGVlblwiLFxuICBcImZpZnRoXCIsXG4gIFwiZmlmdHlcIixcbiAgXCJmaWdodFwiLFxuICBcImZpZ2h0aW5nXCIsXG4gIFwiZmlndXJlXCIsXG4gIFwiZmlsbFwiLFxuICBcImZpbG1cIixcbiAgXCJmaW5hbFwiLFxuICBcImZpbmFsbHlcIixcbiAgXCJmaW5kXCIsXG4gIFwiZmluZVwiLFxuICBcImZpbmVzdFwiLFxuICBcImZpbmdlclwiLFxuICBcImZpbmlzaFwiLFxuICBcImZpcmVcIixcbiAgXCJmaXJlcGxhY2VcIixcbiAgXCJmaXJtXCIsXG4gIFwiZmlyc3RcIixcbiAgXCJmaXNoXCIsXG4gIFwiZml2ZVwiLFxuICBcImZpeFwiLFxuICBcImZsYWdcIixcbiAgXCJmbGFtZVwiLFxuICBcImZsYXRcIixcbiAgXCJmbGV3XCIsXG4gIFwiZmxpZXNcIixcbiAgXCJmbGlnaHRcIixcbiAgXCJmbG9hdGluZ1wiLFxuICBcImZsb29yXCIsXG4gIFwiZmxvd1wiLFxuICBcImZsb3dlclwiLFxuICBcImZseVwiLFxuICBcImZvZ1wiLFxuICBcImZvbGtzXCIsXG4gIFwiZm9sbG93XCIsXG4gIFwiZm9vZFwiLFxuICBcImZvb3RcIixcbiAgXCJmb290YmFsbFwiLFxuICBcImZvclwiLFxuICBcImZvcmNlXCIsXG4gIFwiZm9yZWlnblwiLFxuICBcImZvcmVzdFwiLFxuICBcImZvcmdldFwiLFxuICBcImZvcmdvdFwiLFxuICBcImZvcmdvdHRlblwiLFxuICBcImZvcm1cIixcbiAgXCJmb3JtZXJcIixcbiAgXCJmb3J0XCIsXG4gIFwiZm9ydGhcIixcbiAgXCJmb3J0eVwiLFxuICBcImZvcndhcmRcIixcbiAgXCJmb3VnaHRcIixcbiAgXCJmb3VuZFwiLFxuICBcImZvdXJcIixcbiAgXCJmb3VydGhcIixcbiAgXCJmb3hcIixcbiAgXCJmcmFtZVwiLFxuICBcImZyZWVcIixcbiAgXCJmcmVlZG9tXCIsXG4gIFwiZnJlcXVlbnRseVwiLFxuICBcImZyZXNoXCIsXG4gIFwiZnJpZW5kXCIsXG4gIFwiZnJpZW5kbHlcIixcbiAgXCJmcmlnaHRlblwiLFxuICBcImZyb2dcIixcbiAgXCJmcm9tXCIsXG4gIFwiZnJvbnRcIixcbiAgXCJmcm96ZW5cIixcbiAgXCJmcnVpdFwiLFxuICBcImZ1ZWxcIixcbiAgXCJmdWxsXCIsXG4gIFwiZnVsbHlcIixcbiAgXCJmdW5cIixcbiAgXCJmdW5jdGlvblwiLFxuICBcImZ1bm55XCIsXG4gIFwiZnVyXCIsXG4gIFwiZnVybml0dXJlXCIsXG4gIFwiZnVydGhlclwiLFxuICBcImZ1dHVyZVwiLFxuICBcImdhaW5cIixcbiAgXCJnYW1lXCIsXG4gIFwiZ2FyYWdlXCIsXG4gIFwiZ2FyZGVuXCIsXG4gIFwiZ2FzXCIsXG4gIFwiZ2Fzb2xpbmVcIixcbiAgXCJnYXRlXCIsXG4gIFwiZ2F0aGVyXCIsXG4gIFwiZ2F2ZVwiLFxuICBcImdlbmVyYWxcIixcbiAgXCJnZW5lcmFsbHlcIixcbiAgXCJnZW50bGVcIixcbiAgXCJnZW50bHlcIixcbiAgXCJnZXRcIixcbiAgXCJnZXR0aW5nXCIsXG4gIFwiZ2lhbnRcIixcbiAgXCJnaWZ0XCIsXG4gIFwiZ2lybFwiLFxuICBcImdpdmVcIixcbiAgXCJnaXZlblwiLFxuICBcImdpdmluZ1wiLFxuICBcImdsYWRcIixcbiAgXCJnbGFzc1wiLFxuICBcImdsb2JlXCIsXG4gIFwiZ29cIixcbiAgXCJnb2VzXCIsXG4gIFwiZ29sZFwiLFxuICBcImdvbGRlblwiLFxuICBcImdvbmVcIixcbiAgXCJnb29kXCIsXG4gIFwiZ29vc2VcIixcbiAgXCJnb3RcIixcbiAgXCJnb3Zlcm5tZW50XCIsXG4gIFwiZ3JhYmJlZFwiLFxuICBcImdyYWRlXCIsXG4gIFwiZ3JhZHVhbGx5XCIsXG4gIFwiZ3JhaW5cIixcbiAgXCJncmFuZGZhdGhlclwiLFxuICBcImdyYW5kbW90aGVyXCIsXG4gIFwiZ3JhcGhcIixcbiAgXCJncmFzc1wiLFxuICBcImdyYXZpdHlcIixcbiAgXCJncmF5XCIsXG4gIFwiZ3JlYXRcIixcbiAgXCJncmVhdGVyXCIsXG4gIFwiZ3JlYXRlc3RcIixcbiAgXCJncmVhdGx5XCIsXG4gIFwiZ3JlZW5cIixcbiAgXCJncmV3XCIsXG4gIFwiZ3JvdW5kXCIsXG4gIFwiZ3JvdXBcIixcbiAgXCJncm93XCIsXG4gIFwiZ3Jvd25cIixcbiAgXCJncm93dGhcIixcbiAgXCJndWFyZFwiLFxuICBcImd1ZXNzXCIsXG4gIFwiZ3VpZGVcIixcbiAgXCJndWxmXCIsXG4gIFwiZ3VuXCIsXG4gIFwiaGFiaXRcIixcbiAgXCJoYWRcIixcbiAgXCJoYWlyXCIsXG4gIFwiaGFsZlwiLFxuICBcImhhbGZ3YXlcIixcbiAgXCJoYWxsXCIsXG4gIFwiaGFuZFwiLFxuICBcImhhbmRsZVwiLFxuICBcImhhbmRzb21lXCIsXG4gIFwiaGFuZ1wiLFxuICBcImhhcHBlblwiLFxuICBcImhhcHBlbmVkXCIsXG4gIFwiaGFwcGlseVwiLFxuICBcImhhcHB5XCIsXG4gIFwiaGFyYm9yXCIsXG4gIFwiaGFyZFwiLFxuICBcImhhcmRlclwiLFxuICBcImhhcmRseVwiLFxuICBcImhhc1wiLFxuICBcImhhdFwiLFxuICBcImhhdmVcIixcbiAgXCJoYXZpbmdcIixcbiAgXCJoYXlcIixcbiAgXCJoZVwiLFxuICBcImhlYWRlZFwiLFxuICBcImhlYWRpbmdcIixcbiAgXCJoZWFsdGhcIixcbiAgXCJoZWFyZFwiLFxuICBcImhlYXJpbmdcIixcbiAgXCJoZWFydFwiLFxuICBcImhlYXRcIixcbiAgXCJoZWF2eVwiLFxuICBcImhlaWdodFwiLFxuICBcImhlbGRcIixcbiAgXCJoZWxsb1wiLFxuICBcImhlbHBcIixcbiAgXCJoZWxwZnVsXCIsXG4gIFwiaGVyXCIsXG4gIFwiaGVyZFwiLFxuICBcImhlcmVcIixcbiAgXCJoZXJzZWxmXCIsXG4gIFwiaGlkZGVuXCIsXG4gIFwiaGlkZVwiLFxuICBcImhpZ2hcIixcbiAgXCJoaWdoZXJcIixcbiAgXCJoaWdoZXN0XCIsXG4gIFwiaGlnaHdheVwiLFxuICBcImhpbGxcIixcbiAgXCJoaW1cIixcbiAgXCJoaW1zZWxmXCIsXG4gIFwiaGlzXCIsXG4gIFwiaGlzdG9yeVwiLFxuICBcImhpdFwiLFxuICBcImhvbGRcIixcbiAgXCJob2xlXCIsXG4gIFwiaG9sbG93XCIsXG4gIFwiaG9tZVwiLFxuICBcImhvbm9yXCIsXG4gIFwiaG9wZVwiLFxuICBcImhvcm5cIixcbiAgXCJob3JzZVwiLFxuICBcImhvc3BpdGFsXCIsXG4gIFwiaG90XCIsXG4gIFwiaG91clwiLFxuICBcImhvdXNlXCIsXG4gIFwiaG93XCIsXG4gIFwiaG93ZXZlclwiLFxuICBcImh1Z2VcIixcbiAgXCJodW1hblwiLFxuICBcImh1bmRyZWRcIixcbiAgXCJodW5nXCIsXG4gIFwiaHVuZ3J5XCIsXG4gIFwiaHVudFwiLFxuICBcImh1bnRlclwiLFxuICBcImh1cnJpZWRcIixcbiAgXCJodXJyeVwiLFxuICBcImh1cnRcIixcbiAgXCJodXNiYW5kXCIsXG4gIFwiaWNlXCIsXG4gIFwiaWRlYVwiLFxuICBcImlkZW50aXR5XCIsXG4gIFwiaWZcIixcbiAgXCJpbGxcIixcbiAgXCJpbWFnZVwiLFxuICBcImltYWdpbmVcIixcbiAgXCJpbW1lZGlhdGVseVwiLFxuICBcImltcG9ydGFuY2VcIixcbiAgXCJpbXBvcnRhbnRcIixcbiAgXCJpbXBvc3NpYmxlXCIsXG4gIFwiaW1wcm92ZVwiLFxuICBcImluXCIsXG4gIFwiaW5jaFwiLFxuICBcImluY2x1ZGVcIixcbiAgXCJpbmNsdWRpbmdcIixcbiAgXCJpbmNvbWVcIixcbiAgXCJpbmNyZWFzZVwiLFxuICBcImluZGVlZFwiLFxuICBcImluZGVwZW5kZW50XCIsXG4gIFwiaW5kaWNhdGVcIixcbiAgXCJpbmRpdmlkdWFsXCIsXG4gIFwiaW5kdXN0cmlhbFwiLFxuICBcImluZHVzdHJ5XCIsXG4gIFwiaW5mbHVlbmNlXCIsXG4gIFwiaW5mb3JtYXRpb25cIixcbiAgXCJpbnNpZGVcIixcbiAgXCJpbnN0YW5jZVwiLFxuICBcImluc3RhbnRcIixcbiAgXCJpbnN0ZWFkXCIsXG4gIFwiaW5zdHJ1bWVudFwiLFxuICBcImludGVyZXN0XCIsXG4gIFwiaW50ZXJpb3JcIixcbiAgXCJpbnRvXCIsXG4gIFwiaW50cm9kdWNlZFwiLFxuICBcImludmVudGVkXCIsXG4gIFwiaW52b2x2ZWRcIixcbiAgXCJpcm9uXCIsXG4gIFwiaXNcIixcbiAgXCJpc2xhbmRcIixcbiAgXCJpdFwiLFxuICBcIml0c1wiLFxuICBcIml0c2VsZlwiLFxuICBcImphY2tcIixcbiAgXCJqYXJcIixcbiAgXCJqZXRcIixcbiAgXCJqb2JcIixcbiAgXCJqb2luXCIsXG4gIFwiam9pbmVkXCIsXG4gIFwiam91cm5leVwiLFxuICBcImpveVwiLFxuICBcImp1ZGdlXCIsXG4gIFwianVtcFwiLFxuICBcImp1bmdsZVwiLFxuICBcImp1c3RcIixcbiAgXCJrZWVwXCIsXG4gIFwia2VwdFwiLFxuICBcImtleVwiLFxuICBcImtpZHNcIixcbiAgXCJraWxsXCIsXG4gIFwia2luZFwiLFxuICBcImtpdGNoZW5cIixcbiAgXCJrbmV3XCIsXG4gIFwia25pZmVcIixcbiAgXCJrbm93XCIsXG4gIFwia25vd2xlZGdlXCIsXG4gIFwia25vd25cIixcbiAgXCJsYWJlbFwiLFxuICBcImxhYm9yXCIsXG4gIFwibGFja1wiLFxuICBcImxhZHlcIixcbiAgXCJsYWlkXCIsXG4gIFwibGFrZVwiLFxuICBcImxhbXBcIixcbiAgXCJsYW5kXCIsXG4gIFwibGFuZ3VhZ2VcIixcbiAgXCJsYXJnZVwiLFxuICBcImxhcmdlclwiLFxuICBcImxhcmdlc3RcIixcbiAgXCJsYXN0XCIsXG4gIFwibGF0ZVwiLFxuICBcImxhdGVyXCIsXG4gIFwibGF1Z2hcIixcbiAgXCJsYXdcIixcbiAgXCJsYXlcIixcbiAgXCJsYXllcnNcIixcbiAgXCJsZWFkXCIsXG4gIFwibGVhZGVyXCIsXG4gIFwibGVhZlwiLFxuICBcImxlYXJuXCIsXG4gIFwibGVhc3RcIixcbiAgXCJsZWF0aGVyXCIsXG4gIFwibGVhdmVcIixcbiAgXCJsZWF2aW5nXCIsXG4gIFwibGVkXCIsXG4gIFwibGVmdFwiLFxuICBcImxlZ1wiLFxuICBcImxlbmd0aFwiLFxuICBcImxlc3NvblwiLFxuICBcImxldFwiLFxuICBcImxldHRlclwiLFxuICBcImxldmVsXCIsXG4gIFwibGlicmFyeVwiLFxuICBcImxpZVwiLFxuICBcImxpZmVcIixcbiAgXCJsaWZ0XCIsXG4gIFwibGlnaHRcIixcbiAgXCJsaWtlXCIsXG4gIFwibGlrZWx5XCIsXG4gIFwibGltaXRlZFwiLFxuICBcImxpbmVcIixcbiAgXCJsaW9uXCIsXG4gIFwibGlwc1wiLFxuICBcImxpcXVpZFwiLFxuICBcImxpc3RcIixcbiAgXCJsaXN0ZW5cIixcbiAgXCJsaXR0bGVcIixcbiAgXCJsaXZlXCIsXG4gIFwibGl2aW5nXCIsXG4gIFwibG9hZFwiLFxuICBcImxvY2FsXCIsXG4gIFwibG9jYXRlXCIsXG4gIFwibG9jYXRpb25cIixcbiAgXCJsb2dcIixcbiAgXCJsb25lbHlcIixcbiAgXCJsb25nXCIsXG4gIFwibG9uZ2VyXCIsXG4gIFwibG9va1wiLFxuICBcImxvb3NlXCIsXG4gIFwibG9zZVwiLFxuICBcImxvc3NcIixcbiAgXCJsb3N0XCIsXG4gIFwibG90XCIsXG4gIFwibG91ZFwiLFxuICBcImxvdmVcIixcbiAgXCJsb3ZlbHlcIixcbiAgXCJsb3dcIixcbiAgXCJsb3dlclwiLFxuICBcImx1Y2tcIixcbiAgXCJsdWNreVwiLFxuICBcImx1bmNoXCIsXG4gIFwibHVuZ3NcIixcbiAgXCJseWluZ1wiLFxuICBcIm1hY2hpbmVcIixcbiAgXCJtYWNoaW5lcnlcIixcbiAgXCJtYWRcIixcbiAgXCJtYWRlXCIsXG4gIFwibWFnaWNcIixcbiAgXCJtYWduZXRcIixcbiAgXCJtYWlsXCIsXG4gIFwibWFpblwiLFxuICBcIm1haW5seVwiLFxuICBcIm1ham9yXCIsXG4gIFwibWFrZVwiLFxuICBcIm1ha2luZ1wiLFxuICBcIm1hblwiLFxuICBcIm1hbmFnZWRcIixcbiAgXCJtYW5uZXJcIixcbiAgXCJtYW51ZmFjdHVyaW5nXCIsXG4gIFwibWFueVwiLFxuICBcIm1hcFwiLFxuICBcIm1hcmtcIixcbiAgXCJtYXJrZXRcIixcbiAgXCJtYXJyaWVkXCIsXG4gIFwibWFzc1wiLFxuICBcIm1hc3NhZ2VcIixcbiAgXCJtYXN0ZXJcIixcbiAgXCJtYXRlcmlhbFwiLFxuICBcIm1hdGhlbWF0aWNzXCIsXG4gIFwibWF0dGVyXCIsXG4gIFwibWF5XCIsXG4gIFwibWF5YmVcIixcbiAgXCJtZVwiLFxuICBcIm1lYWxcIixcbiAgXCJtZWFuXCIsXG4gIFwibWVhbnNcIixcbiAgXCJtZWFudFwiLFxuICBcIm1lYXN1cmVcIixcbiAgXCJtZWF0XCIsXG4gIFwibWVkaWNpbmVcIixcbiAgXCJtZWV0XCIsXG4gIFwibWVsdGVkXCIsXG4gIFwibWVtYmVyXCIsXG4gIFwibWVtb3J5XCIsXG4gIFwibWVuXCIsXG4gIFwibWVudGFsXCIsXG4gIFwibWVyZWx5XCIsXG4gIFwibWV0XCIsXG4gIFwibWV0YWxcIixcbiAgXCJtZXRob2RcIixcbiAgXCJtaWNlXCIsXG4gIFwibWlkZGxlXCIsXG4gIFwibWlnaHRcIixcbiAgXCJtaWdodHlcIixcbiAgXCJtaWxlXCIsXG4gIFwibWlsaXRhcnlcIixcbiAgXCJtaWxrXCIsXG4gIFwibWlsbFwiLFxuICBcIm1pbmRcIixcbiAgXCJtaW5lXCIsXG4gIFwibWluZXJhbHNcIixcbiAgXCJtaW51dGVcIixcbiAgXCJtaXJyb3JcIixcbiAgXCJtaXNzaW5nXCIsXG4gIFwibWlzc2lvblwiLFxuICBcIm1pc3Rha2VcIixcbiAgXCJtaXhcIixcbiAgXCJtaXh0dXJlXCIsXG4gIFwibW9kZWxcIixcbiAgXCJtb2Rlcm5cIixcbiAgXCJtb2xlY3VsYXJcIixcbiAgXCJtb21lbnRcIixcbiAgXCJtb25leVwiLFxuICBcIm1vbmtleVwiLFxuICBcIm1vbnRoXCIsXG4gIFwibW9vZFwiLFxuICBcIm1vb25cIixcbiAgXCJtb3JlXCIsXG4gIFwibW9ybmluZ1wiLFxuICBcIm1vc3RcIixcbiAgXCJtb3N0bHlcIixcbiAgXCJtb3RoZXJcIixcbiAgXCJtb3Rpb25cIixcbiAgXCJtb3RvclwiLFxuICBcIm1vdW50YWluXCIsXG4gIFwibW91c2VcIixcbiAgXCJtb3V0aFwiLFxuICBcIm1vdmVcIixcbiAgXCJtb3ZlbWVudFwiLFxuICBcIm1vdmllXCIsXG4gIFwibW92aW5nXCIsXG4gIFwibXVkXCIsXG4gIFwibXVzY2xlXCIsXG4gIFwibXVzaWNcIixcbiAgXCJtdXNpY2FsXCIsXG4gIFwibXVzdFwiLFxuICBcIm15XCIsXG4gIFwibXlzZWxmXCIsXG4gIFwibXlzdGVyaW91c1wiLFxuICBcIm5haWxzXCIsXG4gIFwibmFtZVwiLFxuICBcIm5hdGlvblwiLFxuICBcIm5hdGlvbmFsXCIsXG4gIFwibmF0aXZlXCIsXG4gIFwibmF0dXJhbFwiLFxuICBcIm5hdHVyYWxseVwiLFxuICBcIm5hdHVyZVwiLFxuICBcIm5lYXJcIixcbiAgXCJuZWFyYnlcIixcbiAgXCJuZWFyZXJcIixcbiAgXCJuZWFyZXN0XCIsXG4gIFwibmVhcmx5XCIsXG4gIFwibmVjZXNzYXJ5XCIsXG4gIFwibmVja1wiLFxuICBcIm5lZWRlZFwiLFxuICBcIm5lZWRsZVwiLFxuICBcIm5lZWRzXCIsXG4gIFwibmVnYXRpdmVcIixcbiAgXCJuZWlnaGJvclwiLFxuICBcIm5laWdoYm9yaG9vZFwiLFxuICBcIm5lcnZvdXNcIixcbiAgXCJuZXN0XCIsXG4gIFwibmV2ZXJcIixcbiAgXCJuZXdcIixcbiAgXCJuZXdzXCIsXG4gIFwibmV3c3BhcGVyXCIsXG4gIFwibmV4dFwiLFxuICBcIm5pY2VcIixcbiAgXCJuaWdodFwiLFxuICBcIm5pbmVcIixcbiAgXCJub1wiLFxuICBcIm5vYm9keVwiLFxuICBcIm5vZGRlZFwiLFxuICBcIm5vaXNlXCIsXG4gIFwibm9uZVwiLFxuICBcIm5vb25cIixcbiAgXCJub3JcIixcbiAgXCJub3J0aFwiLFxuICBcIm5vc2VcIixcbiAgXCJub3RcIixcbiAgXCJub3RlXCIsXG4gIFwibm90ZWRcIixcbiAgXCJub3RoaW5nXCIsXG4gIFwibm90aWNlXCIsXG4gIFwibm91blwiLFxuICBcIm5vd1wiLFxuICBcIm51bWJlclwiLFxuICBcIm51bWVyYWxcIixcbiAgXCJudXRzXCIsXG4gIFwib2JqZWN0XCIsXG4gIFwib2JzZXJ2ZVwiLFxuICBcIm9idGFpblwiLFxuICBcIm9jY2FzaW9uYWxseVwiLFxuICBcIm9jY3VyXCIsXG4gIFwib2NlYW5cIixcbiAgXCJvZlwiLFxuICBcIm9mZlwiLFxuICBcIm9mZmVyXCIsXG4gIFwib2ZmaWNlXCIsXG4gIFwib2ZmaWNlclwiLFxuICBcIm9mZmljaWFsXCIsXG4gIFwib2lsXCIsXG4gIFwib2xkXCIsXG4gIFwib2xkZXJcIixcbiAgXCJvbGRlc3RcIixcbiAgXCJvblwiLFxuICBcIm9uY2VcIixcbiAgXCJvbmVcIixcbiAgXCJvbmx5XCIsXG4gIFwib250b1wiLFxuICBcIm9wZW5cIixcbiAgXCJvcGVyYXRpb25cIixcbiAgXCJvcGluaW9uXCIsXG4gIFwib3Bwb3J0dW5pdHlcIixcbiAgXCJvcHBvc2l0ZVwiLFxuICBcIm9yXCIsXG4gIFwib3JhbmdlXCIsXG4gIFwib3JiaXRcIixcbiAgXCJvcmRlclwiLFxuICBcIm9yZGluYXJ5XCIsXG4gIFwib3JnYW5pemF0aW9uXCIsXG4gIFwib3JnYW5pemVkXCIsXG4gIFwib3JpZ2luXCIsXG4gIFwib3JpZ2luYWxcIixcbiAgXCJvdGhlclwiLFxuICBcIm91Z2h0XCIsXG4gIFwib3VyXCIsXG4gIFwib3Vyc2VsdmVzXCIsXG4gIFwib3V0XCIsXG4gIFwib3V0ZXJcIixcbiAgXCJvdXRsaW5lXCIsXG4gIFwib3V0c2lkZVwiLFxuICBcIm92ZXJcIixcbiAgXCJvd25cIixcbiAgXCJvd25lclwiLFxuICBcIm94eWdlblwiLFxuICBcInBhY2tcIixcbiAgXCJwYWNrYWdlXCIsXG4gIFwicGFnZVwiLFxuICBcInBhaWRcIixcbiAgXCJwYWluXCIsXG4gIFwicGFpbnRcIixcbiAgXCJwYWlyXCIsXG4gIFwicGFsYWNlXCIsXG4gIFwicGFsZVwiLFxuICBcInBhblwiLFxuICBcInBhcGVyXCIsXG4gIFwicGFyYWdyYXBoXCIsXG4gIFwicGFyYWxsZWxcIixcbiAgXCJwYXJlbnRcIixcbiAgXCJwYXJrXCIsXG4gIFwicGFydFwiLFxuICBcInBhcnRpY2xlc1wiLFxuICBcInBhcnRpY3VsYXJcIixcbiAgXCJwYXJ0aWN1bGFybHlcIixcbiAgXCJwYXJ0bHlcIixcbiAgXCJwYXJ0c1wiLFxuICBcInBhcnR5XCIsXG4gIFwicGFzc1wiLFxuICBcInBhc3NhZ2VcIixcbiAgXCJwYXN0XCIsXG4gIFwicGF0aFwiLFxuICBcInBhdHRlcm5cIixcbiAgXCJwYXlcIixcbiAgXCJwZWFjZVwiLFxuICBcInBlblwiLFxuICBcInBlbmNpbFwiLFxuICBcInBlb3BsZVwiLFxuICBcInBlclwiLFxuICBcInBlcmNlbnRcIixcbiAgXCJwZXJmZWN0XCIsXG4gIFwicGVyZmVjdGx5XCIsXG4gIFwicGVyaGFwc1wiLFxuICBcInBlcmlvZFwiLFxuICBcInBlcnNvblwiLFxuICBcInBlcnNvbmFsXCIsXG4gIFwicGV0XCIsXG4gIFwicGhyYXNlXCIsXG4gIFwicGh5c2ljYWxcIixcbiAgXCJwaWFub1wiLFxuICBcInBpY2tcIixcbiAgXCJwaWN0dXJlXCIsXG4gIFwicGljdHVyZWRcIixcbiAgXCJwaWVcIixcbiAgXCJwaWVjZVwiLFxuICBcInBpZ1wiLFxuICBcInBpbGVcIixcbiAgXCJwaWxvdFwiLFxuICBcInBpbmVcIixcbiAgXCJwaW5rXCIsXG4gIFwicGlwZVwiLFxuICBcInBpdGNoXCIsXG4gIFwicGxhY2VcIixcbiAgXCJwbGFpblwiLFxuICBcInBsYW5cIixcbiAgXCJwbGFuZVwiLFxuICBcInBsYW5ldFwiLFxuICBcInBsYW5uZWRcIixcbiAgXCJwbGFubmluZ1wiLFxuICBcInBsYW50XCIsXG4gIFwicGxhc3RpY1wiLFxuICBcInBsYXRlXCIsXG4gIFwicGxhdGVzXCIsXG4gIFwicGxheVwiLFxuICBcInBsZWFzYW50XCIsXG4gIFwicGxlYXNlXCIsXG4gIFwicGxlYXN1cmVcIixcbiAgXCJwbGVudHlcIixcbiAgXCJwbHVyYWxcIixcbiAgXCJwbHVzXCIsXG4gIFwicG9ja2V0XCIsXG4gIFwicG9lbVwiLFxuICBcInBvZXRcIixcbiAgXCJwb2V0cnlcIixcbiAgXCJwb2ludFwiLFxuICBcInBvbGVcIixcbiAgXCJwb2xpY2VcIixcbiAgXCJwb2xpY2VtYW5cIixcbiAgXCJwb2xpdGljYWxcIixcbiAgXCJwb25kXCIsXG4gIFwicG9ueVwiLFxuICBcInBvb2xcIixcbiAgXCJwb29yXCIsXG4gIFwicG9wdWxhclwiLFxuICBcInBvcHVsYXRpb25cIixcbiAgXCJwb3JjaFwiLFxuICBcInBvcnRcIixcbiAgXCJwb3NpdGlvblwiLFxuICBcInBvc2l0aXZlXCIsXG4gIFwicG9zc2libGVcIixcbiAgXCJwb3NzaWJseVwiLFxuICBcInBvc3RcIixcbiAgXCJwb3RcIixcbiAgXCJwb3RhdG9lc1wiLFxuICBcInBvdW5kXCIsXG4gIFwicG91clwiLFxuICBcInBvd2RlclwiLFxuICBcInBvd2VyXCIsXG4gIFwicG93ZXJmdWxcIixcbiAgXCJwcmFjdGljYWxcIixcbiAgXCJwcmFjdGljZVwiLFxuICBcInByZXBhcmVcIixcbiAgXCJwcmVzZW50XCIsXG4gIFwicHJlc2lkZW50XCIsXG4gIFwicHJlc3NcIixcbiAgXCJwcmVzc3VyZVwiLFxuICBcInByZXR0eVwiLFxuICBcInByZXZlbnRcIixcbiAgXCJwcmV2aW91c1wiLFxuICBcInByaWNlXCIsXG4gIFwicHJpZGVcIixcbiAgXCJwcmltaXRpdmVcIixcbiAgXCJwcmluY2lwYWxcIixcbiAgXCJwcmluY2lwbGVcIixcbiAgXCJwcmludGVkXCIsXG4gIFwicHJpdmF0ZVwiLFxuICBcInByaXplXCIsXG4gIFwicHJvYmFibHlcIixcbiAgXCJwcm9ibGVtXCIsXG4gIFwicHJvY2Vzc1wiLFxuICBcInByb2R1Y2VcIixcbiAgXCJwcm9kdWN0XCIsXG4gIFwicHJvZHVjdGlvblwiLFxuICBcInByb2dyYW1cIixcbiAgXCJwcm9ncmVzc1wiLFxuICBcInByb21pc2VkXCIsXG4gIFwicHJvcGVyXCIsXG4gIFwicHJvcGVybHlcIixcbiAgXCJwcm9wZXJ0eVwiLFxuICBcInByb3RlY3Rpb25cIixcbiAgXCJwcm91ZFwiLFxuICBcInByb3ZlXCIsXG4gIFwicHJvdmlkZVwiLFxuICBcInB1YmxpY1wiLFxuICBcInB1bGxcIixcbiAgXCJwdXBpbFwiLFxuICBcInB1cmVcIixcbiAgXCJwdXJwbGVcIixcbiAgXCJwdXJwb3NlXCIsXG4gIFwicHVzaFwiLFxuICBcInB1dFwiLFxuICBcInB1dHRpbmdcIixcbiAgXCJxdWFydGVyXCIsXG4gIFwicXVlZW5cIixcbiAgXCJxdWVzdGlvblwiLFxuICBcInF1aWNrXCIsXG4gIFwicXVpY2tseVwiLFxuICBcInF1aWV0XCIsXG4gIFwicXVpZXRseVwiLFxuICBcInF1aXRlXCIsXG4gIFwicmFiYml0XCIsXG4gIFwicmFjZVwiLFxuICBcInJhZGlvXCIsXG4gIFwicmFpbHJvYWRcIixcbiAgXCJyYWluXCIsXG4gIFwicmFpc2VcIixcbiAgXCJyYW5cIixcbiAgXCJyYW5jaFwiLFxuICBcInJhbmdlXCIsXG4gIFwicmFwaWRseVwiLFxuICBcInJhdGVcIixcbiAgXCJyYXRoZXJcIixcbiAgXCJyYXdcIixcbiAgXCJyYXlzXCIsXG4gIFwicmVhY2hcIixcbiAgXCJyZWFkXCIsXG4gIFwicmVhZGVyXCIsXG4gIFwicmVhZHlcIixcbiAgXCJyZWFsXCIsXG4gIFwicmVhbGl6ZVwiLFxuICBcInJlYXJcIixcbiAgXCJyZWFzb25cIixcbiAgXCJyZWNhbGxcIixcbiAgXCJyZWNlaXZlXCIsXG4gIFwicmVjZW50XCIsXG4gIFwicmVjZW50bHlcIixcbiAgXCJyZWNvZ25pemVcIixcbiAgXCJyZWNvcmRcIixcbiAgXCJyZWRcIixcbiAgXCJyZWZlclwiLFxuICBcInJlZnVzZWRcIixcbiAgXCJyZWdpb25cIixcbiAgXCJyZWd1bGFyXCIsXG4gIFwicmVsYXRlZFwiLFxuICBcInJlbGF0aW9uc2hpcFwiLFxuICBcInJlbGlnaW91c1wiLFxuICBcInJlbWFpblwiLFxuICBcInJlbWFya2FibGVcIixcbiAgXCJyZW1lbWJlclwiLFxuICBcInJlbW92ZVwiLFxuICBcInJlcGVhdFwiLFxuICBcInJlcGxhY2VcIixcbiAgXCJyZXBsaWVkXCIsXG4gIFwicmVwb3J0XCIsXG4gIFwicmVwcmVzZW50XCIsXG4gIFwicmVxdWlyZVwiLFxuICBcInJlc2VhcmNoXCIsXG4gIFwicmVzcGVjdFwiLFxuICBcInJlc3RcIixcbiAgXCJyZXN1bHRcIixcbiAgXCJyZXR1cm5cIixcbiAgXCJyZXZpZXdcIixcbiAgXCJyaHltZVwiLFxuICBcInJoeXRobVwiLFxuICBcInJpY2VcIixcbiAgXCJyaWNoXCIsXG4gIFwicmlkZVwiLFxuICBcInJpZGluZ1wiLFxuICBcInJpZ2h0XCIsXG4gIFwicmluZ1wiLFxuICBcInJpc2VcIixcbiAgXCJyaXNpbmdcIixcbiAgXCJyaXZlclwiLFxuICBcInJvYWRcIixcbiAgXCJyb2FyXCIsXG4gIFwicm9ja1wiLFxuICBcInJvY2tldFwiLFxuICBcInJvY2t5XCIsXG4gIFwicm9kXCIsXG4gIFwicm9sbFwiLFxuICBcInJvb2ZcIixcbiAgXCJyb29tXCIsXG4gIFwicm9vdFwiLFxuICBcInJvcGVcIixcbiAgXCJyb3NlXCIsXG4gIFwicm91Z2hcIixcbiAgXCJyb3VuZFwiLFxuICBcInJvdXRlXCIsXG4gIFwicm93XCIsXG4gIFwicnViYmVkXCIsXG4gIFwicnViYmVyXCIsXG4gIFwicnVsZVwiLFxuICBcInJ1bGVyXCIsXG4gIFwicnVuXCIsXG4gIFwicnVubmluZ1wiLFxuICBcInJ1c2hcIixcbiAgXCJzYWRcIixcbiAgXCJzYWRkbGVcIixcbiAgXCJzYWZlXCIsXG4gIFwic2FmZXR5XCIsXG4gIFwic2FpZFwiLFxuICBcInNhaWxcIixcbiAgXCJzYWxlXCIsXG4gIFwic2FsbW9uXCIsXG4gIFwic2FsdFwiLFxuICBcInNhbWVcIixcbiAgXCJzYW5kXCIsXG4gIFwic2FuZ1wiLFxuICBcInNhdFwiLFxuICBcInNhdGVsbGl0ZXNcIixcbiAgXCJzYXRpc2ZpZWRcIixcbiAgXCJzYXZlXCIsXG4gIFwic2F2ZWRcIixcbiAgXCJzYXdcIixcbiAgXCJzYXlcIixcbiAgXCJzY2FsZVwiLFxuICBcInNjYXJlZFwiLFxuICBcInNjZW5lXCIsXG4gIFwic2Nob29sXCIsXG4gIFwic2NpZW5jZVwiLFxuICBcInNjaWVudGlmaWNcIixcbiAgXCJzY2llbnRpc3RcIixcbiAgXCJzY29yZVwiLFxuICBcInNjcmVlblwiLFxuICBcInNlYVwiLFxuICBcInNlYXJjaFwiLFxuICBcInNlYXNvblwiLFxuICBcInNlYXRcIixcbiAgXCJzZWNvbmRcIixcbiAgXCJzZWNyZXRcIixcbiAgXCJzZWN0aW9uXCIsXG4gIFwic2VlXCIsXG4gIFwic2VlZFwiLFxuICBcInNlZWluZ1wiLFxuICBcInNlZW1zXCIsXG4gIFwic2VlblwiLFxuICBcInNlbGRvbVwiLFxuICBcInNlbGVjdFwiLFxuICBcInNlbGVjdGlvblwiLFxuICBcInNlbGxcIixcbiAgXCJzZW5kXCIsXG4gIFwic2Vuc2VcIixcbiAgXCJzZW50XCIsXG4gIFwic2VudGVuY2VcIixcbiAgXCJzZXBhcmF0ZVwiLFxuICBcInNlcmllc1wiLFxuICBcInNlcmlvdXNcIixcbiAgXCJzZXJ2ZVwiLFxuICBcInNlcnZpY2VcIixcbiAgXCJzZXRzXCIsXG4gIFwic2V0dGluZ1wiLFxuICBcInNldHRsZVwiLFxuICBcInNldHRsZXJzXCIsXG4gIFwic2V2ZW5cIixcbiAgXCJzZXZlcmFsXCIsXG4gIFwic2hhZGVcIixcbiAgXCJzaGFkb3dcIixcbiAgXCJzaGFrZVwiLFxuICBcInNoYWtpbmdcIixcbiAgXCJzaGFsbFwiLFxuICBcInNoYWxsb3dcIixcbiAgXCJzaGFwZVwiLFxuICBcInNoYXJlXCIsXG4gIFwic2hhcnBcIixcbiAgXCJzaGVcIixcbiAgXCJzaGVlcFwiLFxuICBcInNoZWV0XCIsXG4gIFwic2hlbGZcIixcbiAgXCJzaGVsbHNcIixcbiAgXCJzaGVsdGVyXCIsXG4gIFwic2hpbmVcIixcbiAgXCJzaGlubmluZ1wiLFxuICBcInNoaXBcIixcbiAgXCJzaGlydFwiLFxuICBcInNob2VcIixcbiAgXCJzaG9vdFwiLFxuICBcInNob3BcIixcbiAgXCJzaG9yZVwiLFxuICBcInNob3J0XCIsXG4gIFwic2hvcnRlclwiLFxuICBcInNob3RcIixcbiAgXCJzaG91bGRcIixcbiAgXCJzaG91bGRlclwiLFxuICBcInNob3V0XCIsXG4gIFwic2hvd1wiLFxuICBcInNob3duXCIsXG4gIFwic2h1dFwiLFxuICBcInNpY2tcIixcbiAgXCJzaWRlc1wiLFxuICBcInNpZ2h0XCIsXG4gIFwic2lnblwiLFxuICBcInNpZ25hbFwiLFxuICBcInNpbGVuY2VcIixcbiAgXCJzaWxlbnRcIixcbiAgXCJzaWxrXCIsXG4gIFwic2lsbHlcIixcbiAgXCJzaWx2ZXJcIixcbiAgXCJzaW1pbGFyXCIsXG4gIFwic2ltcGxlXCIsXG4gIFwic2ltcGxlc3RcIixcbiAgXCJzaW1wbHlcIixcbiAgXCJzaW5jZVwiLFxuICBcInNpbmdcIixcbiAgXCJzaW5nbGVcIixcbiAgXCJzaW5rXCIsXG4gIFwic2lzdGVyXCIsXG4gIFwic2l0XCIsXG4gIFwic2l0dGluZ1wiLFxuICBcInNpdHVhdGlvblwiLFxuICBcInNpeFwiLFxuICBcInNpemVcIixcbiAgXCJza2lsbFwiLFxuICBcInNraW5cIixcbiAgXCJza3lcIixcbiAgXCJzbGFic1wiLFxuICBcInNsYXZlXCIsXG4gIFwic2xlZXBcIixcbiAgXCJzbGVwdFwiLFxuICBcInNsaWRlXCIsXG4gIFwic2xpZ2h0XCIsXG4gIFwic2xpZ2h0bHlcIixcbiAgXCJzbGlwXCIsXG4gIFwic2xpcHBlZFwiLFxuICBcInNsb3BlXCIsXG4gIFwic2xvd1wiLFxuICBcInNsb3dseVwiLFxuICBcInNtYWxsXCIsXG4gIFwic21hbGxlclwiLFxuICBcInNtYWxsZXN0XCIsXG4gIFwic21lbGxcIixcbiAgXCJzbWlsZVwiLFxuICBcInNtb2tlXCIsXG4gIFwic21vb3RoXCIsXG4gIFwic25ha2VcIixcbiAgXCJzbm93XCIsXG4gIFwic29cIixcbiAgXCJzb2FwXCIsXG4gIFwic29jaWFsXCIsXG4gIFwic29jaWV0eVwiLFxuICBcInNvZnRcIixcbiAgXCJzb2Z0bHlcIixcbiAgXCJzb2lsXCIsXG4gIFwic29sYXJcIixcbiAgXCJzb2xkXCIsXG4gIFwic29sZGllclwiLFxuICBcInNvbGlkXCIsXG4gIFwic29sdXRpb25cIixcbiAgXCJzb2x2ZVwiLFxuICBcInNvbWVcIixcbiAgXCJzb21lYm9keVwiLFxuICBcInNvbWVob3dcIixcbiAgXCJzb21lb25lXCIsXG4gIFwic29tZXRoaW5nXCIsXG4gIFwic29tZXRpbWVcIixcbiAgXCJzb21ld2hlcmVcIixcbiAgXCJzb25cIixcbiAgXCJzb25nXCIsXG4gIFwic29vblwiLFxuICBcInNvcnRcIixcbiAgXCJzb3VuZFwiLFxuICBcInNvdXJjZVwiLFxuICBcInNvdXRoXCIsXG4gIFwic291dGhlcm5cIixcbiAgXCJzcGFjZVwiLFxuICBcInNwZWFrXCIsXG4gIFwic3BlY2lhbFwiLFxuICBcInNwZWNpZXNcIixcbiAgXCJzcGVjaWZpY1wiLFxuICBcInNwZWVjaFwiLFxuICBcInNwZWVkXCIsXG4gIFwic3BlbGxcIixcbiAgXCJzcGVuZFwiLFxuICBcInNwZW50XCIsXG4gIFwic3BpZGVyXCIsXG4gIFwic3BpblwiLFxuICBcInNwaXJpdFwiLFxuICBcInNwaXRlXCIsXG4gIFwic3BsaXRcIixcbiAgXCJzcG9rZW5cIixcbiAgXCJzcG9ydFwiLFxuICBcInNwcmVhZFwiLFxuICBcInNwcmluZ1wiLFxuICBcInNxdWFyZVwiLFxuICBcInN0YWdlXCIsXG4gIFwic3RhaXJzXCIsXG4gIFwic3RhbmRcIixcbiAgXCJzdGFuZGFyZFwiLFxuICBcInN0YXJcIixcbiAgXCJzdGFyZWRcIixcbiAgXCJzdGFydFwiLFxuICBcInN0YXRlXCIsXG4gIFwic3RhdGVtZW50XCIsXG4gIFwic3RhdGlvblwiLFxuICBcInN0YXlcIixcbiAgXCJzdGVhZHlcIixcbiAgXCJzdGVhbVwiLFxuICBcInN0ZWVsXCIsXG4gIFwic3RlZXBcIixcbiAgXCJzdGVtc1wiLFxuICBcInN0ZXBcIixcbiAgXCJzdGVwcGVkXCIsXG4gIFwic3RpY2tcIixcbiAgXCJzdGlmZlwiLFxuICBcInN0aWxsXCIsXG4gIFwic3RvY2tcIixcbiAgXCJzdG9tYWNoXCIsXG4gIFwic3RvbmVcIixcbiAgXCJzdG9vZFwiLFxuICBcInN0b3BcIixcbiAgXCJzdG9wcGVkXCIsXG4gIFwic3RvcmVcIixcbiAgXCJzdG9ybVwiLFxuICBcInN0b3J5XCIsXG4gIFwic3RvdmVcIixcbiAgXCJzdHJhaWdodFwiLFxuICBcInN0cmFuZ2VcIixcbiAgXCJzdHJhbmdlclwiLFxuICBcInN0cmF3XCIsXG4gIFwic3RyZWFtXCIsXG4gIFwic3RyZWV0XCIsXG4gIFwic3RyZW5ndGhcIixcbiAgXCJzdHJldGNoXCIsXG4gIFwic3RyaWtlXCIsXG4gIFwic3RyaW5nXCIsXG4gIFwic3RyaXBcIixcbiAgXCJzdHJvbmdcIixcbiAgXCJzdHJvbmdlclwiLFxuICBcInN0cnVja1wiLFxuICBcInN0cnVjdHVyZVwiLFxuICBcInN0cnVnZ2xlXCIsXG4gIFwic3R1Y2tcIixcbiAgXCJzdHVkZW50XCIsXG4gIFwic3R1ZGllZFwiLFxuICBcInN0dWR5aW5nXCIsXG4gIFwic3ViamVjdFwiLFxuICBcInN1YnN0YW5jZVwiLFxuICBcInN1Y2Nlc3NcIixcbiAgXCJzdWNjZXNzZnVsXCIsXG4gIFwic3VjaFwiLFxuICBcInN1ZGRlblwiLFxuICBcInN1ZGRlbmx5XCIsXG4gIFwic3VnYXJcIixcbiAgXCJzdWdnZXN0XCIsXG4gIFwic3VpdFwiLFxuICBcInN1bVwiLFxuICBcInN1bW1lclwiLFxuICBcInN1blwiLFxuICBcInN1bmxpZ2h0XCIsXG4gIFwic3VwcGVyXCIsXG4gIFwic3VwcGx5XCIsXG4gIFwic3VwcG9ydFwiLFxuICBcInN1cHBvc2VcIixcbiAgXCJzdXJlXCIsXG4gIFwic3VyZmFjZVwiLFxuICBcInN1cnByaXNlXCIsXG4gIFwic3Vycm91bmRlZFwiLFxuICBcInN3YW1cIixcbiAgXCJzd2VldFwiLFxuICBcInN3ZXB0XCIsXG4gIFwic3dpbVwiLFxuICBcInN3aW1taW5nXCIsXG4gIFwic3dpbmdcIixcbiAgXCJzd3VuZ1wiLFxuICBcInN5bGxhYmxlXCIsXG4gIFwic3ltYm9sXCIsXG4gIFwic3lzdGVtXCIsXG4gIFwidGFibGVcIixcbiAgXCJ0YWlsXCIsXG4gIFwidGFrZVwiLFxuICBcInRha2VuXCIsXG4gIFwidGFsZXNcIixcbiAgXCJ0YWxrXCIsXG4gIFwidGFsbFwiLFxuICBcInRhbmtcIixcbiAgXCJ0YXBlXCIsXG4gIFwidGFza1wiLFxuICBcInRhc3RlXCIsXG4gIFwidGF1Z2h0XCIsXG4gIFwidGF4XCIsXG4gIFwidGVhXCIsXG4gIFwidGVhY2hcIixcbiAgXCJ0ZWFjaGVyXCIsXG4gIFwidGVhbVwiLFxuICBcInRlYXJzXCIsXG4gIFwidGVldGhcIixcbiAgXCJ0ZWxlcGhvbmVcIixcbiAgXCJ0ZWxldmlzaW9uXCIsXG4gIFwidGVsbFwiLFxuICBcInRlbXBlcmF0dXJlXCIsXG4gIFwidGVuXCIsXG4gIFwidGVudFwiLFxuICBcInRlcm1cIixcbiAgXCJ0ZXJyaWJsZVwiLFxuICBcInRlc3RcIixcbiAgXCJ0aGFuXCIsXG4gIFwidGhhbmtcIixcbiAgXCJ0aGF0XCIsXG4gIFwidGhlZVwiLFxuICBcInRoZW1cIixcbiAgXCJ0aGVtc2VsdmVzXCIsXG4gIFwidGhlblwiLFxuICBcInRoZW9yeVwiLFxuICBcInRoZXJlXCIsXG4gIFwidGhlcmVmb3JlXCIsXG4gIFwidGhlc2VcIixcbiAgXCJ0aGV5XCIsXG4gIFwidGhpY2tcIixcbiAgXCJ0aGluXCIsXG4gIFwidGhpbmdcIixcbiAgXCJ0aGlua1wiLFxuICBcInRoaXJkXCIsXG4gIFwidGhpcnR5XCIsXG4gIFwidGhpc1wiLFxuICBcInRob3NlXCIsXG4gIFwidGhvdVwiLFxuICBcInRob3VnaFwiLFxuICBcInRob3VnaHRcIixcbiAgXCJ0aG91c2FuZFwiLFxuICBcInRocmVhZFwiLFxuICBcInRocmVlXCIsXG4gIFwidGhyZXdcIixcbiAgXCJ0aHJvYXRcIixcbiAgXCJ0aHJvdWdoXCIsXG4gIFwidGhyb3VnaG91dFwiLFxuICBcInRocm93XCIsXG4gIFwidGhyb3duXCIsXG4gIFwidGh1bWJcIixcbiAgXCJ0aHVzXCIsXG4gIFwidGh5XCIsXG4gIFwidGlkZVwiLFxuICBcInRpZVwiLFxuICBcInRpZ2h0XCIsXG4gIFwidGlnaHRseVwiLFxuICBcInRpbGxcIixcbiAgXCJ0aW1lXCIsXG4gIFwidGluXCIsXG4gIFwidGlueVwiLFxuICBcInRpcFwiLFxuICBcInRpcmVkXCIsXG4gIFwidGl0bGVcIixcbiAgXCJ0b1wiLFxuICBcInRvYmFjY29cIixcbiAgXCJ0b2RheVwiLFxuICBcInRvZ2V0aGVyXCIsXG4gIFwidG9sZFwiLFxuICBcInRvbW9ycm93XCIsXG4gIFwidG9uZVwiLFxuICBcInRvbmd1ZVwiLFxuICBcInRvbmlnaHRcIixcbiAgXCJ0b29cIixcbiAgXCJ0b29rXCIsXG4gIFwidG9vbFwiLFxuICBcInRvcFwiLFxuICBcInRvcGljXCIsXG4gIFwidG9yblwiLFxuICBcInRvdGFsXCIsXG4gIFwidG91Y2hcIixcbiAgXCJ0b3dhcmRcIixcbiAgXCJ0b3dlclwiLFxuICBcInRvd25cIixcbiAgXCJ0b3lcIixcbiAgXCJ0cmFjZVwiLFxuICBcInRyYWNrXCIsXG4gIFwidHJhZGVcIixcbiAgXCJ0cmFmZmljXCIsXG4gIFwidHJhaWxcIixcbiAgXCJ0cmFpblwiLFxuICBcInRyYW5zcG9ydGF0aW9uXCIsXG4gIFwidHJhcFwiLFxuICBcInRyYXZlbFwiLFxuICBcInRyZWF0ZWRcIixcbiAgXCJ0cmVlXCIsXG4gIFwidHJpYW5nbGVcIixcbiAgXCJ0cmliZVwiLFxuICBcInRyaWNrXCIsXG4gIFwidHJpZWRcIixcbiAgXCJ0cmlwXCIsXG4gIFwidHJvb3BzXCIsXG4gIFwidHJvcGljYWxcIixcbiAgXCJ0cm91YmxlXCIsXG4gIFwidHJ1Y2tcIixcbiAgXCJ0cnVua1wiLFxuICBcInRydXRoXCIsXG4gIFwidHJ5XCIsXG4gIFwidHViZVwiLFxuICBcInR1bmVcIixcbiAgXCJ0dXJuXCIsXG4gIFwidHdlbHZlXCIsXG4gIFwidHdlbnR5XCIsXG4gIFwidHdpY2VcIixcbiAgXCJ0d29cIixcbiAgXCJ0eXBlXCIsXG4gIFwidHlwaWNhbFwiLFxuICBcInVuY2xlXCIsXG4gIFwidW5kZXJcIixcbiAgXCJ1bmRlcmxpbmVcIixcbiAgXCJ1bmRlcnN0YW5kaW5nXCIsXG4gIFwidW5oYXBweVwiLFxuICBcInVuaW9uXCIsXG4gIFwidW5pdFwiLFxuICBcInVuaXZlcnNlXCIsXG4gIFwidW5rbm93blwiLFxuICBcInVubGVzc1wiLFxuICBcInVudGlsXCIsXG4gIFwidW51c3VhbFwiLFxuICBcInVwXCIsXG4gIFwidXBvblwiLFxuICBcInVwcGVyXCIsXG4gIFwidXB3YXJkXCIsXG4gIFwidXNcIixcbiAgXCJ1c2VcIixcbiAgXCJ1c2VmdWxcIixcbiAgXCJ1c2luZ1wiLFxuICBcInVzdWFsXCIsXG4gIFwidXN1YWxseVwiLFxuICBcInZhbGxleVwiLFxuICBcInZhbHVhYmxlXCIsXG4gIFwidmFsdWVcIixcbiAgXCJ2YXBvclwiLFxuICBcInZhcmlldHlcIixcbiAgXCJ2YXJpb3VzXCIsXG4gIFwidmFzdFwiLFxuICBcInZlZ2V0YWJsZVwiLFxuICBcInZlcmJcIixcbiAgXCJ2ZXJ0aWNhbFwiLFxuICBcInZlcnlcIixcbiAgXCJ2ZXNzZWxzXCIsXG4gIFwidmljdG9yeVwiLFxuICBcInZpZXdcIixcbiAgXCJ2aWxsYWdlXCIsXG4gIFwidmlzaXRcIixcbiAgXCJ2aXNpdG9yXCIsXG4gIFwidm9pY2VcIixcbiAgXCJ2b2x1bWVcIixcbiAgXCJ2b3RlXCIsXG4gIFwidm93ZWxcIixcbiAgXCJ2b3lhZ2VcIixcbiAgXCJ3YWdvblwiLFxuICBcIndhaXRcIixcbiAgXCJ3YWxrXCIsXG4gIFwid2FsbFwiLFxuICBcIndhbnRcIixcbiAgXCJ3YXJcIixcbiAgXCJ3YXJtXCIsXG4gIFwid2FyblwiLFxuICBcIndhc1wiLFxuICBcIndhc2hcIixcbiAgXCJ3YXN0ZVwiLFxuICBcIndhdGNoXCIsXG4gIFwid2F0ZXJcIixcbiAgXCJ3YXZlXCIsXG4gIFwid2F5XCIsXG4gIFwid2VcIixcbiAgXCJ3ZWFrXCIsXG4gIFwid2VhbHRoXCIsXG4gIFwid2VhclwiLFxuICBcIndlYXRoZXJcIixcbiAgXCJ3ZWVrXCIsXG4gIFwid2VpZ2hcIixcbiAgXCJ3ZWlnaHRcIixcbiAgXCJ3ZWxjb21lXCIsXG4gIFwid2VsbFwiLFxuICBcIndlbnRcIixcbiAgXCJ3ZXJlXCIsXG4gIFwid2VzdFwiLFxuICBcIndlc3Rlcm5cIixcbiAgXCJ3ZXRcIixcbiAgXCJ3aGFsZVwiLFxuICBcIndoYXRcIixcbiAgXCJ3aGF0ZXZlclwiLFxuICBcIndoZWF0XCIsXG4gIFwid2hlZWxcIixcbiAgXCJ3aGVuXCIsXG4gIFwid2hlbmV2ZXJcIixcbiAgXCJ3aGVyZVwiLFxuICBcIndoZXJldmVyXCIsXG4gIFwid2hldGhlclwiLFxuICBcIndoaWNoXCIsXG4gIFwid2hpbGVcIixcbiAgXCJ3aGlzcGVyZWRcIixcbiAgXCJ3aGlzdGxlXCIsXG4gIFwid2hpdGVcIixcbiAgXCJ3aG9cIixcbiAgXCJ3aG9sZVwiLFxuICBcIndob21cIixcbiAgXCJ3aG9zZVwiLFxuICBcIndoeVwiLFxuICBcIndpZGVcIixcbiAgXCJ3aWRlbHlcIixcbiAgXCJ3aWZlXCIsXG4gIFwid2lsZFwiLFxuICBcIndpbGxcIixcbiAgXCJ3aWxsaW5nXCIsXG4gIFwid2luXCIsXG4gIFwid2luZFwiLFxuICBcIndpbmRvd1wiLFxuICBcIndpbmdcIixcbiAgXCJ3aW50ZXJcIixcbiAgXCJ3aXJlXCIsXG4gIFwid2lzZVwiLFxuICBcIndpc2hcIixcbiAgXCJ3aXRoXCIsXG4gIFwid2l0aGluXCIsXG4gIFwid2l0aG91dFwiLFxuICBcIndvbGZcIixcbiAgXCJ3b21lblwiLFxuICBcIndvblwiLFxuICBcIndvbmRlclwiLFxuICBcIndvbmRlcmZ1bFwiLFxuICBcIndvb2RcIixcbiAgXCJ3b29kZW5cIixcbiAgXCJ3b29sXCIsXG4gIFwid29yZFwiLFxuICBcIndvcmVcIixcbiAgXCJ3b3JrXCIsXG4gIFwid29ya2VyXCIsXG4gIFwid29ybGRcIixcbiAgXCJ3b3JyaWVkXCIsXG4gIFwid29ycnlcIixcbiAgXCJ3b3JzZVwiLFxuICBcIndvcnRoXCIsXG4gIFwid291bGRcIixcbiAgXCJ3cmFwcGVkXCIsXG4gIFwid3JpdGVcIixcbiAgXCJ3cml0ZXJcIixcbiAgXCJ3cml0aW5nXCIsXG4gIFwid3JpdHRlblwiLFxuICBcIndyb25nXCIsXG4gIFwid3JvdGVcIixcbiAgXCJ5YXJkXCIsXG4gIFwieWVhclwiLFxuICBcInllbGxvd1wiLFxuICBcInllc1wiLFxuICBcInllc3RlcmRheVwiLFxuICBcInlldFwiLFxuICBcInlvdVwiLFxuICBcInlvdW5nXCIsXG4gIFwieW91bmdlclwiLFxuICBcInlvdXJcIixcbiAgXCJ5b3Vyc2VsZlwiLFxuICBcInlvdXRoXCIsXG4gIFwiemVyb1wiLFxuICBcInplYnJhXCIsXG4gIFwiemlwcGVyXCIsXG4gIFwiem9vXCIsXG4gIFwienVsdVwiLFxuXTtcblxuY29uc3Qgc2hvcnRlc3RXb3JkU2l6ZSA9IHdvcmRMaXN0LnJlZHVjZSgoc2hvcnRlc3RXb3JkLCBjdXJyZW50V29yZCkgPT5cbiAgY3VycmVudFdvcmQubGVuZ3RoIDwgc2hvcnRlc3RXb3JkLmxlbmd0aCA/IGN1cnJlbnRXb3JkIDogc2hvcnRlc3RXb3JkXG4pLmxlbmd0aDtcblxuY29uc3QgbG9uZ2VzdFdvcmRTaXplID0gd29yZExpc3QucmVkdWNlKChsb25nZXN0V29yZCwgY3VycmVudFdvcmQpID0+XG4gIGN1cnJlbnRXb3JkLmxlbmd0aCA+IGxvbmdlc3RXb3JkLmxlbmd0aCA/IGN1cnJlbnRXb3JkIDogbG9uZ2VzdFdvcmRcbikubGVuZ3RoO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGUob3B0aW9ucykge1xuICAvLyBpbml0YWxpemUgcmFuZG9tIG51bWJlciBnZW5lcmF0b3IgZm9yIHdvcmRzIGlmIG9wdGlvbnMuc2VlZCBpcyBwcm92aWRlZFxuICBjb25zdCByYW5kb20gPSBvcHRpb25zPy5zZWVkID8gbmV3IHNlZWRyYW5kb20ob3B0aW9ucy5zZWVkKSA6IG51bGw7XG5cbiAgY29uc3QgeyBtaW5MZW5ndGgsIG1heExlbmd0aCwgLi4ucmVzdCB9ID0gb3B0aW9ucyB8fCB7fTtcblxuICBmdW5jdGlvbiB3b3JkKCkge1xuICAgIGxldCBtaW4gPVxuICAgICAgdHlwZW9mIG1pbkxlbmd0aCAhPT0gXCJudW1iZXJcIlxuICAgICAgICA/IHNob3J0ZXN0V29yZFNpemVcbiAgICAgICAgOiBsaW1pdFdvcmRTaXplKG1pbkxlbmd0aCk7XG5cbiAgICBjb25zdCBtYXggPVxuICAgICAgdHlwZW9mIG1heExlbmd0aCAhPT0gXCJudW1iZXJcIlxuICAgICAgICA/IGxvbmdlc3RXb3JkU2l6ZVxuICAgICAgICA6IGxpbWl0V29yZFNpemUobWF4TGVuZ3RoKTtcblxuICAgIGlmIChtaW4gPiBtYXgpIG1pbiA9IG1heDtcblxuICAgIGxldCByaWdodFNpemUgPSBmYWxzZTtcbiAgICBsZXQgd29yZFVzZWQ7XG4gICAgd2hpbGUgKCFyaWdodFNpemUpIHtcbiAgICAgIHdvcmRVc2VkID0gZ2VuZXJhdGVSYW5kb21Xb3JkKCk7XG4gICAgICByaWdodFNpemUgPSB3b3JkVXNlZC5sZW5ndGggPD0gbWF4ICYmIHdvcmRVc2VkLmxlbmd0aCA+PSBtaW47XG4gICAgfVxuICAgIHJldHVybiB3b3JkVXNlZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdlbmVyYXRlUmFuZG9tV29yZCgpIHtcbiAgICByZXR1cm4gd29yZExpc3RbcmFuZEludCh3b3JkTGlzdC5sZW5ndGgpXTtcbiAgfVxuXG4gIC8vIGxpbWl0cyB0aGUgc2l6ZSBvZiB3b3JkcyB0byB0aGUgbWluaW11bSBhbmQgbWF4aW11bSBwb3NzaWJsZVxuICBmdW5jdGlvbiBsaW1pdFdvcmRTaXplKHdvcmRTaXplKSB7XG4gICAgaWYgKHdvcmRTaXplIDwgc2hvcnRlc3RXb3JkU2l6ZSkgd29yZFNpemUgPSBzaG9ydGVzdFdvcmRTaXplO1xuICAgIGlmICh3b3JkU2l6ZSA+IGxvbmdlc3RXb3JkU2l6ZSkgd29yZFNpemUgPSBsb25nZXN0V29yZFNpemU7XG4gICAgcmV0dXJuIHdvcmRTaXplO1xuICB9XG5cbiAgLy8gcmFuZG9tIGludCBhcyBzZWVkZWQgYnkgb3B0aW9ucy5zZWVkIGlmIGFwcGxpY2FibGUsIG9yIE1hdGgucmFuZG9tKCkgb3RoZXJ3aXNlXG4gIGZ1bmN0aW9uIHJhbmRJbnQobGVzc1RoYW4pIHtcbiAgICBjb25zdCByID0gcmFuZG9tID8gcmFuZG9tKCkgOiBNYXRoLnJhbmRvbSgpO1xuICAgIHJldHVybiBNYXRoLmZsb29yKHIgKiBsZXNzVGhhbik7XG4gIH1cblxuICAvLyBObyBhcmd1bWVudHMgPSBnZW5lcmF0ZSBvbmUgd29yZFxuICBpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHdvcmQoKTtcbiAgfVxuXG4gIC8vIEp1c3QgYSBudW1iZXIgPSByZXR1cm4gdGhhdCBtYW55IHdvcmRzXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJudW1iZXJcIikge1xuICAgIG9wdGlvbnMgPSB7IGV4YWN0bHk6IG9wdGlvbnMgfTtcbiAgfSBlbHNlIGlmIChPYmplY3Qua2V5cyhyZXN0KS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gd29yZCgpO1xuICB9XG5cbiAgLy8gb3B0aW9ucyBzdXBwb3J0ZWQ6IGV4YWN0bHksIG1pbiwgbWF4LCBqb2luXG4gIGlmIChvcHRpb25zLmV4YWN0bHkpIHtcbiAgICBvcHRpb25zLm1pbiA9IG9wdGlvbnMuZXhhY3RseTtcbiAgICBvcHRpb25zLm1heCA9IG9wdGlvbnMuZXhhY3RseTtcbiAgfVxuXG4gIC8vIG5vdCBhIG51bWJlciA9IG9uZSB3b3JkIHBhciBzdHJpbmdcbiAgaWYgKHR5cGVvZiBvcHRpb25zLndvcmRzUGVyU3RyaW5nICE9PSBcIm51bWJlclwiKSB7XG4gICAgb3B0aW9ucy53b3Jkc1BlclN0cmluZyA9IDE7XG4gIH1cblxuICAvL25vdCBhIGZ1bmN0aW9uID0gcmV0dXJucyB0aGUgcmF3IHdvcmRcbiAgaWYgKHR5cGVvZiBvcHRpb25zLmZvcm1hdHRlciAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgb3B0aW9ucy5mb3JtYXR0ZXIgPSAod29yZCkgPT4gd29yZDtcbiAgfVxuXG4gIC8vbm90IGEgc3RyaW5nID0gc2VwYXJhdG9yIGlzIGEgc3BhY2VcbiAgaWYgKHR5cGVvZiBvcHRpb25zLnNlcGFyYXRvciAhPT0gXCJzdHJpbmdcIikge1xuICAgIG9wdGlvbnMuc2VwYXJhdG9yID0gXCIgXCI7XG4gIH1cblxuICBjb25zdCB0b3RhbCA9IG9wdGlvbnMubWluICsgcmFuZEludChvcHRpb25zLm1heCArIDEgLSBvcHRpb25zLm1pbik7XG4gIGxldCByZXN1bHRzID0gW107XG4gIGxldCB0b2tlbiA9IFwiXCI7XG4gIGxldCByZWxhdGl2ZUluZGV4ID0gMDtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRvdGFsICogb3B0aW9ucy53b3Jkc1BlclN0cmluZzsgaSsrKSB7XG4gICAgaWYgKHJlbGF0aXZlSW5kZXggPT09IG9wdGlvbnMud29yZHNQZXJTdHJpbmcgLSAxKSB7XG4gICAgICB0b2tlbiArPSBvcHRpb25zLmZvcm1hdHRlcih3b3JkKCksIHJlbGF0aXZlSW5kZXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0b2tlbiArPSBvcHRpb25zLmZvcm1hdHRlcih3b3JkKCksIHJlbGF0aXZlSW5kZXgpICsgb3B0aW9ucy5zZXBhcmF0b3I7XG4gICAgfVxuICAgIHJlbGF0aXZlSW5kZXgrKztcbiAgICBpZiAoKGkgKyAxKSAlIG9wdGlvbnMud29yZHNQZXJTdHJpbmcgPT09IDApIHtcbiAgICAgIHJlc3VsdHMucHVzaCh0b2tlbik7XG4gICAgICB0b2tlbiA9IFwiXCI7XG4gICAgICByZWxhdGl2ZUluZGV4ID0gMDtcbiAgICB9XG4gIH1cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmpvaW4gPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXN1bHRzID0gcmVzdWx0cy5qb2luKG9wdGlvbnMuam9pbik7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvdW50KG9wdGlvbnMpIHtcbiAgbGV0IHsgbWluTGVuZ3RoLCBtYXhMZW5ndGggfSA9IG9wdGlvbnMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBtaW5MZW5ndGggIT09IFwibnVtYmVyXCIpIHtcbiAgICBtaW5MZW5ndGggPSBzaG9ydGVzdFdvcmRTaXplO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBtYXhMZW5ndGggIT09IFwibnVtYmVyXCIpIHtcbiAgICBtYXhMZW5ndGggPSBsb25nZXN0V29yZFNpemU7XG4gIH1cblxuICByZXR1cm4gd29yZExpc3QuZmlsdGVyKFxuICAgICh3b3JkKSA9PiB3b3JkLmxlbmd0aCA+PSBtaW5MZW5ndGggJiYgd29yZC5sZW5ndGggPD0gbWF4TGVuZ3RoXG4gICkubGVuZ3RoO1xufVxuIl0sIm5hbWVzIjpbInNlZWRyYW5kb20iLCJ3b3JkTGlzdCIsInNob3J0ZXN0V29yZFNpemUiLCJyZWR1Y2UiLCJzaG9ydGVzdFdvcmQiLCJjdXJyZW50V29yZCIsImxlbmd0aCIsImxvbmdlc3RXb3JkU2l6ZSIsImxvbmdlc3RXb3JkIiwiZ2VuZXJhdGUiLCJvcHRpb25zIiwicmFuZG9tIiwic2VlZCIsIm1pbkxlbmd0aCIsIm1heExlbmd0aCIsInJlc3QiLCJ3b3JkIiwibWluIiwibGltaXRXb3JkU2l6ZSIsIm1heCIsInJpZ2h0U2l6ZSIsIndvcmRVc2VkIiwiZ2VuZXJhdGVSYW5kb21Xb3JkIiwicmFuZEludCIsIndvcmRTaXplIiwibGVzc1RoYW4iLCJyIiwiTWF0aCIsImZsb29yIiwidW5kZWZpbmVkIiwiZXhhY3RseSIsIk9iamVjdCIsImtleXMiLCJ3b3Jkc1BlclN0cmluZyIsImZvcm1hdHRlciIsInNlcGFyYXRvciIsInRvdGFsIiwicmVzdWx0cyIsInRva2VuIiwicmVsYXRpdmVJbmRleCIsImkiLCJwdXNoIiwiam9pbiIsImNvdW50IiwiZmlsdGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/random-words/index.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fparkergraham%2FDocuments%2FProgramming%2Fcpsc559-youchat%2Fsrc%2Fapp%2Fpage.tsx&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);