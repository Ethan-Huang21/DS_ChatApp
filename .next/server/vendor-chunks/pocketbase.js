"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pocketbase";
exports.ids = ["vendor-chunks/pocketbase"];
exports.modules = {

/***/ "(ssr)/./node_modules/pocketbase/dist/pocketbase.es.mjs":
/*!********************************************************!*\
  !*** ./node_modules/pocketbase/dist/pocketbase.es.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdminService: () => (/* binding */ AdminService),\n/* harmony export */   AsyncAuthStore: () => (/* binding */ AsyncAuthStore),\n/* harmony export */   BaseAuthStore: () => (/* binding */ BaseAuthStore),\n/* harmony export */   ClientResponseError: () => (/* binding */ ClientResponseError),\n/* harmony export */   CollectionService: () => (/* binding */ CollectionService),\n/* harmony export */   CrudService: () => (/* binding */ CrudService),\n/* harmony export */   LocalAuthStore: () => (/* binding */ LocalAuthStore),\n/* harmony export */   LogService: () => (/* binding */ LogService),\n/* harmony export */   RealtimeService: () => (/* binding */ RealtimeService),\n/* harmony export */   RecordService: () => (/* binding */ RecordService),\n/* harmony export */   cookieParse: () => (/* binding */ cookieParse),\n/* harmony export */   cookieSerialize: () => (/* binding */ cookieSerialize),\n/* harmony export */   \"default\": () => (/* binding */ Client),\n/* harmony export */   getTokenPayload: () => (/* binding */ getTokenPayload),\n/* harmony export */   isTokenExpired: () => (/* binding */ isTokenExpired),\n/* harmony export */   normalizeUnknownQueryParams: () => (/* binding */ normalizeUnknownQueryParams)\n/* harmony export */ });\nclass ClientResponseError extends Error {\n    constructor(e){\n        super(\"ClientResponseError\"), this.url = \"\", this.status = 0, this.response = {}, this.isAbort = !1, this.originalError = null, Object.setPrototypeOf(this, ClientResponseError.prototype), null !== e && \"object\" == typeof e && (this.url = \"string\" == typeof e.url ? e.url : \"\", this.status = \"number\" == typeof e.status ? e.status : 0, this.isAbort = !!e.isAbort, this.originalError = e.originalError, null !== e.response && \"object\" == typeof e.response ? this.response = e.response : null !== e.data && \"object\" == typeof e.data ? this.response = e.data : this.response = {}), this.originalError || e instanceof ClientResponseError || (this.originalError = e), \"undefined\" != typeof DOMException && e instanceof DOMException && (this.isAbort = !0), this.name = \"ClientResponseError \" + this.status, this.message = this.response?.message, this.message || (this.isAbort ? this.message = \"The request was autocancelled. You can find more info in https://github.com/pocketbase/js-sdk#auto-cancellation.\" : this.originalError?.cause?.message?.includes(\"ECONNREFUSED ::1\") ? this.message = \"Failed to connect to the PocketBase server. Try changing the SDK URL from localhost to 127.0.0.1 (https://github.com/pocketbase/js-sdk/issues/21).\" : this.message = \"Something went wrong while processing your request.\");\n    }\n    get data() {\n        return this.response;\n    }\n    toJSON() {\n        return {\n            ...this\n        };\n    }\n}\nconst e = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\nfunction cookieParse(e, t) {\n    const s = {};\n    if (\"string\" != typeof e) return s;\n    const i = Object.assign({}, t || {}).decode || defaultDecode;\n    let n = 0;\n    for(; n < e.length;){\n        const t = e.indexOf(\"=\", n);\n        if (-1 === t) break;\n        let r = e.indexOf(\";\", n);\n        if (-1 === r) r = e.length;\n        else if (r < t) {\n            n = e.lastIndexOf(\";\", t - 1) + 1;\n            continue;\n        }\n        const o = e.slice(n, t).trim();\n        if (void 0 === s[o]) {\n            let n = e.slice(t + 1, r).trim();\n            34 === n.charCodeAt(0) && (n = n.slice(1, -1));\n            try {\n                s[o] = i(n);\n            } catch (e) {\n                s[o] = n;\n            }\n        }\n        n = r + 1;\n    }\n    return s;\n}\nfunction cookieSerialize(t, s, i) {\n    const n = Object.assign({}, i || {}), r = n.encode || defaultEncode;\n    if (!e.test(t)) throw new TypeError(\"argument name is invalid\");\n    const o = r(s);\n    if (o && !e.test(o)) throw new TypeError(\"argument val is invalid\");\n    let a = t + \"=\" + o;\n    if (null != n.maxAge) {\n        const e = n.maxAge - 0;\n        if (isNaN(e) || !isFinite(e)) throw new TypeError(\"option maxAge is invalid\");\n        a += \"; Max-Age=\" + Math.floor(e);\n    }\n    if (n.domain) {\n        if (!e.test(n.domain)) throw new TypeError(\"option domain is invalid\");\n        a += \"; Domain=\" + n.domain;\n    }\n    if (n.path) {\n        if (!e.test(n.path)) throw new TypeError(\"option path is invalid\");\n        a += \"; Path=\" + n.path;\n    }\n    if (n.expires) {\n        if (!function isDate(e) {\n            return \"[object Date]\" === Object.prototype.toString.call(e) || e instanceof Date;\n        }(n.expires) || isNaN(n.expires.valueOf())) throw new TypeError(\"option expires is invalid\");\n        a += \"; Expires=\" + n.expires.toUTCString();\n    }\n    if (n.httpOnly && (a += \"; HttpOnly\"), n.secure && (a += \"; Secure\"), n.priority) {\n        switch(\"string\" == typeof n.priority ? n.priority.toLowerCase() : n.priority){\n            case \"low\":\n                a += \"; Priority=Low\";\n                break;\n            case \"medium\":\n                a += \"; Priority=Medium\";\n                break;\n            case \"high\":\n                a += \"; Priority=High\";\n                break;\n            default:\n                throw new TypeError(\"option priority is invalid\");\n        }\n    }\n    if (n.sameSite) {\n        switch(\"string\" == typeof n.sameSite ? n.sameSite.toLowerCase() : n.sameSite){\n            case !0:\n                a += \"; SameSite=Strict\";\n                break;\n            case \"lax\":\n                a += \"; SameSite=Lax\";\n                break;\n            case \"strict\":\n                a += \"; SameSite=Strict\";\n                break;\n            case \"none\":\n                a += \"; SameSite=None\";\n                break;\n            default:\n                throw new TypeError(\"option sameSite is invalid\");\n        }\n    }\n    return a;\n}\nfunction defaultDecode(e) {\n    return -1 !== e.indexOf(\"%\") ? decodeURIComponent(e) : e;\n}\nfunction defaultEncode(e) {\n    return encodeURIComponent(e);\n}\nlet t;\nfunction getTokenPayload(e) {\n    if (e) try {\n        const s = decodeURIComponent(t(e.split(\".\")[1]).split(\"\").map(function(e) {\n            return \"%\" + (\"00\" + e.charCodeAt(0).toString(16)).slice(-2);\n        }).join(\"\"));\n        return JSON.parse(s) || {};\n    } catch (e) {}\n    return {};\n}\nfunction isTokenExpired(e, t = 0) {\n    let s = getTokenPayload(e);\n    return !(Object.keys(s).length > 0 && (!s.exp || s.exp - t > Date.now() / 1e3));\n}\nt = \"function\" == typeof atob ? atob : (e)=>{\n    let t = String(e).replace(/=+$/, \"\");\n    if (t.length % 4 == 1) throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n    for(var s, i, n = 0, r = 0, o = \"\"; i = t.charAt(r++); ~i && (s = n % 4 ? 64 * s + i : i, n++ % 4) ? o += String.fromCharCode(255 & s >> (-2 * n & 6)) : 0)i = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(i);\n    return o;\n};\nconst s = \"pb_auth\";\nclass BaseAuthStore {\n    constructor(){\n        this.baseToken = \"\", this.baseModel = null, this._onChangeCallbacks = [];\n    }\n    get token() {\n        return this.baseToken;\n    }\n    get model() {\n        return this.baseModel;\n    }\n    get isValid() {\n        return !isTokenExpired(this.token);\n    }\n    get isAdmin() {\n        return \"admin\" === getTokenPayload(this.token).type;\n    }\n    get isAuthRecord() {\n        return \"authRecord\" === getTokenPayload(this.token).type;\n    }\n    save(e, t) {\n        this.baseToken = e || \"\", this.baseModel = t || null, this.triggerChange();\n    }\n    clear() {\n        this.baseToken = \"\", this.baseModel = null, this.triggerChange();\n    }\n    loadFromCookie(e, t = s) {\n        const i = cookieParse(e || \"\")[t] || \"\";\n        let n = {};\n        try {\n            n = JSON.parse(i), (null === typeof n || \"object\" != typeof n || Array.isArray(n)) && (n = {});\n        } catch (e) {}\n        this.save(n.token || \"\", n.model || null);\n    }\n    exportToCookie(e, t = s) {\n        const i = {\n            secure: !0,\n            sameSite: !0,\n            httpOnly: !0,\n            path: \"/\"\n        }, n = getTokenPayload(this.token);\n        i.expires = n?.exp ? new Date(1e3 * n.exp) : new Date(\"1970-01-01\"), e = Object.assign({}, i, e);\n        const r = {\n            token: this.token,\n            model: this.model ? JSON.parse(JSON.stringify(this.model)) : null\n        };\n        let o = cookieSerialize(t, JSON.stringify(r), e);\n        const a = \"undefined\" != typeof Blob ? new Blob([\n            o\n        ]).size : o.length;\n        if (r.model && a > 4096) {\n            r.model = {\n                id: r?.model?.id,\n                email: r?.model?.email\n            };\n            const s = [\n                \"collectionId\",\n                \"username\",\n                \"verified\"\n            ];\n            for(const e in this.model)s.includes(e) && (r.model[e] = this.model[e]);\n            o = cookieSerialize(t, JSON.stringify(r), e);\n        }\n        return o;\n    }\n    onChange(e, t = !1) {\n        return this._onChangeCallbacks.push(e), t && e(this.token, this.model), ()=>{\n            for(let t = this._onChangeCallbacks.length - 1; t >= 0; t--)if (this._onChangeCallbacks[t] == e) return delete this._onChangeCallbacks[t], void this._onChangeCallbacks.splice(t, 1);\n        };\n    }\n    triggerChange() {\n        for (const e of this._onChangeCallbacks)e && e(this.token, this.model);\n    }\n}\nclass LocalAuthStore extends BaseAuthStore {\n    constructor(e = \"pocketbase_auth\"){\n        super(), this.storageFallback = {}, this.storageKey = e, this._bindStorageEvent();\n    }\n    get token() {\n        return (this._storageGet(this.storageKey) || {}).token || \"\";\n    }\n    get model() {\n        return (this._storageGet(this.storageKey) || {}).model || null;\n    }\n    save(e, t) {\n        this._storageSet(this.storageKey, {\n            token: e,\n            model: t\n        }), super.save(e, t);\n    }\n    clear() {\n        this._storageRemove(this.storageKey), super.clear();\n    }\n    _storageGet(e) {\n        if (false) {}\n        return this.storageFallback[e];\n    }\n    _storageSet(e, t) {\n        if (false) {} else this.storageFallback[e] = t;\n    }\n    _storageRemove(e) {\n         false && 0, delete this.storageFallback[e];\n    }\n    _bindStorageEvent() {\n         false && 0;\n    }\n}\nclass BaseService {\n    constructor(e){\n        this.client = e;\n    }\n}\nclass SettingsService extends BaseService {\n    async getAll(e) {\n        return e = Object.assign({\n            method: \"GET\"\n        }, e), this.client.send(\"/api/settings\", e);\n    }\n    async update(e, t) {\n        return t = Object.assign({\n            method: \"PATCH\",\n            body: e\n        }, t), this.client.send(\"/api/settings\", t);\n    }\n    async testS3(e = \"storage\", t) {\n        return t = Object.assign({\n            method: \"POST\",\n            body: {\n                filesystem: e\n            }\n        }, t), this.client.send(\"/api/settings/test/s3\", t).then(()=>!0);\n    }\n    async testEmail(e, t, s) {\n        return s = Object.assign({\n            method: \"POST\",\n            body: {\n                email: e,\n                template: t\n            }\n        }, s), this.client.send(\"/api/settings/test/email\", s).then(()=>!0);\n    }\n    async generateAppleClientSecret(e, t, s, i, n, r) {\n        return r = Object.assign({\n            method: \"POST\",\n            body: {\n                clientId: e,\n                teamId: t,\n                keyId: s,\n                privateKey: i,\n                duration: n\n            }\n        }, r), this.client.send(\"/api/settings/apple/generate-client-secret\", r);\n    }\n}\nclass CrudService extends BaseService {\n    decode(e) {\n        return e;\n    }\n    async getFullList(e, t) {\n        if (\"number\" == typeof e) return this._getFullList(e, t);\n        let s = 500;\n        return (t = Object.assign({}, e, t)).batch && (s = t.batch, delete t.batch), this._getFullList(s, t);\n    }\n    async getList(e = 1, t = 30, s) {\n        return (s = Object.assign({\n            method: \"GET\"\n        }, s)).query = Object.assign({\n            page: e,\n            perPage: t\n        }, s.query), this.client.send(this.baseCrudPath, s).then((e)=>(e.items = e.items?.map((e)=>this.decode(e)) || [], e));\n    }\n    async getFirstListItem(e, t) {\n        return (t = Object.assign({\n            requestKey: \"one_by_filter_\" + this.baseCrudPath + \"_\" + e\n        }, t)).query = Object.assign({\n            filter: e,\n            skipTotal: 1\n        }, t.query), this.getList(1, 1, t).then((e)=>{\n            if (!e?.items?.length) throw new ClientResponseError({\n                status: 404,\n                response: {\n                    code: 404,\n                    message: \"The requested resource wasn't found.\",\n                    data: {}\n                }\n            });\n            return e.items[0];\n        });\n    }\n    async getOne(e, t) {\n        if (!e) throw new ClientResponseError({\n            url: this.client.buildUrl(this.baseCrudPath + \"/\"),\n            status: 404,\n            response: {\n                code: 404,\n                message: \"Missing required record id.\",\n                data: {}\n            }\n        });\n        return t = Object.assign({\n            method: \"GET\"\n        }, t), this.client.send(this.baseCrudPath + \"/\" + encodeURIComponent(e), t).then((e)=>this.decode(e));\n    }\n    async create(e, t) {\n        return t = Object.assign({\n            method: \"POST\",\n            body: e\n        }, t), this.client.send(this.baseCrudPath, t).then((e)=>this.decode(e));\n    }\n    async update(e, t, s) {\n        return s = Object.assign({\n            method: \"PATCH\",\n            body: t\n        }, s), this.client.send(this.baseCrudPath + \"/\" + encodeURIComponent(e), s).then((e)=>this.decode(e));\n    }\n    async delete(e, t) {\n        return t = Object.assign({\n            method: \"DELETE\"\n        }, t), this.client.send(this.baseCrudPath + \"/\" + encodeURIComponent(e), t).then(()=>!0);\n    }\n    _getFullList(e = 500, t) {\n        (t = t || {}).query = Object.assign({\n            skipTotal: 1\n        }, t.query);\n        let s = [], request = async (i)=>this.getList(i, e || 500, t).then((e)=>{\n                const t = e.items;\n                return s = s.concat(t), t.length == e.perPage ? request(i + 1) : s;\n            });\n        return request(1);\n    }\n}\nfunction normalizeLegacyOptionsArgs(e, t, s, i) {\n    const n = void 0 !== i;\n    return n || void 0 !== s ? n ? (console.warn(e), t.body = Object.assign({}, t.body, s), t.query = Object.assign({}, t.query, i), t) : Object.assign(t, s) : t;\n}\nfunction resetAutoRefresh(e) {\n    e._resetAutoRefresh?.();\n}\nclass AdminService extends CrudService {\n    get baseCrudPath() {\n        return \"/api/admins\";\n    }\n    async update(e, t, s) {\n        return super.update(e, t, s).then((e)=>(this.client.authStore.model?.id === e.id && void 0 === this.client.authStore.model?.collectionId && this.client.authStore.save(this.client.authStore.token, e), e));\n    }\n    async delete(e, t) {\n        return super.delete(e, t).then((t)=>(t && this.client.authStore.model?.id === e && void 0 === this.client.authStore.model?.collectionId && this.client.authStore.clear(), t));\n    }\n    authResponse(e) {\n        const t = this.decode(e?.admin || {});\n        return e?.token && e?.admin && this.client.authStore.save(e.token, t), Object.assign({}, e, {\n            token: e?.token || \"\",\n            admin: t\n        });\n    }\n    async authWithPassword(e, t, s, i) {\n        let n = {\n            method: \"POST\",\n            body: {\n                identity: e,\n                password: t\n            }\n        };\n        n = normalizeLegacyOptionsArgs(\"This form of authWithPassword(email, pass, body?, query?) is deprecated. Consider replacing it with authWithPassword(email, pass, options?).\", n, s, i);\n        const r = n.autoRefreshThreshold;\n        delete n.autoRefreshThreshold, n.autoRefresh || resetAutoRefresh(this.client);\n        let o = await this.client.send(this.baseCrudPath + \"/auth-with-password\", n);\n        return o = this.authResponse(o), r && function registerAutoRefresh(e, t, s, i) {\n            resetAutoRefresh(e);\n            const n = e.beforeSend, r = e.authStore.model, o = e.authStore.onChange((t, s)=>{\n                (!t || s?.id != r?.id || (s?.collectionId || r?.collectionId) && s?.collectionId != r?.collectionId) && resetAutoRefresh(e);\n            });\n            e._resetAutoRefresh = function() {\n                o(), e.beforeSend = n, delete e._resetAutoRefresh;\n            }, e.beforeSend = async (r, o)=>{\n                const a = e.authStore.token;\n                if (o.query?.autoRefresh) return n ? n(r, o) : {\n                    url: r,\n                    sendOptions: o\n                };\n                let c = e.authStore.isValid;\n                if (c && isTokenExpired(e.authStore.token, t)) try {\n                    await s();\n                } catch (e) {\n                    c = !1;\n                }\n                c || await i();\n                const l = o.headers || {};\n                for(let t in l)if (\"authorization\" == t.toLowerCase() && a == l[t] && e.authStore.token) {\n                    l[t] = e.authStore.token;\n                    break;\n                }\n                return o.headers = l, n ? n(r, o) : {\n                    url: r,\n                    sendOptions: o\n                };\n            };\n        }(this.client, r, ()=>this.authRefresh({\n                autoRefresh: !0\n            }), ()=>this.authWithPassword(e, t, Object.assign({\n                autoRefresh: !0\n            }, n))), o;\n    }\n    async authRefresh(e, t) {\n        let s = {\n            method: \"POST\"\n        };\n        return s = normalizeLegacyOptionsArgs(\"This form of authRefresh(body?, query?) is deprecated. Consider replacing it with authRefresh(options?).\", s, e, t), this.client.send(this.baseCrudPath + \"/auth-refresh\", s).then(this.authResponse.bind(this));\n    }\n    async requestPasswordReset(e, t, s) {\n        let i = {\n            method: \"POST\",\n            body: {\n                email: e\n            }\n        };\n        return i = normalizeLegacyOptionsArgs(\"This form of requestPasswordReset(email, body?, query?) is deprecated. Consider replacing it with requestPasswordReset(email, options?).\", i, t, s), this.client.send(this.baseCrudPath + \"/request-password-reset\", i).then(()=>!0);\n    }\n    async confirmPasswordReset(e, t, s, i, n) {\n        let r = {\n            method: \"POST\",\n            body: {\n                token: e,\n                password: t,\n                passwordConfirm: s\n            }\n        };\n        return r = normalizeLegacyOptionsArgs(\"This form of confirmPasswordReset(resetToken, password, passwordConfirm, body?, query?) is deprecated. Consider replacing it with confirmPasswordReset(resetToken, password, passwordConfirm, options?).\", r, i, n), this.client.send(this.baseCrudPath + \"/confirm-password-reset\", r).then(()=>!0);\n    }\n}\nconst i = [\n    \"requestKey\",\n    \"$cancelKey\",\n    \"$autoCancel\",\n    \"fetch\",\n    \"headers\",\n    \"body\",\n    \"query\",\n    \"params\",\n    \"cache\",\n    \"credentials\",\n    \"headers\",\n    \"integrity\",\n    \"keepalive\",\n    \"method\",\n    \"mode\",\n    \"redirect\",\n    \"referrer\",\n    \"referrerPolicy\",\n    \"signal\",\n    \"window\"\n];\nfunction normalizeUnknownQueryParams(e) {\n    if (e) {\n        e.query = e.query || {};\n        for(let t in e)i.includes(t) || (e.query[t] = e[t], delete e[t]);\n    }\n}\nclass RealtimeService extends BaseService {\n    constructor(){\n        super(...arguments), this.clientId = \"\", this.eventSource = null, this.subscriptions = {}, this.lastSentSubscriptions = [], this.maxConnectTimeout = 15e3, this.reconnectAttempts = 0, this.maxReconnectAttempts = 1 / 0, this.predefinedReconnectIntervals = [\n            200,\n            300,\n            500,\n            1e3,\n            1200,\n            1500,\n            2e3\n        ], this.pendingConnects = [];\n    }\n    get isConnected() {\n        return !!this.eventSource && !!this.clientId && !this.pendingConnects.length;\n    }\n    async subscribe(e, t, s) {\n        if (!e) throw new Error(\"topic must be set.\");\n        let i = e;\n        if (s) {\n            normalizeUnknownQueryParams(s);\n            const e = \"options=\" + encodeURIComponent(JSON.stringify({\n                query: s.query,\n                headers: s.headers\n            }));\n            i += (i.includes(\"?\") ? \"&\" : \"?\") + e;\n        }\n        const listener = function(e) {\n            const s = e;\n            let i;\n            try {\n                i = JSON.parse(s?.data);\n            } catch  {}\n            t(i || {});\n        };\n        return this.subscriptions[i] || (this.subscriptions[i] = []), this.subscriptions[i].push(listener), this.isConnected ? 1 === this.subscriptions[i].length ? await this.submitSubscriptions() : this.eventSource?.addEventListener(i, listener) : await this.connect(), async ()=>this.unsubscribeByTopicAndListener(e, listener);\n    }\n    async unsubscribe(e) {\n        let t = !1;\n        if (e) {\n            const s = this.getSubscriptionsByTopic(e);\n            for(let e in s)if (this.hasSubscriptionListeners(e)) {\n                for (let t of this.subscriptions[e])this.eventSource?.removeEventListener(e, t);\n                delete this.subscriptions[e], t || (t = !0);\n            }\n        } else this.subscriptions = {};\n        this.hasSubscriptionListeners() ? t && await this.submitSubscriptions() : this.disconnect();\n    }\n    async unsubscribeByPrefix(e) {\n        let t = !1;\n        for(let s in this.subscriptions)if ((s + \"?\").startsWith(e)) {\n            t = !0;\n            for (let e of this.subscriptions[s])this.eventSource?.removeEventListener(s, e);\n            delete this.subscriptions[s];\n        }\n        t && (this.hasSubscriptionListeners() ? await this.submitSubscriptions() : this.disconnect());\n    }\n    async unsubscribeByTopicAndListener(e, t) {\n        let s = !1;\n        const i = this.getSubscriptionsByTopic(e);\n        for(let e in i){\n            if (!Array.isArray(this.subscriptions[e]) || !this.subscriptions[e].length) continue;\n            let i = !1;\n            for(let s = this.subscriptions[e].length - 1; s >= 0; s--)this.subscriptions[e][s] === t && (i = !0, delete this.subscriptions[e][s], this.subscriptions[e].splice(s, 1), this.eventSource?.removeEventListener(e, t));\n            i && (this.subscriptions[e].length || delete this.subscriptions[e], s || this.hasSubscriptionListeners(e) || (s = !0));\n        }\n        this.hasSubscriptionListeners() ? s && await this.submitSubscriptions() : this.disconnect();\n    }\n    hasSubscriptionListeners(e) {\n        if (this.subscriptions = this.subscriptions || {}, e) return !!this.subscriptions[e]?.length;\n        for(let e in this.subscriptions)if (this.subscriptions[e]?.length) return !0;\n        return !1;\n    }\n    async submitSubscriptions() {\n        if (this.clientId) return this.addAllSubscriptionListeners(), this.lastSentSubscriptions = this.getNonEmptySubscriptionKeys(), this.client.send(\"/api/realtime\", {\n            method: \"POST\",\n            body: {\n                clientId: this.clientId,\n                subscriptions: this.lastSentSubscriptions\n            },\n            requestKey: this.getSubscriptionsCancelKey()\n        }).catch((e)=>{\n            if (!e?.isAbort) throw e;\n        });\n    }\n    getSubscriptionsCancelKey() {\n        return \"realtime_\" + this.clientId;\n    }\n    getSubscriptionsByTopic(e) {\n        const t = {};\n        e = e.includes(\"?\") ? e : e + \"?\";\n        for(let s in this.subscriptions)(s + \"?\").startsWith(e) && (t[s] = this.subscriptions[s]);\n        return t;\n    }\n    getNonEmptySubscriptionKeys() {\n        const e = [];\n        for(let t in this.subscriptions)this.subscriptions[t].length && e.push(t);\n        return e;\n    }\n    addAllSubscriptionListeners() {\n        if (this.eventSource) {\n            this.removeAllSubscriptionListeners();\n            for(let e in this.subscriptions)for (let t of this.subscriptions[e])this.eventSource.addEventListener(e, t);\n        }\n    }\n    removeAllSubscriptionListeners() {\n        if (this.eventSource) for(let e in this.subscriptions)for (let t of this.subscriptions[e])this.eventSource.removeEventListener(e, t);\n    }\n    async connect() {\n        if (!(this.reconnectAttempts > 0)) return new Promise((e, t)=>{\n            this.pendingConnects.push({\n                resolve: e,\n                reject: t\n            }), this.pendingConnects.length > 1 || this.initConnect();\n        });\n    }\n    initConnect() {\n        this.disconnect(!0), clearTimeout(this.connectTimeoutId), this.connectTimeoutId = setTimeout(()=>{\n            this.connectErrorHandler(new Error(\"EventSource connect took too long.\"));\n        }, this.maxConnectTimeout), this.eventSource = new EventSource(this.client.buildUrl(\"/api/realtime\")), this.eventSource.onerror = (e)=>{\n            this.connectErrorHandler(new Error(\"Failed to establish realtime connection.\"));\n        }, this.eventSource.addEventListener(\"PB_CONNECT\", (e)=>{\n            const t = e;\n            this.clientId = t?.lastEventId, this.submitSubscriptions().then(async ()=>{\n                let e = 3;\n                for(; this.hasUnsentSubscriptions() && e > 0;)e--, await this.submitSubscriptions();\n            }).then(()=>{\n                for (let e of this.pendingConnects)e.resolve();\n                this.pendingConnects = [], this.reconnectAttempts = 0, clearTimeout(this.reconnectTimeoutId), clearTimeout(this.connectTimeoutId);\n                const t = this.getSubscriptionsByTopic(\"PB_CONNECT\");\n                for(let s in t)for (let i of t[s])i(e);\n            }).catch((e)=>{\n                this.clientId = \"\", this.connectErrorHandler(e);\n            });\n        });\n    }\n    hasUnsentSubscriptions() {\n        const e = this.getNonEmptySubscriptionKeys();\n        if (e.length != this.lastSentSubscriptions.length) return !0;\n        for (const t of e)if (!this.lastSentSubscriptions.includes(t)) return !0;\n        return !1;\n    }\n    connectErrorHandler(e) {\n        if (clearTimeout(this.connectTimeoutId), clearTimeout(this.reconnectTimeoutId), !this.clientId && !this.reconnectAttempts || this.reconnectAttempts > this.maxReconnectAttempts) {\n            for (let t of this.pendingConnects)t.reject(new ClientResponseError(e));\n            return this.pendingConnects = [], void this.disconnect();\n        }\n        this.disconnect(!0);\n        const t = this.predefinedReconnectIntervals[this.reconnectAttempts] || this.predefinedReconnectIntervals[this.predefinedReconnectIntervals.length - 1];\n        this.reconnectAttempts++, this.reconnectTimeoutId = setTimeout(()=>{\n            this.initConnect();\n        }, t);\n    }\n    disconnect(e = !1) {\n        if (clearTimeout(this.connectTimeoutId), clearTimeout(this.reconnectTimeoutId), this.removeAllSubscriptionListeners(), this.client.cancelRequest(this.getSubscriptionsCancelKey()), this.eventSource?.close(), this.eventSource = null, this.clientId = \"\", !e) {\n            this.reconnectAttempts = 0;\n            for (let e of this.pendingConnects)e.resolve();\n            this.pendingConnects = [];\n        }\n    }\n}\nclass RecordService extends CrudService {\n    constructor(e, t){\n        super(e), this.collectionIdOrName = t;\n    }\n    get baseCrudPath() {\n        return this.baseCollectionPath + \"/records\";\n    }\n    get baseCollectionPath() {\n        return \"/api/collections/\" + encodeURIComponent(this.collectionIdOrName);\n    }\n    async subscribe(e, t, s) {\n        if (!e) throw new Error(\"Missing topic.\");\n        if (!t) throw new Error(\"Missing subscription callback.\");\n        return this.client.realtime.subscribe(this.collectionIdOrName + \"/\" + e, t, s);\n    }\n    async unsubscribe(e) {\n        return e ? this.client.realtime.unsubscribe(this.collectionIdOrName + \"/\" + e) : this.client.realtime.unsubscribeByPrefix(this.collectionIdOrName);\n    }\n    async getFullList(e, t) {\n        if (\"number\" == typeof e) return super.getFullList(e, t);\n        const s = Object.assign({}, e, t);\n        return super.getFullList(s);\n    }\n    async getList(e = 1, t = 30, s) {\n        return super.getList(e, t, s);\n    }\n    async getFirstListItem(e, t) {\n        return super.getFirstListItem(e, t);\n    }\n    async getOne(e, t) {\n        return super.getOne(e, t);\n    }\n    async create(e, t) {\n        return super.create(e, t);\n    }\n    async update(e, t, s) {\n        return super.update(e, t, s).then((e)=>(this.client.authStore.model?.id !== e?.id || this.client.authStore.model?.collectionId !== this.collectionIdOrName && this.client.authStore.model?.collectionName !== this.collectionIdOrName || this.client.authStore.save(this.client.authStore.token, e), e));\n    }\n    async delete(e, t) {\n        return super.delete(e, t).then((t)=>(!t || this.client.authStore.model?.id !== e || this.client.authStore.model?.collectionId !== this.collectionIdOrName && this.client.authStore.model?.collectionName !== this.collectionIdOrName || this.client.authStore.clear(), t));\n    }\n    authResponse(e) {\n        const t = this.decode(e?.record || {});\n        return this.client.authStore.save(e?.token, t), Object.assign({}, e, {\n            token: e?.token || \"\",\n            record: t\n        });\n    }\n    async listAuthMethods(e) {\n        return e = Object.assign({\n            method: \"GET\"\n        }, e), this.client.send(this.baseCollectionPath + \"/auth-methods\", e).then((e)=>Object.assign({}, e, {\n                usernamePassword: !!e?.usernamePassword,\n                emailPassword: !!e?.emailPassword,\n                authProviders: Array.isArray(e?.authProviders) ? e?.authProviders : []\n            }));\n    }\n    async authWithPassword(e, t, s, i) {\n        let n = {\n            method: \"POST\",\n            body: {\n                identity: e,\n                password: t\n            }\n        };\n        return n = normalizeLegacyOptionsArgs(\"This form of authWithPassword(usernameOrEmail, pass, body?, query?) is deprecated. Consider replacing it with authWithPassword(usernameOrEmail, pass, options?).\", n, s, i), this.client.send(this.baseCollectionPath + \"/auth-with-password\", n).then((e)=>this.authResponse(e));\n    }\n    async authWithOAuth2Code(e, t, s, i, n, r, o) {\n        let a = {\n            method: \"POST\",\n            body: {\n                provider: e,\n                code: t,\n                codeVerifier: s,\n                redirectUrl: i,\n                createData: n\n            }\n        };\n        return a = normalizeLegacyOptionsArgs(\"This form of authWithOAuth2Code(provider, code, codeVerifier, redirectUrl, createData?, body?, query?) is deprecated. Consider replacing it with authWithOAuth2Code(provider, code, codeVerifier, redirectUrl, createData?, options?).\", a, r, o), this.client.send(this.baseCollectionPath + \"/auth-with-oauth2\", a).then((e)=>this.authResponse(e));\n    }\n    async authWithOAuth2(...e) {\n        if (e.length > 1 || \"string\" == typeof e?.[0]) return console.warn(\"PocketBase: This form of authWithOAuth2() is deprecated and may get removed in the future. Please replace with authWithOAuth2Code() OR use the authWithOAuth2() realtime form as shown in https://pocketbase.io/docs/authentication/#oauth2-integration.\"), this.authWithOAuth2Code(e?.[0] || \"\", e?.[1] || \"\", e?.[2] || \"\", e?.[3] || \"\", e?.[4] || {}, e?.[5] || {}, e?.[6] || {});\n        const t = e?.[0] || {}, s = (await this.listAuthMethods()).authProviders.find((e)=>e.name === t.provider);\n        if (!s) throw new ClientResponseError(new Error(`Missing or invalid provider \"${t.provider}\".`));\n        const i = this.client.buildUrl(\"/api/oauth2-redirect\"), n = new RealtimeService(this.client);\n        let r = null;\n        function cleanup() {\n            r?.close(), n.unsubscribe();\n        }\n        return t.urlCallback || (r = openBrowserPopup(void 0)), new Promise(async (e, o)=>{\n            try {\n                await n.subscribe(\"@oauth2\", async (r)=>{\n                    const a = n.clientId;\n                    try {\n                        if (!r.state || a !== r.state) throw new Error(\"State parameters don't match.\");\n                        if (r.error || !r.code) throw new Error(\"OAuth2 redirect error or missing code: \" + r.error);\n                        const n = Object.assign({}, t);\n                        delete n.provider, delete n.scopes, delete n.createData, delete n.urlCallback;\n                        const o = await this.authWithOAuth2Code(s.name, r.code, s.codeVerifier, i, t.createData, n);\n                        e(o);\n                    } catch (e) {\n                        o(new ClientResponseError(e));\n                    }\n                    cleanup();\n                });\n                const a = {\n                    state: n.clientId\n                };\n                t.scopes?.length && (a.scope = t.scopes.join(\" \"));\n                const c = this._replaceQueryParams(s.authUrl + i, a);\n                let l = t.urlCallback || function(e) {\n                    r ? r.location.href = e : r = openBrowserPopup(e);\n                };\n                await l(c);\n            } catch (e) {\n                cleanup(), o(new ClientResponseError(e));\n            }\n        });\n    }\n    async authRefresh(e, t) {\n        let s = {\n            method: \"POST\"\n        };\n        return s = normalizeLegacyOptionsArgs(\"This form of authRefresh(body?, query?) is deprecated. Consider replacing it with authRefresh(options?).\", s, e, t), this.client.send(this.baseCollectionPath + \"/auth-refresh\", s).then((e)=>this.authResponse(e));\n    }\n    async requestPasswordReset(e, t, s) {\n        let i = {\n            method: \"POST\",\n            body: {\n                email: e\n            }\n        };\n        return i = normalizeLegacyOptionsArgs(\"This form of requestPasswordReset(email, body?, query?) is deprecated. Consider replacing it with requestPasswordReset(email, options?).\", i, t, s), this.client.send(this.baseCollectionPath + \"/request-password-reset\", i).then(()=>!0);\n    }\n    async confirmPasswordReset(e, t, s, i, n) {\n        let r = {\n            method: \"POST\",\n            body: {\n                token: e,\n                password: t,\n                passwordConfirm: s\n            }\n        };\n        return r = normalizeLegacyOptionsArgs(\"This form of confirmPasswordReset(token, password, passwordConfirm, body?, query?) is deprecated. Consider replacing it with confirmPasswordReset(token, password, passwordConfirm, options?).\", r, i, n), this.client.send(this.baseCollectionPath + \"/confirm-password-reset\", r).then(()=>!0);\n    }\n    async requestVerification(e, t, s) {\n        let i = {\n            method: \"POST\",\n            body: {\n                email: e\n            }\n        };\n        return i = normalizeLegacyOptionsArgs(\"This form of requestVerification(email, body?, query?) is deprecated. Consider replacing it with requestVerification(email, options?).\", i, t, s), this.client.send(this.baseCollectionPath + \"/request-verification\", i).then(()=>!0);\n    }\n    async confirmVerification(e, t, s) {\n        let i = {\n            method: \"POST\",\n            body: {\n                token: e\n            }\n        };\n        return i = normalizeLegacyOptionsArgs(\"This form of confirmVerification(token, body?, query?) is deprecated. Consider replacing it with confirmVerification(token, options?).\", i, t, s), this.client.send(this.baseCollectionPath + \"/confirm-verification\", i).then(()=>{\n            const t = getTokenPayload(e), s = this.client.authStore.model;\n            return s && !s.verified && s.id === t.id && s.collectionId === t.collectionId && (s.verified = !0, this.client.authStore.save(this.client.authStore.token, s)), !0;\n        });\n    }\n    async requestEmailChange(e, t, s) {\n        let i = {\n            method: \"POST\",\n            body: {\n                newEmail: e\n            }\n        };\n        return i = normalizeLegacyOptionsArgs(\"This form of requestEmailChange(newEmail, body?, query?) is deprecated. Consider replacing it with requestEmailChange(newEmail, options?).\", i, t, s), this.client.send(this.baseCollectionPath + \"/request-email-change\", i).then(()=>!0);\n    }\n    async confirmEmailChange(e, t, s, i) {\n        let n = {\n            method: \"POST\",\n            body: {\n                token: e,\n                password: t\n            }\n        };\n        return n = normalizeLegacyOptionsArgs(\"This form of confirmEmailChange(token, password, body?, query?) is deprecated. Consider replacing it with confirmEmailChange(token, password, options?).\", n, s, i), this.client.send(this.baseCollectionPath + \"/confirm-email-change\", n).then(()=>{\n            const t = getTokenPayload(e), s = this.client.authStore.model;\n            return s && s.id === t.id && s.collectionId === t.collectionId && this.client.authStore.clear(), !0;\n        });\n    }\n    async listExternalAuths(e, t) {\n        return t = Object.assign({\n            method: \"GET\"\n        }, t), this.client.send(this.baseCrudPath + \"/\" + encodeURIComponent(e) + \"/external-auths\", t);\n    }\n    async unlinkExternalAuth(e, t, s) {\n        return s = Object.assign({\n            method: \"DELETE\"\n        }, s), this.client.send(this.baseCrudPath + \"/\" + encodeURIComponent(e) + \"/external-auths/\" + encodeURIComponent(t), s).then(()=>!0);\n    }\n    _replaceQueryParams(e, t = {}) {\n        let s = e, i = \"\";\n        e.indexOf(\"?\") >= 0 && (s = e.substring(0, e.indexOf(\"?\")), i = e.substring(e.indexOf(\"?\") + 1));\n        const n = {}, r = i.split(\"&\");\n        for (const e of r){\n            if (\"\" == e) continue;\n            const t = e.split(\"=\");\n            n[decodeURIComponent(t[0].replace(/\\+/g, \" \"))] = decodeURIComponent((t[1] || \"\").replace(/\\+/g, \" \"));\n        }\n        for(let e in t)t.hasOwnProperty(e) && (null == t[e] ? delete n[e] : n[e] = t[e]);\n        i = \"\";\n        for(let e in n)n.hasOwnProperty(e) && (\"\" != i && (i += \"&\"), i += encodeURIComponent(e.replace(/%20/g, \"+\")) + \"=\" + encodeURIComponent(n[e].replace(/%20/g, \"+\")));\n        return \"\" != i ? s + \"?\" + i : s;\n    }\n}\nfunction openBrowserPopup(e) {\n    if (true) throw new ClientResponseError(new Error(\"Not in a browser context - please pass a custom urlCallback function.\"));\n    let t = 1024, s = 768, i = window.innerWidth, n = window.innerHeight;\n    t = t > i ? i : t, s = s > n ? n : s;\n    let r = i / 2 - t / 2, o = n / 2 - s / 2;\n    return window.open(e, \"popup_window\", \"width=\" + t + \",height=\" + s + \",top=\" + o + \",left=\" + r + \",resizable,menubar=no\");\n}\nclass CollectionService extends CrudService {\n    get baseCrudPath() {\n        return \"/api/collections\";\n    }\n    async import(e, t = !1, s) {\n        return s = Object.assign({\n            method: \"PUT\",\n            body: {\n                collections: e,\n                deleteMissing: t\n            }\n        }, s), this.client.send(this.baseCrudPath + \"/import\", s).then(()=>!0);\n    }\n}\nclass LogService extends BaseService {\n    async getList(e = 1, t = 30, s) {\n        return (s = Object.assign({\n            method: \"GET\"\n        }, s)).query = Object.assign({\n            page: e,\n            perPage: t\n        }, s.query), this.client.send(\"/api/logs\", s);\n    }\n    async getOne(e, t) {\n        if (!e) throw new ClientResponseError({\n            url: this.client.buildUrl(\"/api/logs/\"),\n            status: 404,\n            response: {\n                code: 404,\n                message: \"Missing required log id.\",\n                data: {}\n            }\n        });\n        return t = Object.assign({\n            method: \"GET\"\n        }, t), this.client.send(\"/api/logs/\" + encodeURIComponent(e), t);\n    }\n    async getStats(e) {\n        return e = Object.assign({\n            method: \"GET\"\n        }, e), this.client.send(\"/api/logs/stats\", e);\n    }\n}\nclass HealthService extends BaseService {\n    async check(e) {\n        return e = Object.assign({\n            method: \"GET\"\n        }, e), this.client.send(\"/api/health\", e);\n    }\n}\nclass FileService extends BaseService {\n    getUrl(e, t, s = {}) {\n        if (!t || !e?.id || !e?.collectionId && !e?.collectionName) return \"\";\n        const i = [];\n        i.push(\"api\"), i.push(\"files\"), i.push(encodeURIComponent(e.collectionId || e.collectionName)), i.push(encodeURIComponent(e.id)), i.push(encodeURIComponent(t));\n        let n = this.client.buildUrl(i.join(\"/\"));\n        if (Object.keys(s).length) {\n            !1 === s.download && delete s.download;\n            const e = new URLSearchParams(s);\n            n += (n.includes(\"?\") ? \"&\" : \"?\") + e;\n        }\n        return n;\n    }\n    async getToken(e) {\n        return e = Object.assign({\n            method: \"POST\"\n        }, e), this.client.send(\"/api/files/token\", e).then((e)=>e?.token || \"\");\n    }\n}\nclass BackupService extends BaseService {\n    async getFullList(e) {\n        return e = Object.assign({\n            method: \"GET\"\n        }, e), this.client.send(\"/api/backups\", e);\n    }\n    async create(e, t) {\n        return t = Object.assign({\n            method: \"POST\",\n            body: {\n                name: e\n            }\n        }, t), this.client.send(\"/api/backups\", t).then(()=>!0);\n    }\n    async upload(e, t) {\n        return t = Object.assign({\n            method: \"POST\",\n            body: e\n        }, t), this.client.send(\"/api/backups/upload\", t).then(()=>!0);\n    }\n    async delete(e, t) {\n        return t = Object.assign({\n            method: \"DELETE\"\n        }, t), this.client.send(`/api/backups/${encodeURIComponent(e)}`, t).then(()=>!0);\n    }\n    async restore(e, t) {\n        return t = Object.assign({\n            method: \"POST\"\n        }, t), this.client.send(`/api/backups/${encodeURIComponent(e)}/restore`, t).then(()=>!0);\n    }\n    getDownloadUrl(e, t) {\n        return this.client.buildUrl(`/api/backups/${encodeURIComponent(t)}?token=${encodeURIComponent(e)}`);\n    }\n}\nclass Client {\n    constructor(e = \"/\", t, s = \"en-US\"){\n        this.cancelControllers = {}, this.recordServices = {}, this.enableAutoCancellation = !0, this.baseUrl = e, this.lang = s, this.authStore = t || new LocalAuthStore, this.admins = new AdminService(this), this.collections = new CollectionService(this), this.files = new FileService(this), this.logs = new LogService(this), this.settings = new SettingsService(this), this.realtime = new RealtimeService(this), this.health = new HealthService(this), this.backups = new BackupService(this);\n    }\n    collection(e) {\n        return this.recordServices[e] || (this.recordServices[e] = new RecordService(this, e)), this.recordServices[e];\n    }\n    autoCancellation(e) {\n        return this.enableAutoCancellation = !!e, this;\n    }\n    cancelRequest(e) {\n        return this.cancelControllers[e] && (this.cancelControllers[e].abort(), delete this.cancelControllers[e]), this;\n    }\n    cancelAllRequests() {\n        for(let e in this.cancelControllers)this.cancelControllers[e].abort();\n        return this.cancelControllers = {}, this;\n    }\n    filter(e, t) {\n        if (!t) return e;\n        for(let s in t){\n            let i = t[s];\n            switch(typeof i){\n                case \"boolean\":\n                case \"number\":\n                    i = \"\" + i;\n                    break;\n                case \"string\":\n                    i = \"'\" + i.replace(/'/g, \"\\\\'\") + \"'\";\n                    break;\n                default:\n                    i = null === i ? \"null\" : i instanceof Date ? \"'\" + i.toISOString().replace(\"T\", \" \") + \"'\" : \"'\" + JSON.stringify(i).replace(/'/g, \"\\\\'\") + \"'\";\n            }\n            e = e.replaceAll(\"{:\" + s + \"}\", i);\n        }\n        return e;\n    }\n    getFileUrl(e, t, s = {}) {\n        return this.files.getUrl(e, t, s);\n    }\n    buildUrl(e) {\n        let t = this.baseUrl;\n        return  true || (0), e && (t += t.endsWith(\"/\") ? \"\" : \"/\", t += e.startsWith(\"/\") ? e.substring(1) : e), t;\n    }\n    async send(e, t) {\n        t = this.initSendOptions(e, t);\n        let s = this.buildUrl(e);\n        if (this.beforeSend) {\n            const e = Object.assign({}, await this.beforeSend(s, t));\n            void 0 !== e.url || void 0 !== e.options ? (s = e.url || s, t = e.options || t) : Object.keys(e).length && (t = e, console?.warn && console.warn(\"Deprecated format of beforeSend return: please use `return { url, options }`, instead of `return options`.\"));\n        }\n        if (void 0 !== t.query) {\n            const e = this.serializeQueryParams(t.query);\n            e && (s += (s.includes(\"?\") ? \"&\" : \"?\") + e), delete t.query;\n        }\n        \"application/json\" == this.getHeader(t.headers, \"Content-Type\") && t.body && \"string\" != typeof t.body && (t.body = JSON.stringify(t.body));\n        return (t.fetch || fetch)(s, t).then(async (e)=>{\n            let t = {};\n            try {\n                t = await e.json();\n            } catch (e) {}\n            if (this.afterSend && (t = await this.afterSend(e, t)), e.status >= 400) throw new ClientResponseError({\n                url: e.url,\n                status: e.status,\n                data: t\n            });\n            return t;\n        }).catch((e)=>{\n            throw new ClientResponseError(e);\n        });\n    }\n    initSendOptions(e, t) {\n        if ((t = Object.assign({\n            method: \"GET\"\n        }, t)).body = this.convertToFormDataIfNeeded(t.body), normalizeUnknownQueryParams(t), t.query = Object.assign({}, t.params, t.query), void 0 === t.requestKey && (!1 === t.$autoCancel || !1 === t.query.$autoCancel ? t.requestKey = null : (t.$cancelKey || t.query.$cancelKey) && (t.requestKey = t.$cancelKey || t.query.$cancelKey)), delete t.$autoCancel, delete t.query.$autoCancel, delete t.$cancelKey, delete t.query.$cancelKey, null !== this.getHeader(t.headers, \"Content-Type\") || this.isFormData(t.body) || (t.headers = Object.assign({}, t.headers, {\n            \"Content-Type\": \"application/json\"\n        })), null === this.getHeader(t.headers, \"Accept-Language\") && (t.headers = Object.assign({}, t.headers, {\n            \"Accept-Language\": this.lang\n        })), this.authStore.token && null === this.getHeader(t.headers, \"Authorization\") && (t.headers = Object.assign({}, t.headers, {\n            Authorization: this.authStore.token\n        })), this.enableAutoCancellation && null !== t.requestKey) {\n            const s = t.requestKey || (t.method || \"GET\") + e;\n            delete t.requestKey, this.cancelRequest(s);\n            const i = new AbortController;\n            this.cancelControllers[s] = i, t.signal = i.signal;\n        }\n        return t;\n    }\n    convertToFormDataIfNeeded(e) {\n        if (\"undefined\" == typeof FormData || void 0 === e || \"object\" != typeof e || null === e || this.isFormData(e) || !this.hasBlobField(e)) return e;\n        const t = new FormData;\n        for(const s in e){\n            const i = e[s];\n            if (\"object\" != typeof i || this.hasBlobField({\n                data: i\n            })) {\n                const e = Array.isArray(i) ? i : [\n                    i\n                ];\n                for (let i of e)t.append(s, i);\n            } else {\n                let e = {};\n                e[s] = i, t.append(\"@jsonPayload\", JSON.stringify(e));\n            }\n        }\n        return t;\n    }\n    hasBlobField(e) {\n        for(const t in e){\n            const s = Array.isArray(e[t]) ? e[t] : [\n                e[t]\n            ];\n            for (const e of s)if (\"undefined\" != typeof Blob && e instanceof Blob || \"undefined\" != typeof File && e instanceof File) return !0;\n        }\n        return !1;\n    }\n    getHeader(e, t) {\n        e = e || {}, t = t.toLowerCase();\n        for(let s in e)if (s.toLowerCase() == t) return e[s];\n        return null;\n    }\n    isFormData(e) {\n        return e && (\"FormData\" === e.constructor.name || \"undefined\" != typeof FormData && e instanceof FormData);\n    }\n    serializeQueryParams(e) {\n        const t = [];\n        for(const s in e){\n            if (null === e[s]) continue;\n            const i = e[s], n = encodeURIComponent(s);\n            if (Array.isArray(i)) for (const e of i)t.push(n + \"=\" + encodeURIComponent(e));\n            else i instanceof Date ? t.push(n + \"=\" + encodeURIComponent(i.toISOString())) : null !== typeof i && \"object\" == typeof i ? t.push(n + \"=\" + encodeURIComponent(JSON.stringify(i))) : t.push(n + \"=\" + encodeURIComponent(i));\n        }\n        return t.join(\"&\");\n    }\n}\nclass AsyncAuthStore extends BaseAuthStore {\n    constructor(e){\n        super(), this.queue = [], this.saveFunc = e.save, this.clearFunc = e.clear, this._enqueue(()=>this._loadInitial(e.initial));\n    }\n    save(e, t) {\n        super.save(e, t);\n        let s = \"\";\n        try {\n            s = JSON.stringify({\n                token: e,\n                model: t\n            });\n        } catch (e) {\n            console.warn(\"AsyncAuthStore: failed to stringify the new state\");\n        }\n        this._enqueue(()=>this.saveFunc(s));\n    }\n    clear() {\n        super.clear(), this.clearFunc ? this._enqueue(()=>this.clearFunc()) : this._enqueue(()=>this.saveFunc(\"\"));\n    }\n    async _loadInitial(e) {\n        try {\n            if (e = await e) {\n                let t;\n                \"string\" == typeof e ? t = JSON.parse(e) || {} : \"object\" == typeof e && (t = e), this.save(t.token || \"\", t.model || null);\n            }\n        } catch (e) {}\n    }\n    _enqueue(e) {\n        this.queue.push(e), 1 == this.queue.length && this._dequeue();\n    }\n    _dequeue() {\n        this.queue.length && this.queue[0]().finally(()=>{\n            this.queue.shift(), this.queue.length && this._dequeue();\n        });\n    }\n}\n //# sourceMappingURL=pocketbase.es.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9ja2V0YmFzZS9kaXN0L3BvY2tldGJhc2UuZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxNQUFNQSw0QkFBNEJDO0lBQU1DLFlBQVlDLENBQUMsQ0FBQztRQUFDLEtBQUssQ0FBQyx3QkFBdUIsSUFBSSxDQUFDQyxHQUFHLEdBQUMsSUFBRyxJQUFJLENBQUNDLE1BQU0sR0FBQyxHQUFFLElBQUksQ0FBQ0MsUUFBUSxHQUFDLENBQUMsR0FBRSxJQUFJLENBQUNDLE9BQU8sR0FBQyxDQUFDLEdBQUUsSUFBSSxDQUFDQyxhQUFhLEdBQUMsTUFBS0MsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBQ1Ysb0JBQW9CVyxTQUFTLEdBQUUsU0FBT1IsS0FBRyxZQUFVLE9BQU9BLEtBQUksS0FBSSxDQUFDQyxHQUFHLEdBQUMsWUFBVSxPQUFPRCxFQUFFQyxHQUFHLEdBQUNELEVBQUVDLEdBQUcsR0FBQyxJQUFHLElBQUksQ0FBQ0MsTUFBTSxHQUFDLFlBQVUsT0FBT0YsRUFBRUUsTUFBTSxHQUFDRixFQUFFRSxNQUFNLEdBQUMsR0FBRSxJQUFJLENBQUNFLE9BQU8sR0FBQyxDQUFDLENBQUNKLEVBQUVJLE9BQU8sRUFBQyxJQUFJLENBQUNDLGFBQWEsR0FBQ0wsRUFBRUssYUFBYSxFQUFDLFNBQU9MLEVBQUVHLFFBQVEsSUFBRSxZQUFVLE9BQU9ILEVBQUVHLFFBQVEsR0FBQyxJQUFJLENBQUNBLFFBQVEsR0FBQ0gsRUFBRUcsUUFBUSxHQUFDLFNBQU9ILEVBQUVTLElBQUksSUFBRSxZQUFVLE9BQU9ULEVBQUVTLElBQUksR0FBQyxJQUFJLENBQUNOLFFBQVEsR0FBQ0gsRUFBRVMsSUFBSSxHQUFDLElBQUksQ0FBQ04sUUFBUSxHQUFDLENBQUMsSUFBRyxJQUFJLENBQUNFLGFBQWEsSUFBRUwsYUFBYUgsdUJBQXNCLEtBQUksQ0FBQ1EsYUFBYSxHQUFDTCxDQUFBQSxHQUFHLGVBQWEsT0FBT1UsZ0JBQWNW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dGJhc2UuZXMubWpzPzRkZmUiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQ2xpZW50UmVzcG9uc2VFcnJvciBleHRlbmRzIEVycm9ye2NvbnN0cnVjdG9yKGUpe3N1cGVyKFwiQ2xpZW50UmVzcG9uc2VFcnJvclwiKSx0aGlzLnVybD1cIlwiLHRoaXMuc3RhdHVzPTAsdGhpcy5yZXNwb25zZT17fSx0aGlzLmlzQWJvcnQ9ITEsdGhpcy5vcmlnaW5hbEVycm9yPW51bGwsT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsQ2xpZW50UmVzcG9uc2VFcnJvci5wcm90b3R5cGUpLG51bGwhPT1lJiZcIm9iamVjdFwiPT10eXBlb2YgZSYmKHRoaXMudXJsPVwic3RyaW5nXCI9PXR5cGVvZiBlLnVybD9lLnVybDpcIlwiLHRoaXMuc3RhdHVzPVwibnVtYmVyXCI9PXR5cGVvZiBlLnN0YXR1cz9lLnN0YXR1czowLHRoaXMuaXNBYm9ydD0hIWUuaXNBYm9ydCx0aGlzLm9yaWdpbmFsRXJyb3I9ZS5vcmlnaW5hbEVycm9yLG51bGwhPT1lLnJlc3BvbnNlJiZcIm9iamVjdFwiPT10eXBlb2YgZS5yZXNwb25zZT90aGlzLnJlc3BvbnNlPWUucmVzcG9uc2U6bnVsbCE9PWUuZGF0YSYmXCJvYmplY3RcIj09dHlwZW9mIGUuZGF0YT90aGlzLnJlc3BvbnNlPWUuZGF0YTp0aGlzLnJlc3BvbnNlPXt9KSx0aGlzLm9yaWdpbmFsRXJyb3J8fGUgaW5zdGFuY2VvZiBDbGllbnRSZXNwb25zZUVycm9yfHwodGhpcy5vcmlnaW5hbEVycm9yPWUpLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBET01FeGNlcHRpb24mJmUgaW5zdGFuY2VvZiBET01FeGNlcHRpb24mJih0aGlzLmlzQWJvcnQ9ITApLHRoaXMubmFtZT1cIkNsaWVudFJlc3BvbnNlRXJyb3IgXCIrdGhpcy5zdGF0dXMsdGhpcy5tZXNzYWdlPXRoaXMucmVzcG9uc2U/Lm1lc3NhZ2UsdGhpcy5tZXNzYWdlfHwodGhpcy5pc0Fib3J0P3RoaXMubWVzc2FnZT1cIlRoZSByZXF1ZXN0IHdhcyBhdXRvY2FuY2VsbGVkLiBZb3UgY2FuIGZpbmQgbW9yZSBpbmZvIGluIGh0dHBzOi8vZ2l0aHViLmNvbS9wb2NrZXRiYXNlL2pzLXNkayNhdXRvLWNhbmNlbGxhdGlvbi5cIjp0aGlzLm9yaWdpbmFsRXJyb3I/LmNhdXNlPy5tZXNzYWdlPy5pbmNsdWRlcyhcIkVDT05OUkVGVVNFRCA6OjFcIik/dGhpcy5tZXNzYWdlPVwiRmFpbGVkIHRvIGNvbm5lY3QgdG8gdGhlIFBvY2tldEJhc2Ugc2VydmVyLiBUcnkgY2hhbmdpbmcgdGhlIFNESyBVUkwgZnJvbSBsb2NhbGhvc3QgdG8gMTI3LjAuMC4xIChodHRwczovL2dpdGh1Yi5jb20vcG9ja2V0YmFzZS9qcy1zZGsvaXNzdWVzLzIxKS5cIjp0aGlzLm1lc3NhZ2U9XCJTb21ldGhpbmcgd2VudCB3cm9uZyB3aGlsZSBwcm9jZXNzaW5nIHlvdXIgcmVxdWVzdC5cIil9Z2V0IGRhdGEoKXtyZXR1cm4gdGhpcy5yZXNwb25zZX10b0pTT04oKXtyZXR1cm57Li4udGhpc319fWNvbnN0IGU9L15bXFx1MDAwOVxcdTAwMjAtXFx1MDA3ZVxcdTAwODAtXFx1MDBmZl0rJC87ZnVuY3Rpb24gY29va2llUGFyc2UoZSx0KXtjb25zdCBzPXt9O2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXJldHVybiBzO2NvbnN0IGk9T2JqZWN0LmFzc2lnbih7fSx0fHx7fSkuZGVjb2RlfHxkZWZhdWx0RGVjb2RlO2xldCBuPTA7Zm9yKDtuPGUubGVuZ3RoOyl7Y29uc3QgdD1lLmluZGV4T2YoXCI9XCIsbik7aWYoLTE9PT10KWJyZWFrO2xldCByPWUuaW5kZXhPZihcIjtcIixuKTtpZigtMT09PXIpcj1lLmxlbmd0aDtlbHNlIGlmKHI8dCl7bj1lLmxhc3RJbmRleE9mKFwiO1wiLHQtMSkrMTtjb250aW51ZX1jb25zdCBvPWUuc2xpY2Uobix0KS50cmltKCk7aWYodm9pZCAwPT09c1tvXSl7bGV0IG49ZS5zbGljZSh0KzEscikudHJpbSgpOzM0PT09bi5jaGFyQ29kZUF0KDApJiYobj1uLnNsaWNlKDEsLTEpKTt0cnl7c1tvXT1pKG4pfWNhdGNoKGUpe3Nbb109bn19bj1yKzF9cmV0dXJuIHN9ZnVuY3Rpb24gY29va2llU2VyaWFsaXplKHQscyxpKXtjb25zdCBuPU9iamVjdC5hc3NpZ24oe30saXx8e30pLHI9bi5lbmNvZGV8fGRlZmF1bHRFbmNvZGU7aWYoIWUudGVzdCh0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXJndW1lbnQgbmFtZSBpcyBpbnZhbGlkXCIpO2NvbnN0IG89cihzKTtpZihvJiYhZS50ZXN0KG8pKXRocm93IG5ldyBUeXBlRXJyb3IoXCJhcmd1bWVudCB2YWwgaXMgaW52YWxpZFwiKTtsZXQgYT10K1wiPVwiK287aWYobnVsbCE9bi5tYXhBZ2Upe2NvbnN0IGU9bi5tYXhBZ2UtMDtpZihpc05hTihlKXx8IWlzRmluaXRlKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJvcHRpb24gbWF4QWdlIGlzIGludmFsaWRcIik7YSs9XCI7IE1heC1BZ2U9XCIrTWF0aC5mbG9vcihlKX1pZihuLmRvbWFpbil7aWYoIWUudGVzdChuLmRvbWFpbikpdGhyb3cgbmV3IFR5cGVFcnJvcihcIm9wdGlvbiBkb21haW4gaXMgaW52YWxpZFwiKTthKz1cIjsgRG9tYWluPVwiK24uZG9tYWlufWlmKG4ucGF0aCl7aWYoIWUudGVzdChuLnBhdGgpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJvcHRpb24gcGF0aCBpcyBpbnZhbGlkXCIpO2ErPVwiOyBQYXRoPVwiK24ucGF0aH1pZihuLmV4cGlyZXMpe2lmKCFmdW5jdGlvbiBpc0RhdGUoZSl7cmV0dXJuXCJbb2JqZWN0IERhdGVdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl8fGUgaW5zdGFuY2VvZiBEYXRlfShuLmV4cGlyZXMpfHxpc05hTihuLmV4cGlyZXMudmFsdWVPZigpKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwib3B0aW9uIGV4cGlyZXMgaXMgaW52YWxpZFwiKTthKz1cIjsgRXhwaXJlcz1cIituLmV4cGlyZXMudG9VVENTdHJpbmcoKX1pZihuLmh0dHBPbmx5JiYoYSs9XCI7IEh0dHBPbmx5XCIpLG4uc2VjdXJlJiYoYSs9XCI7IFNlY3VyZVwiKSxuLnByaW9yaXR5KXtzd2l0Y2goXCJzdHJpbmdcIj09dHlwZW9mIG4ucHJpb3JpdHk/bi5wcmlvcml0eS50b0xvd2VyQ2FzZSgpOm4ucHJpb3JpdHkpe2Nhc2VcImxvd1wiOmErPVwiOyBQcmlvcml0eT1Mb3dcIjticmVhaztjYXNlXCJtZWRpdW1cIjphKz1cIjsgUHJpb3JpdHk9TWVkaXVtXCI7YnJlYWs7Y2FzZVwiaGlnaFwiOmErPVwiOyBQcmlvcml0eT1IaWdoXCI7YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgVHlwZUVycm9yKFwib3B0aW9uIHByaW9yaXR5IGlzIGludmFsaWRcIil9fWlmKG4uc2FtZVNpdGUpe3N3aXRjaChcInN0cmluZ1wiPT10eXBlb2Ygbi5zYW1lU2l0ZT9uLnNhbWVTaXRlLnRvTG93ZXJDYXNlKCk6bi5zYW1lU2l0ZSl7Y2FzZSEwOmErPVwiOyBTYW1lU2l0ZT1TdHJpY3RcIjticmVhaztjYXNlXCJsYXhcIjphKz1cIjsgU2FtZVNpdGU9TGF4XCI7YnJlYWs7Y2FzZVwic3RyaWN0XCI6YSs9XCI7IFNhbWVTaXRlPVN0cmljdFwiO2JyZWFrO2Nhc2VcIm5vbmVcIjphKz1cIjsgU2FtZVNpdGU9Tm9uZVwiO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IFR5cGVFcnJvcihcIm9wdGlvbiBzYW1lU2l0ZSBpcyBpbnZhbGlkXCIpfX1yZXR1cm4gYX1mdW5jdGlvbiBkZWZhdWx0RGVjb2RlKGUpe3JldHVybi0xIT09ZS5pbmRleE9mKFwiJVwiKT9kZWNvZGVVUklDb21wb25lbnQoZSk6ZX1mdW5jdGlvbiBkZWZhdWx0RW5jb2RlKGUpe3JldHVybiBlbmNvZGVVUklDb21wb25lbnQoZSl9bGV0IHQ7ZnVuY3Rpb24gZ2V0VG9rZW5QYXlsb2FkKGUpe2lmKGUpdHJ5e2NvbnN0IHM9ZGVjb2RlVVJJQ29tcG9uZW50KHQoZS5zcGxpdChcIi5cIilbMV0pLnNwbGl0KFwiXCIpLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJuXCIlXCIrKFwiMDBcIitlLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtMil9KSkuam9pbihcIlwiKSk7cmV0dXJuIEpTT04ucGFyc2Uocyl8fHt9fWNhdGNoKGUpe31yZXR1cm57fX1mdW5jdGlvbiBpc1Rva2VuRXhwaXJlZChlLHQ9MCl7bGV0IHM9Z2V0VG9rZW5QYXlsb2FkKGUpO3JldHVybiEoT2JqZWN0LmtleXMocykubGVuZ3RoPjAmJighcy5leHB8fHMuZXhwLXQ+RGF0ZS5ub3coKS8xZTMpKX10PVwiZnVuY3Rpb25cIj09dHlwZW9mIGF0b2I/YXRvYjplPT57bGV0IHQ9U3RyaW5nKGUpLnJlcGxhY2UoLz0rJC8sXCJcIik7aWYodC5sZW5ndGglND09MSl0aHJvdyBuZXcgRXJyb3IoXCInYXRvYicgZmFpbGVkOiBUaGUgc3RyaW5nIHRvIGJlIGRlY29kZWQgaXMgbm90IGNvcnJlY3RseSBlbmNvZGVkLlwiKTtmb3IodmFyIHMsaSxuPTAscj0wLG89XCJcIjtpPXQuY2hhckF0KHIrKyk7fmkmJihzPW4lND82NCpzK2k6aSxuKyslNCk/bys9U3RyaW5nLmZyb21DaGFyQ29kZSgyNTUmcz4+KC0yKm4mNikpOjApaT1cIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89XCIuaW5kZXhPZihpKTtyZXR1cm4gb307Y29uc3Qgcz1cInBiX2F1dGhcIjtjbGFzcyBCYXNlQXV0aFN0b3Jle2NvbnN0cnVjdG9yKCl7dGhpcy5iYXNlVG9rZW49XCJcIix0aGlzLmJhc2VNb2RlbD1udWxsLHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2tzPVtdfWdldCB0b2tlbigpe3JldHVybiB0aGlzLmJhc2VUb2tlbn1nZXQgbW9kZWwoKXtyZXR1cm4gdGhpcy5iYXNlTW9kZWx9Z2V0IGlzVmFsaWQoKXtyZXR1cm4haXNUb2tlbkV4cGlyZWQodGhpcy50b2tlbil9Z2V0IGlzQWRtaW4oKXtyZXR1cm5cImFkbWluXCI9PT1nZXRUb2tlblBheWxvYWQodGhpcy50b2tlbikudHlwZX1nZXQgaXNBdXRoUmVjb3JkKCl7cmV0dXJuXCJhdXRoUmVjb3JkXCI9PT1nZXRUb2tlblBheWxvYWQodGhpcy50b2tlbikudHlwZX1zYXZlKGUsdCl7dGhpcy5iYXNlVG9rZW49ZXx8XCJcIix0aGlzLmJhc2VNb2RlbD10fHxudWxsLHRoaXMudHJpZ2dlckNoYW5nZSgpfWNsZWFyKCl7dGhpcy5iYXNlVG9rZW49XCJcIix0aGlzLmJhc2VNb2RlbD1udWxsLHRoaXMudHJpZ2dlckNoYW5nZSgpfWxvYWRGcm9tQ29va2llKGUsdD1zKXtjb25zdCBpPWNvb2tpZVBhcnNlKGV8fFwiXCIpW3RdfHxcIlwiO2xldCBuPXt9O3RyeXtuPUpTT04ucGFyc2UoaSksKG51bGw9PT10eXBlb2Ygbnx8XCJvYmplY3RcIiE9dHlwZW9mIG58fEFycmF5LmlzQXJyYXkobikpJiYobj17fSl9Y2F0Y2goZSl7fXRoaXMuc2F2ZShuLnRva2VufHxcIlwiLG4ubW9kZWx8fG51bGwpfWV4cG9ydFRvQ29va2llKGUsdD1zKXtjb25zdCBpPXtzZWN1cmU6ITAsc2FtZVNpdGU6ITAsaHR0cE9ubHk6ITAscGF0aDpcIi9cIn0sbj1nZXRUb2tlblBheWxvYWQodGhpcy50b2tlbik7aS5leHBpcmVzPW4/LmV4cD9uZXcgRGF0ZSgxZTMqbi5leHApOm5ldyBEYXRlKFwiMTk3MC0wMS0wMVwiKSxlPU9iamVjdC5hc3NpZ24oe30saSxlKTtjb25zdCByPXt0b2tlbjp0aGlzLnRva2VuLG1vZGVsOnRoaXMubW9kZWw/SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLm1vZGVsKSk6bnVsbH07bGV0IG89Y29va2llU2VyaWFsaXplKHQsSlNPTi5zdHJpbmdpZnkociksZSk7Y29uc3QgYT1cInVuZGVmaW5lZFwiIT10eXBlb2YgQmxvYj9uZXcgQmxvYihbb10pLnNpemU6by5sZW5ndGg7aWYoci5tb2RlbCYmYT40MDk2KXtyLm1vZGVsPXtpZDpyPy5tb2RlbD8uaWQsZW1haWw6cj8ubW9kZWw/LmVtYWlsfTtjb25zdCBzPVtcImNvbGxlY3Rpb25JZFwiLFwidXNlcm5hbWVcIixcInZlcmlmaWVkXCJdO2Zvcihjb25zdCBlIGluIHRoaXMubW9kZWwpcy5pbmNsdWRlcyhlKSYmKHIubW9kZWxbZV09dGhpcy5tb2RlbFtlXSk7bz1jb29raWVTZXJpYWxpemUodCxKU09OLnN0cmluZ2lmeShyKSxlKX1yZXR1cm4gb31vbkNoYW5nZShlLHQ9ITEpe3JldHVybiB0aGlzLl9vbkNoYW5nZUNhbGxiYWNrcy5wdXNoKGUpLHQmJmUodGhpcy50b2tlbix0aGlzLm1vZGVsKSwoKT0+e2ZvcihsZXQgdD10aGlzLl9vbkNoYW5nZUNhbGxiYWNrcy5sZW5ndGgtMTt0Pj0wO3QtLSlpZih0aGlzLl9vbkNoYW5nZUNhbGxiYWNrc1t0XT09ZSlyZXR1cm4gZGVsZXRlIHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2tzW3RdLHZvaWQgdGhpcy5fb25DaGFuZ2VDYWxsYmFja3Muc3BsaWNlKHQsMSl9fXRyaWdnZXJDaGFuZ2UoKXtmb3IoY29uc3QgZSBvZiB0aGlzLl9vbkNoYW5nZUNhbGxiYWNrcyllJiZlKHRoaXMudG9rZW4sdGhpcy5tb2RlbCl9fWNsYXNzIExvY2FsQXV0aFN0b3JlIGV4dGVuZHMgQmFzZUF1dGhTdG9yZXtjb25zdHJ1Y3RvcihlPVwicG9ja2V0YmFzZV9hdXRoXCIpe3N1cGVyKCksdGhpcy5zdG9yYWdlRmFsbGJhY2s9e30sdGhpcy5zdG9yYWdlS2V5PWUsdGhpcy5fYmluZFN0b3JhZ2VFdmVudCgpfWdldCB0b2tlbigpe3JldHVybih0aGlzLl9zdG9yYWdlR2V0KHRoaXMuc3RvcmFnZUtleSl8fHt9KS50b2tlbnx8XCJcIn1nZXQgbW9kZWwoKXtyZXR1cm4odGhpcy5fc3RvcmFnZUdldCh0aGlzLnN0b3JhZ2VLZXkpfHx7fSkubW9kZWx8fG51bGx9c2F2ZShlLHQpe3RoaXMuX3N0b3JhZ2VTZXQodGhpcy5zdG9yYWdlS2V5LHt0b2tlbjplLG1vZGVsOnR9KSxzdXBlci5zYXZlKGUsdCl9Y2xlYXIoKXt0aGlzLl9zdG9yYWdlUmVtb3ZlKHRoaXMuc3RvcmFnZUtleSksc3VwZXIuY2xlYXIoKX1fc3RvcmFnZUdldChlKXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3c/LmxvY2FsU3RvcmFnZSl7Y29uc3QgdD13aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oZSl8fFwiXCI7dHJ5e3JldHVybiBKU09OLnBhcnNlKHQpfWNhdGNoKGUpe3JldHVybiB0fX1yZXR1cm4gdGhpcy5zdG9yYWdlRmFsbGJhY2tbZV19X3N0b3JhZ2VTZXQoZSx0KXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3c/LmxvY2FsU3RvcmFnZSl7bGV0IHM9dDtcInN0cmluZ1wiIT10eXBlb2YgdCYmKHM9SlNPTi5zdHJpbmdpZnkodCkpLHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShlLHMpfWVsc2UgdGhpcy5zdG9yYWdlRmFsbGJhY2tbZV09dH1fc3RvcmFnZVJlbW92ZShlKXtcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3c/LmxvY2FsU3RvcmFnZSYmd2luZG93LmxvY2FsU3RvcmFnZT8ucmVtb3ZlSXRlbShlKSxkZWxldGUgdGhpcy5zdG9yYWdlRmFsbGJhY2tbZV19X2JpbmRTdG9yYWdlRXZlbnQoKXtcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3c/LmxvY2FsU3RvcmFnZSYmd2luZG93LmFkZEV2ZW50TGlzdGVuZXImJndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic3RvcmFnZVwiLChlPT57aWYoZS5rZXkhPXRoaXMuc3RvcmFnZUtleSlyZXR1cm47Y29uc3QgdD10aGlzLl9zdG9yYWdlR2V0KHRoaXMuc3RvcmFnZUtleSl8fHt9O3N1cGVyLnNhdmUodC50b2tlbnx8XCJcIix0Lm1vZGVsfHxudWxsKX0pKX19Y2xhc3MgQmFzZVNlcnZpY2V7Y29uc3RydWN0b3IoZSl7dGhpcy5jbGllbnQ9ZX19Y2xhc3MgU2V0dGluZ3NTZXJ2aWNlIGV4dGVuZHMgQmFzZVNlcnZpY2V7YXN5bmMgZ2V0QWxsKGUpe3JldHVybiBlPU9iamVjdC5hc3NpZ24oe21ldGhvZDpcIkdFVFwifSxlKSx0aGlzLmNsaWVudC5zZW5kKFwiL2FwaS9zZXR0aW5nc1wiLGUpfWFzeW5jIHVwZGF0ZShlLHQpe3JldHVybiB0PU9iamVjdC5hc3NpZ24oe21ldGhvZDpcIlBBVENIXCIsYm9keTplfSx0KSx0aGlzLmNsaWVudC5zZW5kKFwiL2FwaS9zZXR0aW5nc1wiLHQpfWFzeW5jIHRlc3RTMyhlPVwic3RvcmFnZVwiLHQpe3JldHVybiB0PU9iamVjdC5hc3NpZ24oe21ldGhvZDpcIlBPU1RcIixib2R5OntmaWxlc3lzdGVtOmV9fSx0KSx0aGlzLmNsaWVudC5zZW5kKFwiL2FwaS9zZXR0aW5ncy90ZXN0L3MzXCIsdCkudGhlbigoKCk9PiEwKSl9YXN5bmMgdGVzdEVtYWlsKGUsdCxzKXtyZXR1cm4gcz1PYmplY3QuYXNzaWduKHttZXRob2Q6XCJQT1NUXCIsYm9keTp7ZW1haWw6ZSx0ZW1wbGF0ZTp0fX0scyksdGhpcy5jbGllbnQuc2VuZChcIi9hcGkvc2V0dGluZ3MvdGVzdC9lbWFpbFwiLHMpLnRoZW4oKCgpPT4hMCkpfWFzeW5jIGdlbmVyYXRlQXBwbGVDbGllbnRTZWNyZXQoZSx0LHMsaSxuLHIpe3JldHVybiByPU9iamVjdC5hc3NpZ24oe21ldGhvZDpcIlBPU1RcIixib2R5OntjbGllbnRJZDplLHRlYW1JZDp0LGtleUlkOnMscHJpdmF0ZUtleTppLGR1cmF0aW9uOm59fSxyKSx0aGlzLmNsaWVudC5zZW5kKFwiL2FwaS9zZXR0aW5ncy9hcHBsZS9nZW5lcmF0ZS1jbGllbnQtc2VjcmV0XCIscil9fWNsYXNzIENydWRTZXJ2aWNlIGV4dGVuZHMgQmFzZVNlcnZpY2V7ZGVjb2RlKGUpe3JldHVybiBlfWFzeW5jIGdldEZ1bGxMaXN0KGUsdCl7aWYoXCJudW1iZXJcIj09dHlwZW9mIGUpcmV0dXJuIHRoaXMuX2dldEZ1bGxMaXN0KGUsdCk7bGV0IHM9NTAwO3JldHVybih0PU9iamVjdC5hc3NpZ24oe30sZSx0KSkuYmF0Y2gmJihzPXQuYmF0Y2gsZGVsZXRlIHQuYmF0Y2gpLHRoaXMuX2dldEZ1bGxMaXN0KHMsdCl9YXN5bmMgZ2V0TGlzdChlPTEsdD0zMCxzKXtyZXR1cm4ocz1PYmplY3QuYXNzaWduKHttZXRob2Q6XCJHRVRcIn0scykpLnF1ZXJ5PU9iamVjdC5hc3NpZ24oe3BhZ2U6ZSxwZXJQYWdlOnR9LHMucXVlcnkpLHRoaXMuY2xpZW50LnNlbmQodGhpcy5iYXNlQ3J1ZFBhdGgscykudGhlbigoZT0+KGUuaXRlbXM9ZS5pdGVtcz8ubWFwKChlPT50aGlzLmRlY29kZShlKSkpfHxbXSxlKSkpfWFzeW5jIGdldEZpcnN0TGlzdEl0ZW0oZSx0KXtyZXR1cm4odD1PYmplY3QuYXNzaWduKHtyZXF1ZXN0S2V5Olwib25lX2J5X2ZpbHRlcl9cIit0aGlzLmJhc2VDcnVkUGF0aCtcIl9cIitlfSx0KSkucXVlcnk9T2JqZWN0LmFzc2lnbih7ZmlsdGVyOmUsc2tpcFRvdGFsOjF9LHQucXVlcnkpLHRoaXMuZ2V0TGlzdCgxLDEsdCkudGhlbigoZT0+e2lmKCFlPy5pdGVtcz8ubGVuZ3RoKXRocm93IG5ldyBDbGllbnRSZXNwb25zZUVycm9yKHtzdGF0dXM6NDA0LHJlc3BvbnNlOntjb2RlOjQwNCxtZXNzYWdlOlwiVGhlIHJlcXVlc3RlZCByZXNvdXJjZSB3YXNuJ3QgZm91bmQuXCIsZGF0YTp7fX19KTtyZXR1cm4gZS5pdGVtc1swXX0pKX1hc3luYyBnZXRPbmUoZSx0KXtpZighZSl0aHJvdyBuZXcgQ2xpZW50UmVzcG9uc2VFcnJvcih7dXJsOnRoaXMuY2xpZW50LmJ1aWxkVXJsKHRoaXMuYmFzZUNydWRQYXRoK1wiL1wiKSxzdGF0dXM6NDA0LHJlc3BvbnNlOntjb2RlOjQwNCxtZXNzYWdlOlwiTWlzc2luZyByZXF1aXJlZCByZWNvcmQgaWQuXCIsZGF0YTp7fX19KTtyZXR1cm4gdD1PYmplY3QuYXNzaWduKHttZXRob2Q6XCJHRVRcIn0sdCksdGhpcy5jbGllbnQuc2VuZCh0aGlzLmJhc2VDcnVkUGF0aCtcIi9cIitlbmNvZGVVUklDb21wb25lbnQoZSksdCkudGhlbigoZT0+dGhpcy5kZWNvZGUoZSkpKX1hc3luYyBjcmVhdGUoZSx0KXtyZXR1cm4gdD1PYmplY3QuYXNzaWduKHttZXRob2Q6XCJQT1NUXCIsYm9keTplfSx0KSx0aGlzLmNsaWVudC5zZW5kKHRoaXMuYmFzZUNydWRQYXRoLHQpLnRoZW4oKGU9PnRoaXMuZGVjb2RlKGUpKSl9YXN5bmMgdXBkYXRlKGUsdCxzKXtyZXR1cm4gcz1PYmplY3QuYXNzaWduKHttZXRob2Q6XCJQQVRDSFwiLGJvZHk6dH0scyksdGhpcy5jbGllbnQuc2VuZCh0aGlzLmJhc2VDcnVkUGF0aCtcIi9cIitlbmNvZGVVUklDb21wb25lbnQoZSkscykudGhlbigoZT0+dGhpcy5kZWNvZGUoZSkpKX1hc3luYyBkZWxldGUoZSx0KXtyZXR1cm4gdD1PYmplY3QuYXNzaWduKHttZXRob2Q6XCJERUxFVEVcIn0sdCksdGhpcy5jbGllbnQuc2VuZCh0aGlzLmJhc2VDcnVkUGF0aCtcIi9cIitlbmNvZGVVUklDb21wb25lbnQoZSksdCkudGhlbigoKCk9PiEwKSl9X2dldEZ1bGxMaXN0KGU9NTAwLHQpeyh0PXR8fHt9KS5xdWVyeT1PYmplY3QuYXNzaWduKHtza2lwVG90YWw6MX0sdC5xdWVyeSk7bGV0IHM9W10scmVxdWVzdD1hc3luYyBpPT50aGlzLmdldExpc3QoaSxlfHw1MDAsdCkudGhlbigoZT0+e2NvbnN0IHQ9ZS5pdGVtcztyZXR1cm4gcz1zLmNvbmNhdCh0KSx0Lmxlbmd0aD09ZS5wZXJQYWdlP3JlcXVlc3QoaSsxKTpzfSkpO3JldHVybiByZXF1ZXN0KDEpfX1mdW5jdGlvbiBub3JtYWxpemVMZWdhY3lPcHRpb25zQXJncyhlLHQscyxpKXtjb25zdCBuPXZvaWQgMCE9PWk7cmV0dXJuIG58fHZvaWQgMCE9PXM/bj8oY29uc29sZS53YXJuKGUpLHQuYm9keT1PYmplY3QuYXNzaWduKHt9LHQuYm9keSxzKSx0LnF1ZXJ5PU9iamVjdC5hc3NpZ24oe30sdC5xdWVyeSxpKSx0KTpPYmplY3QuYXNzaWduKHQscyk6dH1mdW5jdGlvbiByZXNldEF1dG9SZWZyZXNoKGUpe2UuX3Jlc2V0QXV0b1JlZnJlc2g/LigpfWNsYXNzIEFkbWluU2VydmljZSBleHRlbmRzIENydWRTZXJ2aWNle2dldCBiYXNlQ3J1ZFBhdGgoKXtyZXR1cm5cIi9hcGkvYWRtaW5zXCJ9YXN5bmMgdXBkYXRlKGUsdCxzKXtyZXR1cm4gc3VwZXIudXBkYXRlKGUsdCxzKS50aGVuKChlPT4odGhpcy5jbGllbnQuYXV0aFN0b3JlLm1vZGVsPy5pZD09PWUuaWQmJnZvaWQgMD09PXRoaXMuY2xpZW50LmF1dGhTdG9yZS5tb2RlbD8uY29sbGVjdGlvbklkJiZ0aGlzLmNsaWVudC5hdXRoU3RvcmUuc2F2ZSh0aGlzLmNsaWVudC5hdXRoU3RvcmUudG9rZW4sZSksZSkpKX1hc3luYyBkZWxldGUoZSx0KXtyZXR1cm4gc3VwZXIuZGVsZXRlKGUsdCkudGhlbigodD0+KHQmJnRoaXMuY2xpZW50LmF1dGhTdG9yZS5tb2RlbD8uaWQ9PT1lJiZ2b2lkIDA9PT10aGlzLmNsaWVudC5hdXRoU3RvcmUubW9kZWw/LmNvbGxlY3Rpb25JZCYmdGhpcy5jbGllbnQuYXV0aFN0b3JlLmNsZWFyKCksdCkpKX1hdXRoUmVzcG9uc2UoZSl7Y29uc3QgdD10aGlzLmRlY29kZShlPy5hZG1pbnx8e30pO3JldHVybiBlPy50b2tlbiYmZT8uYWRtaW4mJnRoaXMuY2xpZW50LmF1dGhTdG9yZS5zYXZlKGUudG9rZW4sdCksT2JqZWN0LmFzc2lnbih7fSxlLHt0b2tlbjplPy50b2tlbnx8XCJcIixhZG1pbjp0fSl9YXN5bmMgYXV0aFdpdGhQYXNzd29yZChlLHQscyxpKXtsZXQgbj17bWV0aG9kOlwiUE9TVFwiLGJvZHk6e2lkZW50aXR5OmUscGFzc3dvcmQ6dH19O249bm9ybWFsaXplTGVnYWN5T3B0aW9uc0FyZ3MoXCJUaGlzIGZvcm0gb2YgYXV0aFdpdGhQYXNzd29yZChlbWFpbCwgcGFzcywgYm9keT8sIHF1ZXJ5PykgaXMgZGVwcmVjYXRlZC4gQ29uc2lkZXIgcmVwbGFjaW5nIGl0IHdpdGggYXV0aFdpdGhQYXNzd29yZChlbWFpbCwgcGFzcywgb3B0aW9ucz8pLlwiLG4scyxpKTtjb25zdCByPW4uYXV0b1JlZnJlc2hUaHJlc2hvbGQ7ZGVsZXRlIG4uYXV0b1JlZnJlc2hUaHJlc2hvbGQsbi5hdXRvUmVmcmVzaHx8cmVzZXRBdXRvUmVmcmVzaCh0aGlzLmNsaWVudCk7bGV0IG89YXdhaXQgdGhpcy5jbGllbnQuc2VuZCh0aGlzLmJhc2VDcnVkUGF0aCtcIi9hdXRoLXdpdGgtcGFzc3dvcmRcIixuKTtyZXR1cm4gbz10aGlzLmF1dGhSZXNwb25zZShvKSxyJiZmdW5jdGlvbiByZWdpc3RlckF1dG9SZWZyZXNoKGUsdCxzLGkpe3Jlc2V0QXV0b1JlZnJlc2goZSk7Y29uc3Qgbj1lLmJlZm9yZVNlbmQscj1lLmF1dGhTdG9yZS5tb2RlbCxvPWUuYXV0aFN0b3JlLm9uQ2hhbmdlKCgodCxzKT0+eyghdHx8cz8uaWQhPXI/LmlkfHwocz8uY29sbGVjdGlvbklkfHxyPy5jb2xsZWN0aW9uSWQpJiZzPy5jb2xsZWN0aW9uSWQhPXI/LmNvbGxlY3Rpb25JZCkmJnJlc2V0QXV0b1JlZnJlc2goZSl9KSk7ZS5fcmVzZXRBdXRvUmVmcmVzaD1mdW5jdGlvbigpe28oKSxlLmJlZm9yZVNlbmQ9bixkZWxldGUgZS5fcmVzZXRBdXRvUmVmcmVzaH0sZS5iZWZvcmVTZW5kPWFzeW5jKHIsbyk9Pntjb25zdCBhPWUuYXV0aFN0b3JlLnRva2VuO2lmKG8ucXVlcnk/LmF1dG9SZWZyZXNoKXJldHVybiBuP24ocixvKTp7dXJsOnIsc2VuZE9wdGlvbnM6b307bGV0IGM9ZS5hdXRoU3RvcmUuaXNWYWxpZDtpZihjJiZpc1Rva2VuRXhwaXJlZChlLmF1dGhTdG9yZS50b2tlbix0KSl0cnl7YXdhaXQgcygpfWNhdGNoKGUpe2M9ITF9Y3x8YXdhaXQgaSgpO2NvbnN0IGw9by5oZWFkZXJzfHx7fTtmb3IobGV0IHQgaW4gbClpZihcImF1dGhvcml6YXRpb25cIj09dC50b0xvd2VyQ2FzZSgpJiZhPT1sW3RdJiZlLmF1dGhTdG9yZS50b2tlbil7bFt0XT1lLmF1dGhTdG9yZS50b2tlbjticmVha31yZXR1cm4gby5oZWFkZXJzPWwsbj9uKHIsbyk6e3VybDpyLHNlbmRPcHRpb25zOm99fX0odGhpcy5jbGllbnQsciwoKCk9PnRoaXMuYXV0aFJlZnJlc2goe2F1dG9SZWZyZXNoOiEwfSkpLCgoKT0+dGhpcy5hdXRoV2l0aFBhc3N3b3JkKGUsdCxPYmplY3QuYXNzaWduKHthdXRvUmVmcmVzaDohMH0sbikpKSksb31hc3luYyBhdXRoUmVmcmVzaChlLHQpe2xldCBzPXttZXRob2Q6XCJQT1NUXCJ9O3JldHVybiBzPW5vcm1hbGl6ZUxlZ2FjeU9wdGlvbnNBcmdzKFwiVGhpcyBmb3JtIG9mIGF1dGhSZWZyZXNoKGJvZHk/LCBxdWVyeT8pIGlzIGRlcHJlY2F0ZWQuIENvbnNpZGVyIHJlcGxhY2luZyBpdCB3aXRoIGF1dGhSZWZyZXNoKG9wdGlvbnM/KS5cIixzLGUsdCksdGhpcy5jbGllbnQuc2VuZCh0aGlzLmJhc2VDcnVkUGF0aCtcIi9hdXRoLXJlZnJlc2hcIixzKS50aGVuKHRoaXMuYXV0aFJlc3BvbnNlLmJpbmQodGhpcykpfWFzeW5jIHJlcXVlc3RQYXNzd29yZFJlc2V0KGUsdCxzKXtsZXQgaT17bWV0aG9kOlwiUE9TVFwiLGJvZHk6e2VtYWlsOmV9fTtyZXR1cm4gaT1ub3JtYWxpemVMZWdhY3lPcHRpb25zQXJncyhcIlRoaXMgZm9ybSBvZiByZXF1ZXN0UGFzc3dvcmRSZXNldChlbWFpbCwgYm9keT8sIHF1ZXJ5PykgaXMgZGVwcmVjYXRlZC4gQ29uc2lkZXIgcmVwbGFjaW5nIGl0IHdpdGggcmVxdWVzdFBhc3N3b3JkUmVzZXQoZW1haWwsIG9wdGlvbnM/KS5cIixpLHQscyksdGhpcy5jbGllbnQuc2VuZCh0aGlzLmJhc2VDcnVkUGF0aCtcIi9yZXF1ZXN0LXBhc3N3b3JkLXJlc2V0XCIsaSkudGhlbigoKCk9PiEwKSl9YXN5bmMgY29uZmlybVBhc3N3b3JkUmVzZXQoZSx0LHMsaSxuKXtsZXQgcj17bWV0aG9kOlwiUE9TVFwiLGJvZHk6e3Rva2VuOmUscGFzc3dvcmQ6dCxwYXNzd29yZENvbmZpcm06c319O3JldHVybiByPW5vcm1hbGl6ZUxlZ2FjeU9wdGlvbnNBcmdzKFwiVGhpcyBmb3JtIG9mIGNvbmZpcm1QYXNzd29yZFJlc2V0KHJlc2V0VG9rZW4sIHBhc3N3b3JkLCBwYXNzd29yZENvbmZpcm0sIGJvZHk/LCBxdWVyeT8pIGlzIGRlcHJlY2F0ZWQuIENvbnNpZGVyIHJlcGxhY2luZyBpdCB3aXRoIGNvbmZpcm1QYXNzd29yZFJlc2V0KHJlc2V0VG9rZW4sIHBhc3N3b3JkLCBwYXNzd29yZENvbmZpcm0sIG9wdGlvbnM/KS5cIixyLGksbiksdGhpcy5jbGllbnQuc2VuZCh0aGlzLmJhc2VDcnVkUGF0aCtcIi9jb25maXJtLXBhc3N3b3JkLXJlc2V0XCIscikudGhlbigoKCk9PiEwKSl9fWNvbnN0IGk9W1wicmVxdWVzdEtleVwiLFwiJGNhbmNlbEtleVwiLFwiJGF1dG9DYW5jZWxcIixcImZldGNoXCIsXCJoZWFkZXJzXCIsXCJib2R5XCIsXCJxdWVyeVwiLFwicGFyYW1zXCIsXCJjYWNoZVwiLFwiY3JlZGVudGlhbHNcIixcImhlYWRlcnNcIixcImludGVncml0eVwiLFwia2VlcGFsaXZlXCIsXCJtZXRob2RcIixcIm1vZGVcIixcInJlZGlyZWN0XCIsXCJyZWZlcnJlclwiLFwicmVmZXJyZXJQb2xpY3lcIixcInNpZ25hbFwiLFwid2luZG93XCJdO2Z1bmN0aW9uIG5vcm1hbGl6ZVVua25vd25RdWVyeVBhcmFtcyhlKXtpZihlKXtlLnF1ZXJ5PWUucXVlcnl8fHt9O2ZvcihsZXQgdCBpbiBlKWkuaW5jbHVkZXModCl8fChlLnF1ZXJ5W3RdPWVbdF0sZGVsZXRlIGVbdF0pfX1jbGFzcyBSZWFsdGltZVNlcnZpY2UgZXh0ZW5kcyBCYXNlU2VydmljZXtjb25zdHJ1Y3Rvcigpe3N1cGVyKC4uLmFyZ3VtZW50cyksdGhpcy5jbGllbnRJZD1cIlwiLHRoaXMuZXZlbnRTb3VyY2U9bnVsbCx0aGlzLnN1YnNjcmlwdGlvbnM9e30sdGhpcy5sYXN0U2VudFN1YnNjcmlwdGlvbnM9W10sdGhpcy5tYXhDb25uZWN0VGltZW91dD0xNWUzLHRoaXMucmVjb25uZWN0QXR0ZW1wdHM9MCx0aGlzLm1heFJlY29ubmVjdEF0dGVtcHRzPTEvMCx0aGlzLnByZWRlZmluZWRSZWNvbm5lY3RJbnRlcnZhbHM9WzIwMCwzMDAsNTAwLDFlMywxMjAwLDE1MDAsMmUzXSx0aGlzLnBlbmRpbmdDb25uZWN0cz1bXX1nZXQgaXNDb25uZWN0ZWQoKXtyZXR1cm4hIXRoaXMuZXZlbnRTb3VyY2UmJiEhdGhpcy5jbGllbnRJZCYmIXRoaXMucGVuZGluZ0Nvbm5lY3RzLmxlbmd0aH1hc3luYyBzdWJzY3JpYmUoZSx0LHMpe2lmKCFlKXRocm93IG5ldyBFcnJvcihcInRvcGljIG11c3QgYmUgc2V0LlwiKTtsZXQgaT1lO2lmKHMpe25vcm1hbGl6ZVVua25vd25RdWVyeVBhcmFtcyhzKTtjb25zdCBlPVwib3B0aW9ucz1cIitlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoe3F1ZXJ5OnMucXVlcnksaGVhZGVyczpzLmhlYWRlcnN9KSk7aSs9KGkuaW5jbHVkZXMoXCI/XCIpP1wiJlwiOlwiP1wiKStlfWNvbnN0IGxpc3RlbmVyPWZ1bmN0aW9uKGUpe2NvbnN0IHM9ZTtsZXQgaTt0cnl7aT1KU09OLnBhcnNlKHM/LmRhdGEpfWNhdGNoe310KGl8fHt9KX07cmV0dXJuIHRoaXMuc3Vic2NyaXB0aW9uc1tpXXx8KHRoaXMuc3Vic2NyaXB0aW9uc1tpXT1bXSksdGhpcy5zdWJzY3JpcHRpb25zW2ldLnB1c2gobGlzdGVuZXIpLHRoaXMuaXNDb25uZWN0ZWQ/MT09PXRoaXMuc3Vic2NyaXB0aW9uc1tpXS5sZW5ndGg/YXdhaXQgdGhpcy5zdWJtaXRTdWJzY3JpcHRpb25zKCk6dGhpcy5ldmVudFNvdXJjZT8uYWRkRXZlbnRMaXN0ZW5lcihpLGxpc3RlbmVyKTphd2FpdCB0aGlzLmNvbm5lY3QoKSxhc3luYygpPT50aGlzLnVuc3Vic2NyaWJlQnlUb3BpY0FuZExpc3RlbmVyKGUsbGlzdGVuZXIpfWFzeW5jIHVuc3Vic2NyaWJlKGUpe2xldCB0PSExO2lmKGUpe2NvbnN0IHM9dGhpcy5nZXRTdWJzY3JpcHRpb25zQnlUb3BpYyhlKTtmb3IobGV0IGUgaW4gcylpZih0aGlzLmhhc1N1YnNjcmlwdGlvbkxpc3RlbmVycyhlKSl7Zm9yKGxldCB0IG9mIHRoaXMuc3Vic2NyaXB0aW9uc1tlXSl0aGlzLmV2ZW50U291cmNlPy5yZW1vdmVFdmVudExpc3RlbmVyKGUsdCk7ZGVsZXRlIHRoaXMuc3Vic2NyaXB0aW9uc1tlXSx0fHwodD0hMCl9fWVsc2UgdGhpcy5zdWJzY3JpcHRpb25zPXt9O3RoaXMuaGFzU3Vic2NyaXB0aW9uTGlzdGVuZXJzKCk/dCYmYXdhaXQgdGhpcy5zdWJtaXRTdWJzY3JpcHRpb25zKCk6dGhpcy5kaXNjb25uZWN0KCl9YXN5bmMgdW5zdWJzY3JpYmVCeVByZWZpeChlKXtsZXQgdD0hMTtmb3IobGV0IHMgaW4gdGhpcy5zdWJzY3JpcHRpb25zKWlmKChzK1wiP1wiKS5zdGFydHNXaXRoKGUpKXt0PSEwO2ZvcihsZXQgZSBvZiB0aGlzLnN1YnNjcmlwdGlvbnNbc10pdGhpcy5ldmVudFNvdXJjZT8ucmVtb3ZlRXZlbnRMaXN0ZW5lcihzLGUpO2RlbGV0ZSB0aGlzLnN1YnNjcmlwdGlvbnNbc119dCYmKHRoaXMuaGFzU3Vic2NyaXB0aW9uTGlzdGVuZXJzKCk/YXdhaXQgdGhpcy5zdWJtaXRTdWJzY3JpcHRpb25zKCk6dGhpcy5kaXNjb25uZWN0KCkpfWFzeW5jIHVuc3Vic2NyaWJlQnlUb3BpY0FuZExpc3RlbmVyKGUsdCl7bGV0IHM9ITE7Y29uc3QgaT10aGlzLmdldFN1YnNjcmlwdGlvbnNCeVRvcGljKGUpO2ZvcihsZXQgZSBpbiBpKXtpZighQXJyYXkuaXNBcnJheSh0aGlzLnN1YnNjcmlwdGlvbnNbZV0pfHwhdGhpcy5zdWJzY3JpcHRpb25zW2VdLmxlbmd0aCljb250aW51ZTtsZXQgaT0hMTtmb3IobGV0IHM9dGhpcy5zdWJzY3JpcHRpb25zW2VdLmxlbmd0aC0xO3M+PTA7cy0tKXRoaXMuc3Vic2NyaXB0aW9uc1tlXVtzXT09PXQmJihpPSEwLGRlbGV0ZSB0aGlzLnN1YnNjcmlwdGlvbnNbZV1bc10sdGhpcy5zdWJzY3JpcHRpb25zW2VdLnNwbGljZShzLDEpLHRoaXMuZXZlbnRTb3VyY2U/LnJlbW92ZUV2ZW50TGlzdGVuZXIoZSx0KSk7aSYmKHRoaXMuc3Vic2NyaXB0aW9uc1tlXS5sZW5ndGh8fGRlbGV0ZSB0aGlzLnN1YnNjcmlwdGlvbnNbZV0sc3x8dGhpcy5oYXNTdWJzY3JpcHRpb25MaXN0ZW5lcnMoZSl8fChzPSEwKSl9dGhpcy5oYXNTdWJzY3JpcHRpb25MaXN0ZW5lcnMoKT9zJiZhd2FpdCB0aGlzLnN1Ym1pdFN1YnNjcmlwdGlvbnMoKTp0aGlzLmRpc2Nvbm5lY3QoKX1oYXNTdWJzY3JpcHRpb25MaXN0ZW5lcnMoZSl7aWYodGhpcy5zdWJzY3JpcHRpb25zPXRoaXMuc3Vic2NyaXB0aW9uc3x8e30sZSlyZXR1cm4hIXRoaXMuc3Vic2NyaXB0aW9uc1tlXT8ubGVuZ3RoO2ZvcihsZXQgZSBpbiB0aGlzLnN1YnNjcmlwdGlvbnMpaWYodGhpcy5zdWJzY3JpcHRpb25zW2VdPy5sZW5ndGgpcmV0dXJuITA7cmV0dXJuITF9YXN5bmMgc3VibWl0U3Vic2NyaXB0aW9ucygpe2lmKHRoaXMuY2xpZW50SWQpcmV0dXJuIHRoaXMuYWRkQWxsU3Vic2NyaXB0aW9uTGlzdGVuZXJzKCksdGhpcy5sYXN0U2VudFN1YnNjcmlwdGlvbnM9dGhpcy5nZXROb25FbXB0eVN1YnNjcmlwdGlvbktleXMoKSx0aGlzLmNsaWVudC5zZW5kKFwiL2FwaS9yZWFsdGltZVwiLHttZXRob2Q6XCJQT1NUXCIsYm9keTp7Y2xpZW50SWQ6dGhpcy5jbGllbnRJZCxzdWJzY3JpcHRpb25zOnRoaXMubGFzdFNlbnRTdWJzY3JpcHRpb25zfSxyZXF1ZXN0S2V5OnRoaXMuZ2V0U3Vic2NyaXB0aW9uc0NhbmNlbEtleSgpfSkuY2F0Y2goKGU9PntpZighZT8uaXNBYm9ydCl0aHJvdyBlfSkpfWdldFN1YnNjcmlwdGlvbnNDYW5jZWxLZXkoKXtyZXR1cm5cInJlYWx0aW1lX1wiK3RoaXMuY2xpZW50SWR9Z2V0U3Vic2NyaXB0aW9uc0J5VG9waWMoZSl7Y29uc3QgdD17fTtlPWUuaW5jbHVkZXMoXCI/XCIpP2U6ZStcIj9cIjtmb3IobGV0IHMgaW4gdGhpcy5zdWJzY3JpcHRpb25zKShzK1wiP1wiKS5zdGFydHNXaXRoKGUpJiYodFtzXT10aGlzLnN1YnNjcmlwdGlvbnNbc10pO3JldHVybiB0fWdldE5vbkVtcHR5U3Vic2NyaXB0aW9uS2V5cygpe2NvbnN0IGU9W107Zm9yKGxldCB0IGluIHRoaXMuc3Vic2NyaXB0aW9ucyl0aGlzLnN1YnNjcmlwdGlvbnNbdF0ubGVuZ3RoJiZlLnB1c2godCk7cmV0dXJuIGV9YWRkQWxsU3Vic2NyaXB0aW9uTGlzdGVuZXJzKCl7aWYodGhpcy5ldmVudFNvdXJjZSl7dGhpcy5yZW1vdmVBbGxTdWJzY3JpcHRpb25MaXN0ZW5lcnMoKTtmb3IobGV0IGUgaW4gdGhpcy5zdWJzY3JpcHRpb25zKWZvcihsZXQgdCBvZiB0aGlzLnN1YnNjcmlwdGlvbnNbZV0pdGhpcy5ldmVudFNvdXJjZS5hZGRFdmVudExpc3RlbmVyKGUsdCl9fXJlbW92ZUFsbFN1YnNjcmlwdGlvbkxpc3RlbmVycygpe2lmKHRoaXMuZXZlbnRTb3VyY2UpZm9yKGxldCBlIGluIHRoaXMuc3Vic2NyaXB0aW9ucylmb3IobGV0IHQgb2YgdGhpcy5zdWJzY3JpcHRpb25zW2VdKXRoaXMuZXZlbnRTb3VyY2UucmVtb3ZlRXZlbnRMaXN0ZW5lcihlLHQpfWFzeW5jIGNvbm5lY3QoKXtpZighKHRoaXMucmVjb25uZWN0QXR0ZW1wdHM+MCkpcmV0dXJuIG5ldyBQcm9taXNlKCgoZSx0KT0+e3RoaXMucGVuZGluZ0Nvbm5lY3RzLnB1c2goe3Jlc29sdmU6ZSxyZWplY3Q6dH0pLHRoaXMucGVuZGluZ0Nvbm5lY3RzLmxlbmd0aD4xfHx0aGlzLmluaXRDb25uZWN0KCl9KSl9aW5pdENvbm5lY3QoKXt0aGlzLmRpc2Nvbm5lY3QoITApLGNsZWFyVGltZW91dCh0aGlzLmNvbm5lY3RUaW1lb3V0SWQpLHRoaXMuY29ubmVjdFRpbWVvdXRJZD1zZXRUaW1lb3V0KCgoKT0+e3RoaXMuY29ubmVjdEVycm9ySGFuZGxlcihuZXcgRXJyb3IoXCJFdmVudFNvdXJjZSBjb25uZWN0IHRvb2sgdG9vIGxvbmcuXCIpKX0pLHRoaXMubWF4Q29ubmVjdFRpbWVvdXQpLHRoaXMuZXZlbnRTb3VyY2U9bmV3IEV2ZW50U291cmNlKHRoaXMuY2xpZW50LmJ1aWxkVXJsKFwiL2FwaS9yZWFsdGltZVwiKSksdGhpcy5ldmVudFNvdXJjZS5vbmVycm9yPWU9Pnt0aGlzLmNvbm5lY3RFcnJvckhhbmRsZXIobmV3IEVycm9yKFwiRmFpbGVkIHRvIGVzdGFibGlzaCByZWFsdGltZSBjb25uZWN0aW9uLlwiKSl9LHRoaXMuZXZlbnRTb3VyY2UuYWRkRXZlbnRMaXN0ZW5lcihcIlBCX0NPTk5FQ1RcIiwoZT0+e2NvbnN0IHQ9ZTt0aGlzLmNsaWVudElkPXQ/Lmxhc3RFdmVudElkLHRoaXMuc3VibWl0U3Vic2NyaXB0aW9ucygpLnRoZW4oKGFzeW5jKCk9PntsZXQgZT0zO2Zvcig7dGhpcy5oYXNVbnNlbnRTdWJzY3JpcHRpb25zKCkmJmU+MDspZS0tLGF3YWl0IHRoaXMuc3VibWl0U3Vic2NyaXB0aW9ucygpfSkpLnRoZW4oKCgpPT57Zm9yKGxldCBlIG9mIHRoaXMucGVuZGluZ0Nvbm5lY3RzKWUucmVzb2x2ZSgpO3RoaXMucGVuZGluZ0Nvbm5lY3RzPVtdLHRoaXMucmVjb25uZWN0QXR0ZW1wdHM9MCxjbGVhclRpbWVvdXQodGhpcy5yZWNvbm5lY3RUaW1lb3V0SWQpLGNsZWFyVGltZW91dCh0aGlzLmNvbm5lY3RUaW1lb3V0SWQpO2NvbnN0IHQ9dGhpcy5nZXRTdWJzY3JpcHRpb25zQnlUb3BpYyhcIlBCX0NPTk5FQ1RcIik7Zm9yKGxldCBzIGluIHQpZm9yKGxldCBpIG9mIHRbc10paShlKX0pKS5jYXRjaCgoZT0+e3RoaXMuY2xpZW50SWQ9XCJcIix0aGlzLmNvbm5lY3RFcnJvckhhbmRsZXIoZSl9KSl9KSl9aGFzVW5zZW50U3Vic2NyaXB0aW9ucygpe2NvbnN0IGU9dGhpcy5nZXROb25FbXB0eVN1YnNjcmlwdGlvbktleXMoKTtpZihlLmxlbmd0aCE9dGhpcy5sYXN0U2VudFN1YnNjcmlwdGlvbnMubGVuZ3RoKXJldHVybiEwO2Zvcihjb25zdCB0IG9mIGUpaWYoIXRoaXMubGFzdFNlbnRTdWJzY3JpcHRpb25zLmluY2x1ZGVzKHQpKXJldHVybiEwO3JldHVybiExfWNvbm5lY3RFcnJvckhhbmRsZXIoZSl7aWYoY2xlYXJUaW1lb3V0KHRoaXMuY29ubmVjdFRpbWVvdXRJZCksY2xlYXJUaW1lb3V0KHRoaXMucmVjb25uZWN0VGltZW91dElkKSwhdGhpcy5jbGllbnRJZCYmIXRoaXMucmVjb25uZWN0QXR0ZW1wdHN8fHRoaXMucmVjb25uZWN0QXR0ZW1wdHM+dGhpcy5tYXhSZWNvbm5lY3RBdHRlbXB0cyl7Zm9yKGxldCB0IG9mIHRoaXMucGVuZGluZ0Nvbm5lY3RzKXQucmVqZWN0KG5ldyBDbGllbnRSZXNwb25zZUVycm9yKGUpKTtyZXR1cm4gdGhpcy5wZW5kaW5nQ29ubmVjdHM9W10sdm9pZCB0aGlzLmRpc2Nvbm5lY3QoKX10aGlzLmRpc2Nvbm5lY3QoITApO2NvbnN0IHQ9dGhpcy5wcmVkZWZpbmVkUmVjb25uZWN0SW50ZXJ2YWxzW3RoaXMucmVjb25uZWN0QXR0ZW1wdHNdfHx0aGlzLnByZWRlZmluZWRSZWNvbm5lY3RJbnRlcnZhbHNbdGhpcy5wcmVkZWZpbmVkUmVjb25uZWN0SW50ZXJ2YWxzLmxlbmd0aC0xXTt0aGlzLnJlY29ubmVjdEF0dGVtcHRzKyssdGhpcy5yZWNvbm5lY3RUaW1lb3V0SWQ9c2V0VGltZW91dCgoKCk9Pnt0aGlzLmluaXRDb25uZWN0KCl9KSx0KX1kaXNjb25uZWN0KGU9ITEpe2lmKGNsZWFyVGltZW91dCh0aGlzLmNvbm5lY3RUaW1lb3V0SWQpLGNsZWFyVGltZW91dCh0aGlzLnJlY29ubmVjdFRpbWVvdXRJZCksdGhpcy5yZW1vdmVBbGxTdWJzY3JpcHRpb25MaXN0ZW5lcnMoKSx0aGlzLmNsaWVudC5jYW5jZWxSZXF1ZXN0KHRoaXMuZ2V0U3Vic2NyaXB0aW9uc0NhbmNlbEtleSgpKSx0aGlzLmV2ZW50U291cmNlPy5jbG9zZSgpLHRoaXMuZXZlbnRTb3VyY2U9bnVsbCx0aGlzLmNsaWVudElkPVwiXCIsIWUpe3RoaXMucmVjb25uZWN0QXR0ZW1wdHM9MDtmb3IobGV0IGUgb2YgdGhpcy5wZW5kaW5nQ29ubmVjdHMpZS5yZXNvbHZlKCk7dGhpcy5wZW5kaW5nQ29ubmVjdHM9W119fX1jbGFzcyBSZWNvcmRTZXJ2aWNlIGV4dGVuZHMgQ3J1ZFNlcnZpY2V7Y29uc3RydWN0b3IoZSx0KXtzdXBlcihlKSx0aGlzLmNvbGxlY3Rpb25JZE9yTmFtZT10fWdldCBiYXNlQ3J1ZFBhdGgoKXtyZXR1cm4gdGhpcy5iYXNlQ29sbGVjdGlvblBhdGgrXCIvcmVjb3Jkc1wifWdldCBiYXNlQ29sbGVjdGlvblBhdGgoKXtyZXR1cm5cIi9hcGkvY29sbGVjdGlvbnMvXCIrZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuY29sbGVjdGlvbklkT3JOYW1lKX1hc3luYyBzdWJzY3JpYmUoZSx0LHMpe2lmKCFlKXRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgdG9waWMuXCIpO2lmKCF0KXRocm93IG5ldyBFcnJvcihcIk1pc3Npbmcgc3Vic2NyaXB0aW9uIGNhbGxiYWNrLlwiKTtyZXR1cm4gdGhpcy5jbGllbnQucmVhbHRpbWUuc3Vic2NyaWJlKHRoaXMuY29sbGVjdGlvbklkT3JOYW1lK1wiL1wiK2UsdCxzKX1hc3luYyB1bnN1YnNjcmliZShlKXtyZXR1cm4gZT90aGlzLmNsaWVudC5yZWFsdGltZS51bnN1YnNjcmliZSh0aGlzLmNvbGxlY3Rpb25JZE9yTmFtZStcIi9cIitlKTp0aGlzLmNsaWVudC5yZWFsdGltZS51bnN1YnNjcmliZUJ5UHJlZml4KHRoaXMuY29sbGVjdGlvbklkT3JOYW1lKX1hc3luYyBnZXRGdWxsTGlzdChlLHQpe2lmKFwibnVtYmVyXCI9PXR5cGVvZiBlKXJldHVybiBzdXBlci5nZXRGdWxsTGlzdChlLHQpO2NvbnN0IHM9T2JqZWN0LmFzc2lnbih7fSxlLHQpO3JldHVybiBzdXBlci5nZXRGdWxsTGlzdChzKX1hc3luYyBnZXRMaXN0KGU9MSx0PTMwLHMpe3JldHVybiBzdXBlci5nZXRMaXN0KGUsdCxzKX1hc3luYyBnZXRGaXJzdExpc3RJdGVtKGUsdCl7cmV0dXJuIHN1cGVyLmdldEZpcnN0TGlzdEl0ZW0oZSx0KX1hc3luYyBnZXRPbmUoZSx0KXtyZXR1cm4gc3VwZXIuZ2V0T25lKGUsdCl9YXN5bmMgY3JlYXRlKGUsdCl7cmV0dXJuIHN1cGVyLmNyZWF0ZShlLHQpfWFzeW5jIHVwZGF0ZShlLHQscyl7cmV0dXJuIHN1cGVyLnVwZGF0ZShlLHQscykudGhlbigoZT0+KHRoaXMuY2xpZW50LmF1dGhTdG9yZS5tb2RlbD8uaWQhPT1lPy5pZHx8dGhpcy5jbGllbnQuYXV0aFN0b3JlLm1vZGVsPy5jb2xsZWN0aW9uSWQhPT10aGlzLmNvbGxlY3Rpb25JZE9yTmFtZSYmdGhpcy5jbGllbnQuYXV0aFN0b3JlLm1vZGVsPy5jb2xsZWN0aW9uTmFtZSE9PXRoaXMuY29sbGVjdGlvbklkT3JOYW1lfHx0aGlzLmNsaWVudC5hdXRoU3RvcmUuc2F2ZSh0aGlzLmNsaWVudC5hdXRoU3RvcmUudG9rZW4sZSksZSkpKX1hc3luYyBkZWxldGUoZSx0KXtyZXR1cm4gc3VwZXIuZGVsZXRlKGUsdCkudGhlbigodD0+KCF0fHx0aGlzLmNsaWVudC5hdXRoU3RvcmUubW9kZWw/LmlkIT09ZXx8dGhpcy5jbGllbnQuYXV0aFN0b3JlLm1vZGVsPy5jb2xsZWN0aW9uSWQhPT10aGlzLmNvbGxlY3Rpb25JZE9yTmFtZSYmdGhpcy5jbGllbnQuYXV0aFN0b3JlLm1vZGVsPy5jb2xsZWN0aW9uTmFtZSE9PXRoaXMuY29sbGVjdGlvbklkT3JOYW1lfHx0aGlzLmNsaWVudC5hdXRoU3RvcmUuY2xlYXIoKSx0KSkpfWF1dGhSZXNwb25zZShlKXtjb25zdCB0PXRoaXMuZGVjb2RlKGU/LnJlY29yZHx8e30pO3JldHVybiB0aGlzLmNsaWVudC5hdXRoU3RvcmUuc2F2ZShlPy50b2tlbix0KSxPYmplY3QuYXNzaWduKHt9LGUse3Rva2VuOmU/LnRva2VufHxcIlwiLHJlY29yZDp0fSl9YXN5bmMgbGlzdEF1dGhNZXRob2RzKGUpe3JldHVybiBlPU9iamVjdC5hc3NpZ24oe21ldGhvZDpcIkdFVFwifSxlKSx0aGlzLmNsaWVudC5zZW5kKHRoaXMuYmFzZUNvbGxlY3Rpb25QYXRoK1wiL2F1dGgtbWV0aG9kc1wiLGUpLnRoZW4oKGU9Pk9iamVjdC5hc3NpZ24oe30sZSx7dXNlcm5hbWVQYXNzd29yZDohIWU/LnVzZXJuYW1lUGFzc3dvcmQsZW1haWxQYXNzd29yZDohIWU/LmVtYWlsUGFzc3dvcmQsYXV0aFByb3ZpZGVyczpBcnJheS5pc0FycmF5KGU/LmF1dGhQcm92aWRlcnMpP2U/LmF1dGhQcm92aWRlcnM6W119KSkpfWFzeW5jIGF1dGhXaXRoUGFzc3dvcmQoZSx0LHMsaSl7bGV0IG49e21ldGhvZDpcIlBPU1RcIixib2R5OntpZGVudGl0eTplLHBhc3N3b3JkOnR9fTtyZXR1cm4gbj1ub3JtYWxpemVMZWdhY3lPcHRpb25zQXJncyhcIlRoaXMgZm9ybSBvZiBhdXRoV2l0aFBhc3N3b3JkKHVzZXJuYW1lT3JFbWFpbCwgcGFzcywgYm9keT8sIHF1ZXJ5PykgaXMgZGVwcmVjYXRlZC4gQ29uc2lkZXIgcmVwbGFjaW5nIGl0IHdpdGggYXV0aFdpdGhQYXNzd29yZCh1c2VybmFtZU9yRW1haWwsIHBhc3MsIG9wdGlvbnM/KS5cIixuLHMsaSksdGhpcy5jbGllbnQuc2VuZCh0aGlzLmJhc2VDb2xsZWN0aW9uUGF0aCtcIi9hdXRoLXdpdGgtcGFzc3dvcmRcIixuKS50aGVuKChlPT50aGlzLmF1dGhSZXNwb25zZShlKSkpfWFzeW5jIGF1dGhXaXRoT0F1dGgyQ29kZShlLHQscyxpLG4scixvKXtsZXQgYT17bWV0aG9kOlwiUE9TVFwiLGJvZHk6e3Byb3ZpZGVyOmUsY29kZTp0LGNvZGVWZXJpZmllcjpzLHJlZGlyZWN0VXJsOmksY3JlYXRlRGF0YTpufX07cmV0dXJuIGE9bm9ybWFsaXplTGVnYWN5T3B0aW9uc0FyZ3MoXCJUaGlzIGZvcm0gb2YgYXV0aFdpdGhPQXV0aDJDb2RlKHByb3ZpZGVyLCBjb2RlLCBjb2RlVmVyaWZpZXIsIHJlZGlyZWN0VXJsLCBjcmVhdGVEYXRhPywgYm9keT8sIHF1ZXJ5PykgaXMgZGVwcmVjYXRlZC4gQ29uc2lkZXIgcmVwbGFjaW5nIGl0IHdpdGggYXV0aFdpdGhPQXV0aDJDb2RlKHByb3ZpZGVyLCBjb2RlLCBjb2RlVmVyaWZpZXIsIHJlZGlyZWN0VXJsLCBjcmVhdGVEYXRhPywgb3B0aW9ucz8pLlwiLGEscixvKSx0aGlzLmNsaWVudC5zZW5kKHRoaXMuYmFzZUNvbGxlY3Rpb25QYXRoK1wiL2F1dGgtd2l0aC1vYXV0aDJcIixhKS50aGVuKChlPT50aGlzLmF1dGhSZXNwb25zZShlKSkpfWFzeW5jIGF1dGhXaXRoT0F1dGgyKC4uLmUpe2lmKGUubGVuZ3RoPjF8fFwic3RyaW5nXCI9PXR5cGVvZiBlPy5bMF0pcmV0dXJuIGNvbnNvbGUud2FybihcIlBvY2tldEJhc2U6IFRoaXMgZm9ybSBvZiBhdXRoV2l0aE9BdXRoMigpIGlzIGRlcHJlY2F0ZWQgYW5kIG1heSBnZXQgcmVtb3ZlZCBpbiB0aGUgZnV0dXJlLiBQbGVhc2UgcmVwbGFjZSB3aXRoIGF1dGhXaXRoT0F1dGgyQ29kZSgpIE9SIHVzZSB0aGUgYXV0aFdpdGhPQXV0aDIoKSByZWFsdGltZSBmb3JtIGFzIHNob3duIGluIGh0dHBzOi8vcG9ja2V0YmFzZS5pby9kb2NzL2F1dGhlbnRpY2F0aW9uLyNvYXV0aDItaW50ZWdyYXRpb24uXCIpLHRoaXMuYXV0aFdpdGhPQXV0aDJDb2RlKGU/LlswXXx8XCJcIixlPy5bMV18fFwiXCIsZT8uWzJdfHxcIlwiLGU/LlszXXx8XCJcIixlPy5bNF18fHt9LGU/Lls1XXx8e30sZT8uWzZdfHx7fSk7Y29uc3QgdD1lPy5bMF18fHt9LHM9KGF3YWl0IHRoaXMubGlzdEF1dGhNZXRob2RzKCkpLmF1dGhQcm92aWRlcnMuZmluZCgoZT0+ZS5uYW1lPT09dC5wcm92aWRlcikpO2lmKCFzKXRocm93IG5ldyBDbGllbnRSZXNwb25zZUVycm9yKG5ldyBFcnJvcihgTWlzc2luZyBvciBpbnZhbGlkIHByb3ZpZGVyIFwiJHt0LnByb3ZpZGVyfVwiLmApKTtjb25zdCBpPXRoaXMuY2xpZW50LmJ1aWxkVXJsKFwiL2FwaS9vYXV0aDItcmVkaXJlY3RcIiksbj1uZXcgUmVhbHRpbWVTZXJ2aWNlKHRoaXMuY2xpZW50KTtsZXQgcj1udWxsO2Z1bmN0aW9uIGNsZWFudXAoKXtyPy5jbG9zZSgpLG4udW5zdWJzY3JpYmUoKX1yZXR1cm4gdC51cmxDYWxsYmFja3x8KHI9b3BlbkJyb3dzZXJQb3B1cCh2b2lkIDApKSxuZXcgUHJvbWlzZSgoYXN5bmMoZSxvKT0+e3RyeXthd2FpdCBuLnN1YnNjcmliZShcIkBvYXV0aDJcIiwoYXN5bmMgcj0+e2NvbnN0IGE9bi5jbGllbnRJZDt0cnl7aWYoIXIuc3RhdGV8fGEhPT1yLnN0YXRlKXRocm93IG5ldyBFcnJvcihcIlN0YXRlIHBhcmFtZXRlcnMgZG9uJ3QgbWF0Y2guXCIpO2lmKHIuZXJyb3J8fCFyLmNvZGUpdGhyb3cgbmV3IEVycm9yKFwiT0F1dGgyIHJlZGlyZWN0IGVycm9yIG9yIG1pc3NpbmcgY29kZTogXCIrci5lcnJvcik7Y29uc3Qgbj1PYmplY3QuYXNzaWduKHt9LHQpO2RlbGV0ZSBuLnByb3ZpZGVyLGRlbGV0ZSBuLnNjb3BlcyxkZWxldGUgbi5jcmVhdGVEYXRhLGRlbGV0ZSBuLnVybENhbGxiYWNrO2NvbnN0IG89YXdhaXQgdGhpcy5hdXRoV2l0aE9BdXRoMkNvZGUocy5uYW1lLHIuY29kZSxzLmNvZGVWZXJpZmllcixpLHQuY3JlYXRlRGF0YSxuKTtlKG8pfWNhdGNoKGUpe28obmV3IENsaWVudFJlc3BvbnNlRXJyb3IoZSkpfWNsZWFudXAoKX0pKTtjb25zdCBhPXtzdGF0ZTpuLmNsaWVudElkfTt0LnNjb3Blcz8ubGVuZ3RoJiYoYS5zY29wZT10LnNjb3Blcy5qb2luKFwiIFwiKSk7Y29uc3QgYz10aGlzLl9yZXBsYWNlUXVlcnlQYXJhbXMocy5hdXRoVXJsK2ksYSk7bGV0IGw9dC51cmxDYWxsYmFja3x8ZnVuY3Rpb24oZSl7cj9yLmxvY2F0aW9uLmhyZWY9ZTpyPW9wZW5Ccm93c2VyUG9wdXAoZSl9O2F3YWl0IGwoYyl9Y2F0Y2goZSl7Y2xlYW51cCgpLG8obmV3IENsaWVudFJlc3BvbnNlRXJyb3IoZSkpfX0pKX1hc3luYyBhdXRoUmVmcmVzaChlLHQpe2xldCBzPXttZXRob2Q6XCJQT1NUXCJ9O3JldHVybiBzPW5vcm1hbGl6ZUxlZ2FjeU9wdGlvbnNBcmdzKFwiVGhpcyBmb3JtIG9mIGF1dGhSZWZyZXNoKGJvZHk/LCBxdWVyeT8pIGlzIGRlcHJlY2F0ZWQuIENvbnNpZGVyIHJlcGxhY2luZyBpdCB3aXRoIGF1dGhSZWZyZXNoKG9wdGlvbnM/KS5cIixzLGUsdCksdGhpcy5jbGllbnQuc2VuZCh0aGlzLmJhc2VDb2xsZWN0aW9uUGF0aCtcIi9hdXRoLXJlZnJlc2hcIixzKS50aGVuKChlPT50aGlzLmF1dGhSZXNwb25zZShlKSkpfWFzeW5jIHJlcXVlc3RQYXNzd29yZFJlc2V0KGUsdCxzKXtsZXQgaT17bWV0aG9kOlwiUE9TVFwiLGJvZHk6e2VtYWlsOmV9fTtyZXR1cm4gaT1ub3JtYWxpemVMZWdhY3lPcHRpb25zQXJncyhcIlRoaXMgZm9ybSBvZiByZXF1ZXN0UGFzc3dvcmRSZXNldChlbWFpbCwgYm9keT8sIHF1ZXJ5PykgaXMgZGVwcmVjYXRlZC4gQ29uc2lkZXIgcmVwbGFjaW5nIGl0IHdpdGggcmVxdWVzdFBhc3N3b3JkUmVzZXQoZW1haWwsIG9wdGlvbnM/KS5cIixpLHQscyksdGhpcy5jbGllbnQuc2VuZCh0aGlzLmJhc2VDb2xsZWN0aW9uUGF0aCtcIi9yZXF1ZXN0LXBhc3N3b3JkLXJlc2V0XCIsaSkudGhlbigoKCk9PiEwKSl9YXN5bmMgY29uZmlybVBhc3N3b3JkUmVzZXQoZSx0LHMsaSxuKXtsZXQgcj17bWV0aG9kOlwiUE9TVFwiLGJvZHk6e3Rva2VuOmUscGFzc3dvcmQ6dCxwYXNzd29yZENvbmZpcm06c319O3JldHVybiByPW5vcm1hbGl6ZUxlZ2FjeU9wdGlvbnNBcmdzKFwiVGhpcyBmb3JtIG9mIGNvbmZpcm1QYXNzd29yZFJlc2V0KHRva2VuLCBwYXNzd29yZCwgcGFzc3dvcmRDb25maXJtLCBib2R5PywgcXVlcnk/KSBpcyBkZXByZWNhdGVkLiBDb25zaWRlciByZXBsYWNpbmcgaXQgd2l0aCBjb25maXJtUGFzc3dvcmRSZXNldCh0b2tlbiwgcGFzc3dvcmQsIHBhc3N3b3JkQ29uZmlybSwgb3B0aW9ucz8pLlwiLHIsaSxuKSx0aGlzLmNsaWVudC5zZW5kKHRoaXMuYmFzZUNvbGxlY3Rpb25QYXRoK1wiL2NvbmZpcm0tcGFzc3dvcmQtcmVzZXRcIixyKS50aGVuKCgoKT0+ITApKX1hc3luYyByZXF1ZXN0VmVyaWZpY2F0aW9uKGUsdCxzKXtsZXQgaT17bWV0aG9kOlwiUE9TVFwiLGJvZHk6e2VtYWlsOmV9fTtyZXR1cm4gaT1ub3JtYWxpemVMZWdhY3lPcHRpb25zQXJncyhcIlRoaXMgZm9ybSBvZiByZXF1ZXN0VmVyaWZpY2F0aW9uKGVtYWlsLCBib2R5PywgcXVlcnk/KSBpcyBkZXByZWNhdGVkLiBDb25zaWRlciByZXBsYWNpbmcgaXQgd2l0aCByZXF1ZXN0VmVyaWZpY2F0aW9uKGVtYWlsLCBvcHRpb25zPykuXCIsaSx0LHMpLHRoaXMuY2xpZW50LnNlbmQodGhpcy5iYXNlQ29sbGVjdGlvblBhdGgrXCIvcmVxdWVzdC12ZXJpZmljYXRpb25cIixpKS50aGVuKCgoKT0+ITApKX1hc3luYyBjb25maXJtVmVyaWZpY2F0aW9uKGUsdCxzKXtsZXQgaT17bWV0aG9kOlwiUE9TVFwiLGJvZHk6e3Rva2VuOmV9fTtyZXR1cm4gaT1ub3JtYWxpemVMZWdhY3lPcHRpb25zQXJncyhcIlRoaXMgZm9ybSBvZiBjb25maXJtVmVyaWZpY2F0aW9uKHRva2VuLCBib2R5PywgcXVlcnk/KSBpcyBkZXByZWNhdGVkLiBDb25zaWRlciByZXBsYWNpbmcgaXQgd2l0aCBjb25maXJtVmVyaWZpY2F0aW9uKHRva2VuLCBvcHRpb25zPykuXCIsaSx0LHMpLHRoaXMuY2xpZW50LnNlbmQodGhpcy5iYXNlQ29sbGVjdGlvblBhdGgrXCIvY29uZmlybS12ZXJpZmljYXRpb25cIixpKS50aGVuKCgoKT0+e2NvbnN0IHQ9Z2V0VG9rZW5QYXlsb2FkKGUpLHM9dGhpcy5jbGllbnQuYXV0aFN0b3JlLm1vZGVsO3JldHVybiBzJiYhcy52ZXJpZmllZCYmcy5pZD09PXQuaWQmJnMuY29sbGVjdGlvbklkPT09dC5jb2xsZWN0aW9uSWQmJihzLnZlcmlmaWVkPSEwLHRoaXMuY2xpZW50LmF1dGhTdG9yZS5zYXZlKHRoaXMuY2xpZW50LmF1dGhTdG9yZS50b2tlbixzKSksITB9KSl9YXN5bmMgcmVxdWVzdEVtYWlsQ2hhbmdlKGUsdCxzKXtsZXQgaT17bWV0aG9kOlwiUE9TVFwiLGJvZHk6e25ld0VtYWlsOmV9fTtyZXR1cm4gaT1ub3JtYWxpemVMZWdhY3lPcHRpb25zQXJncyhcIlRoaXMgZm9ybSBvZiByZXF1ZXN0RW1haWxDaGFuZ2UobmV3RW1haWwsIGJvZHk/LCBxdWVyeT8pIGlzIGRlcHJlY2F0ZWQuIENvbnNpZGVyIHJlcGxhY2luZyBpdCB3aXRoIHJlcXVlc3RFbWFpbENoYW5nZShuZXdFbWFpbCwgb3B0aW9ucz8pLlwiLGksdCxzKSx0aGlzLmNsaWVudC5zZW5kKHRoaXMuYmFzZUNvbGxlY3Rpb25QYXRoK1wiL3JlcXVlc3QtZW1haWwtY2hhbmdlXCIsaSkudGhlbigoKCk9PiEwKSl9YXN5bmMgY29uZmlybUVtYWlsQ2hhbmdlKGUsdCxzLGkpe2xldCBuPXttZXRob2Q6XCJQT1NUXCIsYm9keTp7dG9rZW46ZSxwYXNzd29yZDp0fX07cmV0dXJuIG49bm9ybWFsaXplTGVnYWN5T3B0aW9uc0FyZ3MoXCJUaGlzIGZvcm0gb2YgY29uZmlybUVtYWlsQ2hhbmdlKHRva2VuLCBwYXNzd29yZCwgYm9keT8sIHF1ZXJ5PykgaXMgZGVwcmVjYXRlZC4gQ29uc2lkZXIgcmVwbGFjaW5nIGl0IHdpdGggY29uZmlybUVtYWlsQ2hhbmdlKHRva2VuLCBwYXNzd29yZCwgb3B0aW9ucz8pLlwiLG4scyxpKSx0aGlzLmNsaWVudC5zZW5kKHRoaXMuYmFzZUNvbGxlY3Rpb25QYXRoK1wiL2NvbmZpcm0tZW1haWwtY2hhbmdlXCIsbikudGhlbigoKCk9Pntjb25zdCB0PWdldFRva2VuUGF5bG9hZChlKSxzPXRoaXMuY2xpZW50LmF1dGhTdG9yZS5tb2RlbDtyZXR1cm4gcyYmcy5pZD09PXQuaWQmJnMuY29sbGVjdGlvbklkPT09dC5jb2xsZWN0aW9uSWQmJnRoaXMuY2xpZW50LmF1dGhTdG9yZS5jbGVhcigpLCEwfSkpfWFzeW5jIGxpc3RFeHRlcm5hbEF1dGhzKGUsdCl7cmV0dXJuIHQ9T2JqZWN0LmFzc2lnbih7bWV0aG9kOlwiR0VUXCJ9LHQpLHRoaXMuY2xpZW50LnNlbmQodGhpcy5iYXNlQ3J1ZFBhdGgrXCIvXCIrZW5jb2RlVVJJQ29tcG9uZW50KGUpK1wiL2V4dGVybmFsLWF1dGhzXCIsdCl9YXN5bmMgdW5saW5rRXh0ZXJuYWxBdXRoKGUsdCxzKXtyZXR1cm4gcz1PYmplY3QuYXNzaWduKHttZXRob2Q6XCJERUxFVEVcIn0scyksdGhpcy5jbGllbnQuc2VuZCh0aGlzLmJhc2VDcnVkUGF0aCtcIi9cIitlbmNvZGVVUklDb21wb25lbnQoZSkrXCIvZXh0ZXJuYWwtYXV0aHMvXCIrZW5jb2RlVVJJQ29tcG9uZW50KHQpLHMpLnRoZW4oKCgpPT4hMCkpfV9yZXBsYWNlUXVlcnlQYXJhbXMoZSx0PXt9KXtsZXQgcz1lLGk9XCJcIjtlLmluZGV4T2YoXCI/XCIpPj0wJiYocz1lLnN1YnN0cmluZygwLGUuaW5kZXhPZihcIj9cIikpLGk9ZS5zdWJzdHJpbmcoZS5pbmRleE9mKFwiP1wiKSsxKSk7Y29uc3Qgbj17fSxyPWkuc3BsaXQoXCImXCIpO2Zvcihjb25zdCBlIG9mIHIpe2lmKFwiXCI9PWUpY29udGludWU7Y29uc3QgdD1lLnNwbGl0KFwiPVwiKTtuW2RlY29kZVVSSUNvbXBvbmVudCh0WzBdLnJlcGxhY2UoL1xcKy9nLFwiIFwiKSldPWRlY29kZVVSSUNvbXBvbmVudCgodFsxXXx8XCJcIikucmVwbGFjZSgvXFwrL2csXCIgXCIpKX1mb3IobGV0IGUgaW4gdCl0Lmhhc093blByb3BlcnR5KGUpJiYobnVsbD09dFtlXT9kZWxldGUgbltlXTpuW2VdPXRbZV0pO2k9XCJcIjtmb3IobGV0IGUgaW4gbiluLmhhc093blByb3BlcnR5KGUpJiYoXCJcIiE9aSYmKGkrPVwiJlwiKSxpKz1lbmNvZGVVUklDb21wb25lbnQoZS5yZXBsYWNlKC8lMjAvZyxcIitcIikpK1wiPVwiK2VuY29kZVVSSUNvbXBvbmVudChuW2VdLnJlcGxhY2UoLyUyMC9nLFwiK1wiKSkpO3JldHVyblwiXCIhPWk/cytcIj9cIitpOnN9fWZ1bmN0aW9uIG9wZW5Ccm93c2VyUG9wdXAoZSl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHdpbmRvd3x8IXdpbmRvdz8ub3Blbil0aHJvdyBuZXcgQ2xpZW50UmVzcG9uc2VFcnJvcihuZXcgRXJyb3IoXCJOb3QgaW4gYSBicm93c2VyIGNvbnRleHQgLSBwbGVhc2UgcGFzcyBhIGN1c3RvbSB1cmxDYWxsYmFjayBmdW5jdGlvbi5cIikpO2xldCB0PTEwMjQscz03NjgsaT13aW5kb3cuaW5uZXJXaWR0aCxuPXdpbmRvdy5pbm5lckhlaWdodDt0PXQ+aT9pOnQscz1zPm4/bjpzO2xldCByPWkvMi10LzIsbz1uLzItcy8yO3JldHVybiB3aW5kb3cub3BlbihlLFwicG9wdXBfd2luZG93XCIsXCJ3aWR0aD1cIit0K1wiLGhlaWdodD1cIitzK1wiLHRvcD1cIitvK1wiLGxlZnQ9XCIrcitcIixyZXNpemFibGUsbWVudWJhcj1ub1wiKX1jbGFzcyBDb2xsZWN0aW9uU2VydmljZSBleHRlbmRzIENydWRTZXJ2aWNle2dldCBiYXNlQ3J1ZFBhdGgoKXtyZXR1cm5cIi9hcGkvY29sbGVjdGlvbnNcIn1hc3luYyBpbXBvcnQoZSx0PSExLHMpe3JldHVybiBzPU9iamVjdC5hc3NpZ24oe21ldGhvZDpcIlBVVFwiLGJvZHk6e2NvbGxlY3Rpb25zOmUsZGVsZXRlTWlzc2luZzp0fX0scyksdGhpcy5jbGllbnQuc2VuZCh0aGlzLmJhc2VDcnVkUGF0aCtcIi9pbXBvcnRcIixzKS50aGVuKCgoKT0+ITApKX19Y2xhc3MgTG9nU2VydmljZSBleHRlbmRzIEJhc2VTZXJ2aWNle2FzeW5jIGdldExpc3QoZT0xLHQ9MzAscyl7cmV0dXJuKHM9T2JqZWN0LmFzc2lnbih7bWV0aG9kOlwiR0VUXCJ9LHMpKS5xdWVyeT1PYmplY3QuYXNzaWduKHtwYWdlOmUscGVyUGFnZTp0fSxzLnF1ZXJ5KSx0aGlzLmNsaWVudC5zZW5kKFwiL2FwaS9sb2dzXCIscyl9YXN5bmMgZ2V0T25lKGUsdCl7aWYoIWUpdGhyb3cgbmV3IENsaWVudFJlc3BvbnNlRXJyb3Ioe3VybDp0aGlzLmNsaWVudC5idWlsZFVybChcIi9hcGkvbG9ncy9cIiksc3RhdHVzOjQwNCxyZXNwb25zZTp7Y29kZTo0MDQsbWVzc2FnZTpcIk1pc3NpbmcgcmVxdWlyZWQgbG9nIGlkLlwiLGRhdGE6e319fSk7cmV0dXJuIHQ9T2JqZWN0LmFzc2lnbih7bWV0aG9kOlwiR0VUXCJ9LHQpLHRoaXMuY2xpZW50LnNlbmQoXCIvYXBpL2xvZ3MvXCIrZW5jb2RlVVJJQ29tcG9uZW50KGUpLHQpfWFzeW5jIGdldFN0YXRzKGUpe3JldHVybiBlPU9iamVjdC5hc3NpZ24oe21ldGhvZDpcIkdFVFwifSxlKSx0aGlzLmNsaWVudC5zZW5kKFwiL2FwaS9sb2dzL3N0YXRzXCIsZSl9fWNsYXNzIEhlYWx0aFNlcnZpY2UgZXh0ZW5kcyBCYXNlU2VydmljZXthc3luYyBjaGVjayhlKXtyZXR1cm4gZT1PYmplY3QuYXNzaWduKHttZXRob2Q6XCJHRVRcIn0sZSksdGhpcy5jbGllbnQuc2VuZChcIi9hcGkvaGVhbHRoXCIsZSl9fWNsYXNzIEZpbGVTZXJ2aWNlIGV4dGVuZHMgQmFzZVNlcnZpY2V7Z2V0VXJsKGUsdCxzPXt9KXtpZighdHx8IWU/LmlkfHwhZT8uY29sbGVjdGlvbklkJiYhZT8uY29sbGVjdGlvbk5hbWUpcmV0dXJuXCJcIjtjb25zdCBpPVtdO2kucHVzaChcImFwaVwiKSxpLnB1c2goXCJmaWxlc1wiKSxpLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGUuY29sbGVjdGlvbklkfHxlLmNvbGxlY3Rpb25OYW1lKSksaS5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChlLmlkKSksaS5wdXNoKGVuY29kZVVSSUNvbXBvbmVudCh0KSk7bGV0IG49dGhpcy5jbGllbnQuYnVpbGRVcmwoaS5qb2luKFwiL1wiKSk7aWYoT2JqZWN0LmtleXMocykubGVuZ3RoKXshMT09PXMuZG93bmxvYWQmJmRlbGV0ZSBzLmRvd25sb2FkO2NvbnN0IGU9bmV3IFVSTFNlYXJjaFBhcmFtcyhzKTtuKz0obi5pbmNsdWRlcyhcIj9cIik/XCImXCI6XCI/XCIpK2V9cmV0dXJuIG59YXN5bmMgZ2V0VG9rZW4oZSl7cmV0dXJuIGU9T2JqZWN0LmFzc2lnbih7bWV0aG9kOlwiUE9TVFwifSxlKSx0aGlzLmNsaWVudC5zZW5kKFwiL2FwaS9maWxlcy90b2tlblwiLGUpLnRoZW4oKGU9PmU/LnRva2VufHxcIlwiKSl9fWNsYXNzIEJhY2t1cFNlcnZpY2UgZXh0ZW5kcyBCYXNlU2VydmljZXthc3luYyBnZXRGdWxsTGlzdChlKXtyZXR1cm4gZT1PYmplY3QuYXNzaWduKHttZXRob2Q6XCJHRVRcIn0sZSksdGhpcy5jbGllbnQuc2VuZChcIi9hcGkvYmFja3Vwc1wiLGUpfWFzeW5jIGNyZWF0ZShlLHQpe3JldHVybiB0PU9iamVjdC5hc3NpZ24oe21ldGhvZDpcIlBPU1RcIixib2R5OntuYW1lOmV9fSx0KSx0aGlzLmNsaWVudC5zZW5kKFwiL2FwaS9iYWNrdXBzXCIsdCkudGhlbigoKCk9PiEwKSl9YXN5bmMgdXBsb2FkKGUsdCl7cmV0dXJuIHQ9T2JqZWN0LmFzc2lnbih7bWV0aG9kOlwiUE9TVFwiLGJvZHk6ZX0sdCksdGhpcy5jbGllbnQuc2VuZChcIi9hcGkvYmFja3Vwcy91cGxvYWRcIix0KS50aGVuKCgoKT0+ITApKX1hc3luYyBkZWxldGUoZSx0KXtyZXR1cm4gdD1PYmplY3QuYXNzaWduKHttZXRob2Q6XCJERUxFVEVcIn0sdCksdGhpcy5jbGllbnQuc2VuZChgL2FwaS9iYWNrdXBzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KGUpfWAsdCkudGhlbigoKCk9PiEwKSl9YXN5bmMgcmVzdG9yZShlLHQpe3JldHVybiB0PU9iamVjdC5hc3NpZ24oe21ldGhvZDpcIlBPU1RcIn0sdCksdGhpcy5jbGllbnQuc2VuZChgL2FwaS9iYWNrdXBzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KGUpfS9yZXN0b3JlYCx0KS50aGVuKCgoKT0+ITApKX1nZXREb3dubG9hZFVybChlLHQpe3JldHVybiB0aGlzLmNsaWVudC5idWlsZFVybChgL2FwaS9iYWNrdXBzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHQpfT90b2tlbj0ke2VuY29kZVVSSUNvbXBvbmVudChlKX1gKX19Y2xhc3MgQ2xpZW50e2NvbnN0cnVjdG9yKGU9XCIvXCIsdCxzPVwiZW4tVVNcIil7dGhpcy5jYW5jZWxDb250cm9sbGVycz17fSx0aGlzLnJlY29yZFNlcnZpY2VzPXt9LHRoaXMuZW5hYmxlQXV0b0NhbmNlbGxhdGlvbj0hMCx0aGlzLmJhc2VVcmw9ZSx0aGlzLmxhbmc9cyx0aGlzLmF1dGhTdG9yZT10fHxuZXcgTG9jYWxBdXRoU3RvcmUsdGhpcy5hZG1pbnM9bmV3IEFkbWluU2VydmljZSh0aGlzKSx0aGlzLmNvbGxlY3Rpb25zPW5ldyBDb2xsZWN0aW9uU2VydmljZSh0aGlzKSx0aGlzLmZpbGVzPW5ldyBGaWxlU2VydmljZSh0aGlzKSx0aGlzLmxvZ3M9bmV3IExvZ1NlcnZpY2UodGhpcyksdGhpcy5zZXR0aW5ncz1uZXcgU2V0dGluZ3NTZXJ2aWNlKHRoaXMpLHRoaXMucmVhbHRpbWU9bmV3IFJlYWx0aW1lU2VydmljZSh0aGlzKSx0aGlzLmhlYWx0aD1uZXcgSGVhbHRoU2VydmljZSh0aGlzKSx0aGlzLmJhY2t1cHM9bmV3IEJhY2t1cFNlcnZpY2UodGhpcyl9Y29sbGVjdGlvbihlKXtyZXR1cm4gdGhpcy5yZWNvcmRTZXJ2aWNlc1tlXXx8KHRoaXMucmVjb3JkU2VydmljZXNbZV09bmV3IFJlY29yZFNlcnZpY2UodGhpcyxlKSksdGhpcy5yZWNvcmRTZXJ2aWNlc1tlXX1hdXRvQ2FuY2VsbGF0aW9uKGUpe3JldHVybiB0aGlzLmVuYWJsZUF1dG9DYW5jZWxsYXRpb249ISFlLHRoaXN9Y2FuY2VsUmVxdWVzdChlKXtyZXR1cm4gdGhpcy5jYW5jZWxDb250cm9sbGVyc1tlXSYmKHRoaXMuY2FuY2VsQ29udHJvbGxlcnNbZV0uYWJvcnQoKSxkZWxldGUgdGhpcy5jYW5jZWxDb250cm9sbGVyc1tlXSksdGhpc31jYW5jZWxBbGxSZXF1ZXN0cygpe2ZvcihsZXQgZSBpbiB0aGlzLmNhbmNlbENvbnRyb2xsZXJzKXRoaXMuY2FuY2VsQ29udHJvbGxlcnNbZV0uYWJvcnQoKTtyZXR1cm4gdGhpcy5jYW5jZWxDb250cm9sbGVycz17fSx0aGlzfWZpbHRlcihlLHQpe2lmKCF0KXJldHVybiBlO2ZvcihsZXQgcyBpbiB0KXtsZXQgaT10W3NdO3N3aXRjaCh0eXBlb2YgaSl7Y2FzZVwiYm9vbGVhblwiOmNhc2VcIm51bWJlclwiOmk9XCJcIitpO2JyZWFrO2Nhc2VcInN0cmluZ1wiOmk9XCInXCIraS5yZXBsYWNlKC8nL2csXCJcXFxcJ1wiKStcIidcIjticmVhaztkZWZhdWx0Omk9bnVsbD09PWk/XCJudWxsXCI6aSBpbnN0YW5jZW9mIERhdGU/XCInXCIraS50b0lTT1N0cmluZygpLnJlcGxhY2UoXCJUXCIsXCIgXCIpK1wiJ1wiOlwiJ1wiK0pTT04uc3RyaW5naWZ5KGkpLnJlcGxhY2UoLycvZyxcIlxcXFwnXCIpK1wiJ1wifWU9ZS5yZXBsYWNlQWxsKFwiezpcIitzK1wifVwiLGkpfXJldHVybiBlfWdldEZpbGVVcmwoZSx0LHM9e30pe3JldHVybiB0aGlzLmZpbGVzLmdldFVybChlLHQscyl9YnVpbGRVcmwoZSl7bGV0IHQ9dGhpcy5iYXNlVXJsO3JldHVyblwidW5kZWZpbmVkXCI9PXR5cGVvZiB3aW5kb3d8fCF3aW5kb3cubG9jYXRpb258fHQuc3RhcnRzV2l0aChcImh0dHBzOi8vXCIpfHx0LnN0YXJ0c1dpdGgoXCJodHRwOi8vXCIpfHwodD13aW5kb3cubG9jYXRpb24ub3JpZ2luPy5lbmRzV2l0aChcIi9cIik/d2luZG93LmxvY2F0aW9uLm9yaWdpbi5zdWJzdHJpbmcoMCx3aW5kb3cubG9jYXRpb24ub3JpZ2luLmxlbmd0aC0xKTp3aW5kb3cubG9jYXRpb24ub3JpZ2lufHxcIlwiLHRoaXMuYmFzZVVybC5zdGFydHNXaXRoKFwiL1wiKXx8KHQrPXdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZXx8XCIvXCIsdCs9dC5lbmRzV2l0aChcIi9cIik/XCJcIjpcIi9cIiksdCs9dGhpcy5iYXNlVXJsKSxlJiYodCs9dC5lbmRzV2l0aChcIi9cIik/XCJcIjpcIi9cIix0Kz1lLnN0YXJ0c1dpdGgoXCIvXCIpP2Uuc3Vic3RyaW5nKDEpOmUpLHR9YXN5bmMgc2VuZChlLHQpe3Q9dGhpcy5pbml0U2VuZE9wdGlvbnMoZSx0KTtsZXQgcz10aGlzLmJ1aWxkVXJsKGUpO2lmKHRoaXMuYmVmb3JlU2VuZCl7Y29uc3QgZT1PYmplY3QuYXNzaWduKHt9LGF3YWl0IHRoaXMuYmVmb3JlU2VuZChzLHQpKTt2b2lkIDAhPT1lLnVybHx8dm9pZCAwIT09ZS5vcHRpb25zPyhzPWUudXJsfHxzLHQ9ZS5vcHRpb25zfHx0KTpPYmplY3Qua2V5cyhlKS5sZW5ndGgmJih0PWUsY29uc29sZT8ud2FybiYmY29uc29sZS53YXJuKFwiRGVwcmVjYXRlZCBmb3JtYXQgb2YgYmVmb3JlU2VuZCByZXR1cm46IHBsZWFzZSB1c2UgYHJldHVybiB7IHVybCwgb3B0aW9ucyB9YCwgaW5zdGVhZCBvZiBgcmV0dXJuIG9wdGlvbnNgLlwiKSl9aWYodm9pZCAwIT09dC5xdWVyeSl7Y29uc3QgZT10aGlzLnNlcmlhbGl6ZVF1ZXJ5UGFyYW1zKHQucXVlcnkpO2UmJihzKz0ocy5pbmNsdWRlcyhcIj9cIik/XCImXCI6XCI/XCIpK2UpLGRlbGV0ZSB0LnF1ZXJ5fVwiYXBwbGljYXRpb24vanNvblwiPT10aGlzLmdldEhlYWRlcih0LmhlYWRlcnMsXCJDb250ZW50LVR5cGVcIikmJnQuYm9keSYmXCJzdHJpbmdcIiE9dHlwZW9mIHQuYm9keSYmKHQuYm9keT1KU09OLnN0cmluZ2lmeSh0LmJvZHkpKTtyZXR1cm4odC5mZXRjaHx8ZmV0Y2gpKHMsdCkudGhlbigoYXN5bmMgZT0+e2xldCB0PXt9O3RyeXt0PWF3YWl0IGUuanNvbigpfWNhdGNoKGUpe31pZih0aGlzLmFmdGVyU2VuZCYmKHQ9YXdhaXQgdGhpcy5hZnRlclNlbmQoZSx0KSksZS5zdGF0dXM+PTQwMCl0aHJvdyBuZXcgQ2xpZW50UmVzcG9uc2VFcnJvcih7dXJsOmUudXJsLHN0YXR1czplLnN0YXR1cyxkYXRhOnR9KTtyZXR1cm4gdH0pKS5jYXRjaCgoZT0+e3Rocm93IG5ldyBDbGllbnRSZXNwb25zZUVycm9yKGUpfSkpfWluaXRTZW5kT3B0aW9ucyhlLHQpe2lmKCh0PU9iamVjdC5hc3NpZ24oe21ldGhvZDpcIkdFVFwifSx0KSkuYm9keT10aGlzLmNvbnZlcnRUb0Zvcm1EYXRhSWZOZWVkZWQodC5ib2R5KSxub3JtYWxpemVVbmtub3duUXVlcnlQYXJhbXModCksdC5xdWVyeT1PYmplY3QuYXNzaWduKHt9LHQucGFyYW1zLHQucXVlcnkpLHZvaWQgMD09PXQucmVxdWVzdEtleSYmKCExPT09dC4kYXV0b0NhbmNlbHx8ITE9PT10LnF1ZXJ5LiRhdXRvQ2FuY2VsP3QucmVxdWVzdEtleT1udWxsOih0LiRjYW5jZWxLZXl8fHQucXVlcnkuJGNhbmNlbEtleSkmJih0LnJlcXVlc3RLZXk9dC4kY2FuY2VsS2V5fHx0LnF1ZXJ5LiRjYW5jZWxLZXkpKSxkZWxldGUgdC4kYXV0b0NhbmNlbCxkZWxldGUgdC5xdWVyeS4kYXV0b0NhbmNlbCxkZWxldGUgdC4kY2FuY2VsS2V5LGRlbGV0ZSB0LnF1ZXJ5LiRjYW5jZWxLZXksbnVsbCE9PXRoaXMuZ2V0SGVhZGVyKHQuaGVhZGVycyxcIkNvbnRlbnQtVHlwZVwiKXx8dGhpcy5pc0Zvcm1EYXRhKHQuYm9keSl8fCh0LmhlYWRlcnM9T2JqZWN0LmFzc2lnbih7fSx0LmhlYWRlcnMse1wiQ29udGVudC1UeXBlXCI6XCJhcHBsaWNhdGlvbi9qc29uXCJ9KSksbnVsbD09PXRoaXMuZ2V0SGVhZGVyKHQuaGVhZGVycyxcIkFjY2VwdC1MYW5ndWFnZVwiKSYmKHQuaGVhZGVycz1PYmplY3QuYXNzaWduKHt9LHQuaGVhZGVycyx7XCJBY2NlcHQtTGFuZ3VhZ2VcIjp0aGlzLmxhbmd9KSksdGhpcy5hdXRoU3RvcmUudG9rZW4mJm51bGw9PT10aGlzLmdldEhlYWRlcih0LmhlYWRlcnMsXCJBdXRob3JpemF0aW9uXCIpJiYodC5oZWFkZXJzPU9iamVjdC5hc3NpZ24oe30sdC5oZWFkZXJzLHtBdXRob3JpemF0aW9uOnRoaXMuYXV0aFN0b3JlLnRva2VufSkpLHRoaXMuZW5hYmxlQXV0b0NhbmNlbGxhdGlvbiYmbnVsbCE9PXQucmVxdWVzdEtleSl7Y29uc3Qgcz10LnJlcXVlc3RLZXl8fCh0Lm1ldGhvZHx8XCJHRVRcIikrZTtkZWxldGUgdC5yZXF1ZXN0S2V5LHRoaXMuY2FuY2VsUmVxdWVzdChzKTtjb25zdCBpPW5ldyBBYm9ydENvbnRyb2xsZXI7dGhpcy5jYW5jZWxDb250cm9sbGVyc1tzXT1pLHQuc2lnbmFsPWkuc2lnbmFsfXJldHVybiB0fWNvbnZlcnRUb0Zvcm1EYXRhSWZOZWVkZWQoZSl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIEZvcm1EYXRhfHx2b2lkIDA9PT1lfHxcIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWV8fHRoaXMuaXNGb3JtRGF0YShlKXx8IXRoaXMuaGFzQmxvYkZpZWxkKGUpKXJldHVybiBlO2NvbnN0IHQ9bmV3IEZvcm1EYXRhO2Zvcihjb25zdCBzIGluIGUpe2NvbnN0IGk9ZVtzXTtpZihcIm9iamVjdFwiIT10eXBlb2YgaXx8dGhpcy5oYXNCbG9iRmllbGQoe2RhdGE6aX0pKXtjb25zdCBlPUFycmF5LmlzQXJyYXkoaSk/aTpbaV07Zm9yKGxldCBpIG9mIGUpdC5hcHBlbmQocyxpKX1lbHNle2xldCBlPXt9O2Vbc109aSx0LmFwcGVuZChcIkBqc29uUGF5bG9hZFwiLEpTT04uc3RyaW5naWZ5KGUpKX19cmV0dXJuIHR9aGFzQmxvYkZpZWxkKGUpe2Zvcihjb25zdCB0IGluIGUpe2NvbnN0IHM9QXJyYXkuaXNBcnJheShlW3RdKT9lW3RdOltlW3RdXTtmb3IoY29uc3QgZSBvZiBzKWlmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBCbG9iJiZlIGluc3RhbmNlb2YgQmxvYnx8XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEZpbGUmJmUgaW5zdGFuY2VvZiBGaWxlKXJldHVybiEwfXJldHVybiExfWdldEhlYWRlcihlLHQpe2U9ZXx8e30sdD10LnRvTG93ZXJDYXNlKCk7Zm9yKGxldCBzIGluIGUpaWYocy50b0xvd2VyQ2FzZSgpPT10KXJldHVybiBlW3NdO3JldHVybiBudWxsfWlzRm9ybURhdGEoZSl7cmV0dXJuIGUmJihcIkZvcm1EYXRhXCI9PT1lLmNvbnN0cnVjdG9yLm5hbWV8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiBGb3JtRGF0YSYmZSBpbnN0YW5jZW9mIEZvcm1EYXRhKX1zZXJpYWxpemVRdWVyeVBhcmFtcyhlKXtjb25zdCB0PVtdO2Zvcihjb25zdCBzIGluIGUpe2lmKG51bGw9PT1lW3NdKWNvbnRpbnVlO2NvbnN0IGk9ZVtzXSxuPWVuY29kZVVSSUNvbXBvbmVudChzKTtpZihBcnJheS5pc0FycmF5KGkpKWZvcihjb25zdCBlIG9mIGkpdC5wdXNoKG4rXCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KGUpKTtlbHNlIGkgaW5zdGFuY2VvZiBEYXRlP3QucHVzaChuK1wiPVwiK2VuY29kZVVSSUNvbXBvbmVudChpLnRvSVNPU3RyaW5nKCkpKTpudWxsIT09dHlwZW9mIGkmJlwib2JqZWN0XCI9PXR5cGVvZiBpP3QucHVzaChuK1wiPVwiK2VuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShpKSkpOnQucHVzaChuK1wiPVwiK2VuY29kZVVSSUNvbXBvbmVudChpKSl9cmV0dXJuIHQuam9pbihcIiZcIil9fWNsYXNzIEFzeW5jQXV0aFN0b3JlIGV4dGVuZHMgQmFzZUF1dGhTdG9yZXtjb25zdHJ1Y3RvcihlKXtzdXBlcigpLHRoaXMucXVldWU9W10sdGhpcy5zYXZlRnVuYz1lLnNhdmUsdGhpcy5jbGVhckZ1bmM9ZS5jbGVhcix0aGlzLl9lbnF1ZXVlKCgoKT0+dGhpcy5fbG9hZEluaXRpYWwoZS5pbml0aWFsKSkpfXNhdmUoZSx0KXtzdXBlci5zYXZlKGUsdCk7bGV0IHM9XCJcIjt0cnl7cz1KU09OLnN0cmluZ2lmeSh7dG9rZW46ZSxtb2RlbDp0fSl9Y2F0Y2goZSl7Y29uc29sZS53YXJuKFwiQXN5bmNBdXRoU3RvcmU6IGZhaWxlZCB0byBzdHJpbmdpZnkgdGhlIG5ldyBzdGF0ZVwiKX10aGlzLl9lbnF1ZXVlKCgoKT0+dGhpcy5zYXZlRnVuYyhzKSkpfWNsZWFyKCl7c3VwZXIuY2xlYXIoKSx0aGlzLmNsZWFyRnVuYz90aGlzLl9lbnF1ZXVlKCgoKT0+dGhpcy5jbGVhckZ1bmMoKSkpOnRoaXMuX2VucXVldWUoKCgpPT50aGlzLnNhdmVGdW5jKFwiXCIpKSl9YXN5bmMgX2xvYWRJbml0aWFsKGUpe3RyeXtpZihlPWF3YWl0IGUpe2xldCB0O1wic3RyaW5nXCI9PXR5cGVvZiBlP3Q9SlNPTi5wYXJzZShlKXx8e306XCJvYmplY3RcIj09dHlwZW9mIGUmJih0PWUpLHRoaXMuc2F2ZSh0LnRva2VufHxcIlwiLHQubW9kZWx8fG51bGwpfX1jYXRjaChlKXt9fV9lbnF1ZXVlKGUpe3RoaXMucXVldWUucHVzaChlKSwxPT10aGlzLnF1ZXVlLmxlbmd0aCYmdGhpcy5fZGVxdWV1ZSgpfV9kZXF1ZXVlKCl7dGhpcy5xdWV1ZS5sZW5ndGgmJnRoaXMucXVldWVbMF0oKS5maW5hbGx5KCgoKT0+e3RoaXMucXVldWUuc2hpZnQoKSx0aGlzLnF1ZXVlLmxlbmd0aCYmdGhpcy5fZGVxdWV1ZSgpfSkpfX1leHBvcnR7QWRtaW5TZXJ2aWNlLEFzeW5jQXV0aFN0b3JlLEJhc2VBdXRoU3RvcmUsQ2xpZW50UmVzcG9uc2VFcnJvcixDb2xsZWN0aW9uU2VydmljZSxDcnVkU2VydmljZSxMb2NhbEF1dGhTdG9yZSxMb2dTZXJ2aWNlLFJlYWx0aW1lU2VydmljZSxSZWNvcmRTZXJ2aWNlLGNvb2tpZVBhcnNlLGNvb2tpZVNlcmlhbGl6ZSxDbGllbnQgYXMgZGVmYXVsdCxnZXRUb2tlblBheWxvYWQsaXNUb2tlbkV4cGlyZWQsbm9ybWFsaXplVW5rbm93blF1ZXJ5UGFyYW1zfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvY2tldGJhc2UuZXMubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkNsaWVudFJlc3BvbnNlRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwiZSIsInVybCIsInN0YXR1cyIsInJlc3BvbnNlIiwiaXNBYm9ydCIsIm9yaWdpbmFsRXJyb3IiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsInByb3RvdHlwZSIsImRhdGEiLCJET01FeGNlcHRpb24iLCJuYW1lIiwibWVzc2FnZSIsImNhdXNlIiwiaW5jbHVkZXMiLCJ0b0pTT04iLCJjb29raWVQYXJzZSIsInQiLCJzIiwiaSIsImFzc2lnbiIsImRlY29kZSIsImRlZmF1bHREZWNvZGUiLCJuIiwibGVuZ3RoIiwiaW5kZXhPZiIsInIiLCJsYXN0SW5kZXhPZiIsIm8iLCJzbGljZSIsInRyaW0iLCJjaGFyQ29kZUF0IiwiY29va2llU2VyaWFsaXplIiwiZW5jb2RlIiwiZGVmYXVsdEVuY29kZSIsInRlc3QiLCJUeXBlRXJyb3IiLCJhIiwibWF4QWdlIiwiaXNOYU4iLCJpc0Zpbml0ZSIsIk1hdGgiLCJmbG9vciIsImRvbWFpbiIsInBhdGgiLCJleHBpcmVzIiwiaXNEYXRlIiwidG9TdHJpbmciLCJjYWxsIiwiRGF0ZSIsInZhbHVlT2YiLCJ0b1VUQ1N0cmluZyIsImh0dHBPbmx5Iiwic2VjdXJlIiwicHJpb3JpdHkiLCJ0b0xvd2VyQ2FzZSIsInNhbWVTaXRlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZ2V0VG9rZW5QYXlsb2FkIiwic3BsaXQiLCJtYXAiLCJqb2luIiwiSlNPTiIsInBhcnNlIiwiaXNUb2tlbkV4cGlyZWQiLCJrZXlzIiwiZXhwIiwibm93IiwiYXRvYiIsIlN0cmluZyIsInJlcGxhY2UiLCJjaGFyQXQiLCJmcm9tQ2hhckNvZGUiLCJCYXNlQXV0aFN0b3JlIiwiYmFzZVRva2VuIiwiYmFzZU1vZGVsIiwiX29uQ2hhbmdlQ2FsbGJhY2tzIiwidG9rZW4iLCJtb2RlbCIsImlzVmFsaWQiLCJpc0FkbWluIiwidHlwZSIsImlzQXV0aFJlY29yZCIsInNhdmUiLCJ0cmlnZ2VyQ2hhbmdlIiwiY2xlYXIiLCJsb2FkRnJvbUNvb2tpZSIsIkFycmF5IiwiaXNBcnJheSIsImV4cG9ydFRvQ29va2llIiwic3RyaW5naWZ5IiwiQmxvYiIsInNpemUiLCJpZCIsImVtYWlsIiwib25DaGFuZ2UiLCJwdXNoIiwic3BsaWNlIiwiTG9jYWxBdXRoU3RvcmUiLCJzdG9yYWdlRmFsbGJhY2siLCJzdG9yYWdlS2V5IiwiX2JpbmRTdG9yYWdlRXZlbnQiLCJfc3RvcmFnZUdldCIsIl9zdG9yYWdlU2V0IiwiX3N0b3JhZ2VSZW1vdmUiLCJ3aW5kb3ciLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJhZGRFdmVudExpc3RlbmVyIiwia2V5IiwiQmFzZVNlcnZpY2UiLCJjbGllbnQiLCJTZXR0aW5nc1NlcnZpY2UiLCJnZXRBbGwiLCJtZXRob2QiLCJzZW5kIiwidXBkYXRlIiwiYm9keSIsInRlc3RTMyIsImZpbGVzeXN0ZW0iLCJ0aGVuIiwidGVzdEVtYWlsIiwidGVtcGxhdGUiLCJnZW5lcmF0ZUFwcGxlQ2xpZW50U2VjcmV0IiwiY2xpZW50SWQiLCJ0ZWFtSWQiLCJrZXlJZCIsInByaXZhdGVLZXkiLCJkdXJhdGlvbiIsIkNydWRTZXJ2aWNlIiwiZ2V0RnVsbExpc3QiLCJfZ2V0RnVsbExpc3QiLCJiYXRjaCIsImdldExpc3QiLCJxdWVyeSIsInBhZ2UiLCJwZXJQYWdlIiwiYmFzZUNydWRQYXRoIiwiaXRlbXMiLCJnZXRGaXJzdExpc3RJdGVtIiwicmVxdWVzdEtleSIsImZpbHRlciIsInNraXBUb3RhbCIsImNvZGUiLCJnZXRPbmUiLCJidWlsZFVybCIsImNyZWF0ZSIsImRlbGV0ZSIsInJlcXVlc3QiLCJjb25jYXQiLCJub3JtYWxpemVMZWdhY3lPcHRpb25zQXJncyIsImNvbnNvbGUiLCJ3YXJuIiwicmVzZXRBdXRvUmVmcmVzaCIsIl9yZXNldEF1dG9SZWZyZXNoIiwiQWRtaW5TZXJ2aWNlIiwiYXV0aFN0b3JlIiwiY29sbGVjdGlvbklkIiwiYXV0aFJlc3BvbnNlIiwiYWRtaW4iLCJhdXRoV2l0aFBhc3N3b3JkIiwiaWRlbnRpdHkiLCJwYXNzd29yZCIsImF1dG9SZWZyZXNoVGhyZXNob2xkIiwiYXV0b1JlZnJlc2giLCJyZWdpc3RlckF1dG9SZWZyZXNoIiwiYmVmb3JlU2VuZCIsInNlbmRPcHRpb25zIiwiYyIsImwiLCJoZWFkZXJzIiwiYXV0aFJlZnJlc2giLCJiaW5kIiwicmVxdWVzdFBhc3N3b3JkUmVzZXQiLCJjb25maXJtUGFzc3dvcmRSZXNldCIsInBhc3N3b3JkQ29uZmlybSIsIm5vcm1hbGl6ZVVua25vd25RdWVyeVBhcmFtcyIsIlJlYWx0aW1lU2VydmljZSIsImFyZ3VtZW50cyIsImV2ZW50U291cmNlIiwic3Vic2NyaXB0aW9ucyIsImxhc3RTZW50U3Vic2NyaXB0aW9ucyIsIm1heENvbm5lY3RUaW1lb3V0IiwicmVjb25uZWN0QXR0ZW1wdHMiLCJtYXhSZWNvbm5lY3RBdHRlbXB0cyIsInByZWRlZmluZWRSZWNvbm5lY3RJbnRlcnZhbHMiLCJwZW5kaW5nQ29ubmVjdHMiLCJpc0Nvbm5lY3RlZCIsInN1YnNjcmliZSIsImxpc3RlbmVyIiwic3VibWl0U3Vic2NyaXB0aW9ucyIsImNvbm5lY3QiLCJ1bnN1YnNjcmliZUJ5VG9waWNBbmRMaXN0ZW5lciIsInVuc3Vic2NyaWJlIiwiZ2V0U3Vic2NyaXB0aW9uc0J5VG9waWMiLCJoYXNTdWJzY3JpcHRpb25MaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGlzY29ubmVjdCIsInVuc3Vic2NyaWJlQnlQcmVmaXgiLCJzdGFydHNXaXRoIiwiYWRkQWxsU3Vic2NyaXB0aW9uTGlzdGVuZXJzIiwiZ2V0Tm9uRW1wdHlTdWJzY3JpcHRpb25LZXlzIiwiZ2V0U3Vic2NyaXB0aW9uc0NhbmNlbEtleSIsImNhdGNoIiwicmVtb3ZlQWxsU3Vic2NyaXB0aW9uTGlzdGVuZXJzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJpbml0Q29ubmVjdCIsImNsZWFyVGltZW91dCIsImNvbm5lY3RUaW1lb3V0SWQiLCJzZXRUaW1lb3V0IiwiY29ubmVjdEVycm9ySGFuZGxlciIsIkV2ZW50U291cmNlIiwib25lcnJvciIsImxhc3RFdmVudElkIiwiaGFzVW5zZW50U3Vic2NyaXB0aW9ucyIsInJlY29ubmVjdFRpbWVvdXRJZCIsImNhbmNlbFJlcXVlc3QiLCJjbG9zZSIsIlJlY29yZFNlcnZpY2UiLCJjb2xsZWN0aW9uSWRPck5hbWUiLCJiYXNlQ29sbGVjdGlvblBhdGgiLCJyZWFsdGltZSIsImNvbGxlY3Rpb25OYW1lIiwicmVjb3JkIiwibGlzdEF1dGhNZXRob2RzIiwidXNlcm5hbWVQYXNzd29yZCIsImVtYWlsUGFzc3dvcmQiLCJhdXRoUHJvdmlkZXJzIiwiYXV0aFdpdGhPQXV0aDJDb2RlIiwicHJvdmlkZXIiLCJjb2RlVmVyaWZpZXIiLCJyZWRpcmVjdFVybCIsImNyZWF0ZURhdGEiLCJhdXRoV2l0aE9BdXRoMiIsImZpbmQiLCJjbGVhbnVwIiwidXJsQ2FsbGJhY2siLCJvcGVuQnJvd3NlclBvcHVwIiwic3RhdGUiLCJlcnJvciIsInNjb3BlcyIsInNjb3BlIiwiX3JlcGxhY2VRdWVyeVBhcmFtcyIsImF1dGhVcmwiLCJsb2NhdGlvbiIsImhyZWYiLCJyZXF1ZXN0VmVyaWZpY2F0aW9uIiwiY29uZmlybVZlcmlmaWNhdGlvbiIsInZlcmlmaWVkIiwicmVxdWVzdEVtYWlsQ2hhbmdlIiwibmV3RW1haWwiLCJjb25maXJtRW1haWxDaGFuZ2UiLCJsaXN0RXh0ZXJuYWxBdXRocyIsInVubGlua0V4dGVybmFsQXV0aCIsInN1YnN0cmluZyIsImhhc093blByb3BlcnR5Iiwib3BlbiIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsIkNvbGxlY3Rpb25TZXJ2aWNlIiwiaW1wb3J0IiwiY29sbGVjdGlvbnMiLCJkZWxldGVNaXNzaW5nIiwiTG9nU2VydmljZSIsImdldFN0YXRzIiwiSGVhbHRoU2VydmljZSIsImNoZWNrIiwiRmlsZVNlcnZpY2UiLCJnZXRVcmwiLCJkb3dubG9hZCIsIlVSTFNlYXJjaFBhcmFtcyIsImdldFRva2VuIiwiQmFja3VwU2VydmljZSIsInVwbG9hZCIsInJlc3RvcmUiLCJnZXREb3dubG9hZFVybCIsIkNsaWVudCIsImNhbmNlbENvbnRyb2xsZXJzIiwicmVjb3JkU2VydmljZXMiLCJlbmFibGVBdXRvQ2FuY2VsbGF0aW9uIiwiYmFzZVVybCIsImxhbmciLCJhZG1pbnMiLCJmaWxlcyIsImxvZ3MiLCJzZXR0aW5ncyIsImhlYWx0aCIsImJhY2t1cHMiLCJjb2xsZWN0aW9uIiwiYXV0b0NhbmNlbGxhdGlvbiIsImFib3J0IiwiY2FuY2VsQWxsUmVxdWVzdHMiLCJ0b0lTT1N0cmluZyIsInJlcGxhY2VBbGwiLCJnZXRGaWxlVXJsIiwib3JpZ2luIiwiZW5kc1dpdGgiLCJwYXRobmFtZSIsImluaXRTZW5kT3B0aW9ucyIsIm9wdGlvbnMiLCJzZXJpYWxpemVRdWVyeVBhcmFtcyIsImdldEhlYWRlciIsImZldGNoIiwianNvbiIsImFmdGVyU2VuZCIsImNvbnZlcnRUb0Zvcm1EYXRhSWZOZWVkZWQiLCJwYXJhbXMiLCIkYXV0b0NhbmNlbCIsIiRjYW5jZWxLZXkiLCJpc0Zvcm1EYXRhIiwiQXV0aG9yaXphdGlvbiIsIkFib3J0Q29udHJvbGxlciIsInNpZ25hbCIsIkZvcm1EYXRhIiwiaGFzQmxvYkZpZWxkIiwiYXBwZW5kIiwiRmlsZSIsIkFzeW5jQXV0aFN0b3JlIiwicXVldWUiLCJzYXZlRnVuYyIsImNsZWFyRnVuYyIsIl9lbnF1ZXVlIiwiX2xvYWRJbml0aWFsIiwiaW5pdGlhbCIsIl9kZXF1ZXVlIiwiZmluYWxseSIsInNoaWZ0IiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pocketbase/dist/pocketbase.es.mjs\n");

/***/ })

};
;